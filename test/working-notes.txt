Test consolidation working notes

Goal: Parametric FPGA tests, all Python / no bash, better reporting, robust flow
Params:
- bitfile path
- 32/64 bit ($XLEN) (--> RV* arch string?)
- CPU frequency
- compiler = gcc-elf | gcc-linux | clang | ???
- (optional) test names to include/exclude

Subcommands? isa, freertos, linux
... maybe not, assuming we'd like to run all tests with one command line

Phases:
1. Convert all Py2 to Py3
2. Replace all shell scripts with gfetest.py
3. (maybe!) Reorganize GFE repo to improve ergonomics
    - one dir per processor, containing all config
-----------------------------------------------------------

test_processor.sh calls:
- setup_env.sh
- program_fpga.sh $proc_name
- for P1:
    - test.sh 32
    - test_freertos.sh
    - if '--full_ci' was passed to test_processor:
        - test_freertos.sh --full_ci
        - test_freertos.sh --ethernet
        - test_freertos.sh --flash $proc_name blinky
- for P2, P3:
    - test.sh 64
    - test_linux.sh busybox
    - test_linux.sh debian
    - if '--full_ci' was passed to test_processor:
        - test_linux.sh busybox --ethernet
        - test_linux.sh debian --ethernet
        - test_linux.sh debian --flash $proc_name

setup_env.sh calls nothing, it just supplies arg parsing and error reporting.

program_fpga.sh calls vivado_lab, passing bitfile to tcl/prog_bit.tcl

test.sh calls:
- make XLEN=$XLEN in testing/baremetal/asm
- make (and sets CC) in riscv-tests
- testing/scripts/test_gfe_unittest.py TestGfe$XLEN
- testing/scripts/softReset.py
- testing/scripts/gen-test-all {rv64gcsu|rv32imacu} > test_${XLEN}.gdb
- riscv${XLEN}-unknown-elf-gdb --batch -x test_${XLEN}.gdb
- summarize test results with grep -q 

test_freertos.sh calls:
- PROG=main_{udp|tcp|gpio|uart|iic|sd|blinky|full} make in FreeRTOS-mirror/FreeRTOS/Demo/RISC-V_Galois_P1/ 
- testing/scripts/test_upload_flash.py
- program_fpga.sh $proc_name
- testing/scripts/test_gfe_unittest.py TestFreeRTOS.test_{udp|tcp|gpio|uart|iic|sd|blink|full}

test_linux.sh calls:
- make {debian|} in bootmem/
- testing/scripts/test_upload_flash.py
- program_fpga.sh $proc_name
- testing/scripts/test_gfe_unittest.py TestLinux.test_{debian|busybox}_{flash_boot|ethernet|boot}


test_gfe_unittest.py imports:
    gfeparameters  -- constants: DDR, bootrom, UART, reset, PLIC, CPU clock
    gfetester      -- interface to UART via GDB and OpenOCD
        testlib    -- from riscv-tests. Interfaces for GDB, OpenOCD, VcsSim, Spike

other files in testing/scripts:
    gdbserver.py     imports testlib, targets -- from riscv-tests, unused
    openocd.py       imports testlib, targets -- from riscv-tests, unused
    run_elf.py       imports gfetester -- loads a binary with GDB, prints output
    run_gfe_test.py  imports gfetester -- does almost exact same stuff as run_elf
    runOnLinux.py    imports test_gfe_unittest -- boots Busybox or Debian images,
                                                  interacts over UART, includes some tests
    softReset.py     imports gfetester -- starts GDB, calls softReset()
    targets.py       imports testlib -- from riscv-tests, uses testing/targets/* ?
    test_upload_flash.py     -- calls gfe/tcl/program_flash which calls vivado_lab


List of tests in test_gfe_unittest.py:
TestGfe.
    test_soft_reset
    test_uart
    test_ddr
    test_bootrom
TestFreeRTOS.
    test_full
    test_flash_full
    test_blink
    test_flash_blinky
    test_uart
    test_gpio
    test_iic
    test_sd
    test_tcp
    test_udp
TestLinux.
    test_busybox_boot
    test_busybox_flash_boot
    test_debian_boot
    test_debian_flash_boot
    test_busybox_ethernet
    test_debian_ethernet
TestP2IsaGfe(BaseTestIsaGfe)
TestP1IsaGfe(BaseTestIsaGfe)

