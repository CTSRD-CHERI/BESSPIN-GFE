//
// Generated by Bluespec Compiler, version 2017.07.A (build e1df8052c, 2017-07-21)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_addr_map               O     1 const
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bid                      O     4 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rid                      O     4 reg
// slave_rdata                    O    64 reg
// slave_rresp                    O     2 reg
// slave_rlast                    O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    64 reg
// set_addr_map_addr_lim          I    64 reg
// slave_awvalid                  I     1
// slave_awid                     I     4 reg
// slave_awaddr                   I    64 reg
// slave_awlen                    I     8 reg
// slave_awsize                   I     3 reg
// slave_awburst                  I     2 reg
// slave_awlock                   I     1 reg
// slave_awcache                  I     4 reg
// slave_awprot                   I     3 reg
// slave_awqos                    I     4 reg
// slave_awregion                 I     4 reg
// slave_wvalid                   I     1
// slave_wdata                    I    64 reg
// slave_wstrb                    I     8 reg
// slave_wlast                    I     1 reg
// slave_bready                   I     1
// slave_arvalid                  I     1
// slave_arid                     I     4 reg
// slave_araddr                   I    64 reg
// slave_arlen                    I     8 reg
// slave_arsize                   I     3 reg
// slave_arburst                  I     2 reg
// slave_arlock                   I     1 reg
// slave_arcache                  I     4 reg
// slave_arprot                   I     3 reg
// slave_arqos                    I     4 reg
// slave_arregion                 I     4 reg
// slave_rready                   I     1
// EN_set_addr_map                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFlash(CLK,
	       RST_N,

	       set_addr_map_addr_base,
	       set_addr_map_addr_lim,
	       EN_set_addr_map,
	       RDY_set_addr_map,

	       slave_awvalid,
	       slave_awid,
	       slave_awaddr,
	       slave_awlen,
	       slave_awsize,
	       slave_awburst,
	       slave_awlock,
	       slave_awcache,
	       slave_awprot,
	       slave_awqos,
	       slave_awregion,

	       slave_awready,

	       slave_wvalid,
	       slave_wdata,
	       slave_wstrb,
	       slave_wlast,

	       slave_wready,

	       slave_bvalid,

	       slave_bid,

	       slave_bresp,

	       slave_bready,

	       slave_arvalid,
	       slave_arid,
	       slave_araddr,
	       slave_arlen,
	       slave_arsize,
	       slave_arburst,
	       slave_arlock,
	       slave_arcache,
	       slave_arprot,
	       slave_arqos,
	       slave_arregion,

	       slave_arready,

	       slave_rvalid,

	       slave_rid,

	       slave_rdata,

	       slave_rresp,

	       slave_rlast,

	       slave_rready);
  input  CLK;
  input  RST_N;

  // action method set_addr_map
  input  [63 : 0] set_addr_map_addr_base;
  input  [63 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // action method slave_m_awvalid
  input  slave_awvalid;
  input  [3 : 0] slave_awid;
  input  [63 : 0] slave_awaddr;
  input  [7 : 0] slave_awlen;
  input  [2 : 0] slave_awsize;
  input  [1 : 0] slave_awburst;
  input  slave_awlock;
  input  [3 : 0] slave_awcache;
  input  [2 : 0] slave_awprot;
  input  [3 : 0] slave_awqos;
  input  [3 : 0] slave_awregion;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_wvalid;
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;
  input  slave_wlast;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bid
  output [3 : 0] slave_bid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_bready;

  // action method slave_m_arvalid
  input  slave_arvalid;
  input  [3 : 0] slave_arid;
  input  [63 : 0] slave_araddr;
  input  [7 : 0] slave_arlen;
  input  [2 : 0] slave_arsize;
  input  [1 : 0] slave_arburst;
  input  slave_arlock;
  input  [3 : 0] slave_arcache;
  input  [2 : 0] slave_arprot;
  input  [3 : 0] slave_arqos;
  input  [3 : 0] slave_arregion;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rid
  output [3 : 0] slave_rid;

  // value method slave_m_rdata
  output [63 : 0] slave_rdata;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rlast
  output slave_rlast;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_rready;

  // signals for module outputs
  wire [63 : 0] slave_rdata;
  wire [3 : 0] slave_bid, slave_rid;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire RDY_set_addr_map,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rlast,
       slave_rvalid,
       slave_wready;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_module_ready
  reg rg_module_ready;
  wire rg_module_ready$D_IN, rg_module_ready$EN;

  // ports of submodule slave_xactor_f_rd_addr
  wire [96 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [70 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [96 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [72 : 0] slave_xactor_f_wr_data$D_IN;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [5 : 0] slave_xactor_f_wr_resp$D_IN, slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_rl_process_rd_req, WILL_FIRE_RL_rl_process_wr_req;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h808;
  reg [31 : 0] v__h12045;
  reg [31 : 0] v__h12338;
  reg [31 : 0] v__h12448;
  reg [31 : 0] v__h802;
  reg [31 : 0] v__h12039;
  reg [31 : 0] v__h12332;
  reg [31 : 0] v__h12442;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] data64__h987;
  reg [31 : 0] CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1,
	       CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2;
  wire [63 : 0] byte_addr__h705, rdata__h924;
  wire [1 : 0] rdr_rresp__h957;
  wire NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18,
       NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218;

  // action method set_addr_map
  assign RDY_set_addr_map = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = slave_xactor_f_wr_addr$FULL_N ;

  // value method slave_m_wready
  assign slave_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method slave_m_bid
  assign slave_bid = slave_xactor_f_wr_resp$D_OUT[5:2] ;

  // value method slave_m_bresp
  assign slave_bresp = slave_xactor_f_wr_resp$D_OUT[1:0] ;

  // value method slave_m_arready
  assign slave_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method slave_m_rid
  assign slave_rid = slave_xactor_f_rd_data$D_OUT[70:67] ;

  // value method slave_m_rdata
  assign slave_rdata = slave_xactor_f_rd_data$D_OUT[66:3] ;

  // value method slave_m_rresp
  assign slave_rresp = slave_xactor_f_rd_data$D_OUT[2:1] ;

  // value method slave_m_rlast
  assign slave_rlast = slave_xactor_f_rd_data$D_OUT[0] ;

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd97), .guarded(32'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_addr$D_IN),
								  .ENQ(slave_xactor_f_rd_addr$ENQ),
								  .DEQ(slave_xactor_f_rd_addr$DEQ),
								  .CLR(slave_xactor_f_rd_addr$CLR),
								  .D_OUT(slave_xactor_f_rd_addr$D_OUT),
								  .FULL_N(slave_xactor_f_rd_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(32'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_data$D_IN),
								  .ENQ(slave_xactor_f_rd_data$ENQ),
								  .DEQ(slave_xactor_f_rd_data$DEQ),
								  .CLR(slave_xactor_f_rd_data$CLR),
								  .D_OUT(slave_xactor_f_rd_data$D_OUT),
								  .FULL_N(slave_xactor_f_rd_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd97), .guarded(32'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_addr$D_IN),
								  .ENQ(slave_xactor_f_wr_addr$ENQ),
								  .DEQ(slave_xactor_f_wr_addr$DEQ),
								  .CLR(slave_xactor_f_wr_addr$CLR),
								  .D_OUT(slave_xactor_f_wr_addr$D_OUT),
								  .FULL_N(slave_xactor_f_wr_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd73), .guarded(32'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_data$D_IN),
								  .ENQ(slave_xactor_f_wr_data$ENQ),
								  .DEQ(slave_xactor_f_wr_data$DEQ),
								  .CLR(slave_xactor_f_wr_data$CLR),
								  .D_OUT(),
								  .FULL_N(slave_xactor_f_wr_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_resp$D_IN),
								 .ENQ(slave_xactor_f_wr_resp$ENQ),
								 .DEQ(slave_xactor_f_wr_resp$DEQ),
								 .CLR(slave_xactor_f_wr_resp$CLR),
								 .D_OUT(slave_xactor_f_wr_resp$D_OUT),
								 .FULL_N(slave_xactor_f_wr_resp$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_process_rd_req
  assign WILL_FIRE_RL_rl_process_rd_req =
	     slave_xactor_f_rd_addr$EMPTY_N &&
	     slave_xactor_f_rd_data$FULL_N &&
	     rg_module_ready ;

  // rule RL_rl_process_wr_req
  assign WILL_FIRE_RL_rl_process_wr_req =
	     slave_xactor_f_wr_addr$EMPTY_N &&
	     slave_xactor_f_wr_data$EMPTY_N &&
	     slave_xactor_f_wr_resp$FULL_N &&
	     rg_module_ready ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_module_ready
  assign rg_module_ready$D_IN = 1'd1 ;
  assign rg_module_ready$EN = EN_set_addr_map ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN =
	     { slave_arid,
	       slave_araddr,
	       slave_arlen,
	       slave_arsize,
	       slave_arburst,
	       slave_arlock,
	       slave_arcache,
	       slave_arprot,
	       slave_arqos,
	       slave_arregion } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     slave_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ = WILL_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN =
	     { slave_xactor_f_rd_addr$D_OUT[96:93],
	       rdata__h924,
	       rdr_rresp__h957,
	       1'd1 } ;
  assign slave_xactor_f_rd_data$ENQ = WILL_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_data$DEQ =
	     slave_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN =
	     { slave_awid,
	       slave_awaddr,
	       slave_awlen,
	       slave_awsize,
	       slave_awburst,
	       slave_awlock,
	       slave_awcache,
	       slave_awprot,
	       slave_awqos,
	       slave_awregion } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     slave_awvalid && slave_xactor_f_wr_addr$FULL_N ;
  assign slave_xactor_f_wr_addr$DEQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN =
	     { slave_wdata, slave_wstrb, slave_wlast } ;
  assign slave_xactor_f_wr_data$ENQ =
	     slave_wvalid && slave_xactor_f_wr_data$FULL_N ;
  assign slave_xactor_f_wr_data$DEQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp$D_IN =
	     { slave_xactor_f_wr_addr$D_OUT[96:93],
	       NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218 ?
		 2'b10 :
		 2'b0 } ;
  assign slave_xactor_f_wr_resp$ENQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_resp$DEQ =
	     slave_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18 =
	     slave_xactor_f_rd_addr$D_OUT[31:29] != 3'b0 ||
	     rg_addr_base > slave_xactor_f_rd_addr$D_OUT[92:29] ||
	     slave_xactor_f_rd_addr$D_OUT[92:29] >= rg_addr_lim ;
  assign NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218 =
	     slave_xactor_f_wr_addr$D_OUT[31:29] != 3'b0 ||
	     rg_addr_base > slave_xactor_f_wr_addr$D_OUT[92:29] ||
	     slave_xactor_f_wr_addr$D_OUT[92:29] >= rg_addr_lim ;
  assign byte_addr__h705 =
	     slave_xactor_f_rd_addr$D_OUT[92:29] - rg_addr_base ;
  assign rdata__h924 =
	     NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18 ?
	       64'd0 :
	       data64__h987 ;
  assign rdr_rresp__h957 =
	     NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18 ?
	       2'b10 :
	       2'b0 ;
  always@(byte_addr__h705)
  begin
    case (byte_addr__h705)
      64'd67108880,
      64'd67108888,
      64'd67108920,
      64'd67108936,
      64'd67108944,
      64'd67108952,
      64'd67109064,
      64'd67109096,
      64'd67109176,
      64'd67109288,
      64'd67109312,
      64'd67109464,
      64'd67109592,
      64'd67110000,
      64'd67110008,
      64'd67110016,
      64'd67110024,
      64'd67110032,
      64'd67110040,
      64'd67110048,
      64'd67110056,
      64'd67110064,
      64'd67110072,
      64'd67110080,
      64'd67110088,
      64'd67110096,
      64'd67110104,
      64'd67110112,
      64'd67110120,
      64'd67110128,
      64'd67110136,
      64'd67110144,
      64'd67110152,
      64'd67110160,
      64'd67110168,
      64'd67110176,
      64'd67110184,
      64'd67110192,
      64'd67110200,
      64'd67110208,
      64'd67110216,
      64'd67110224,
      64'd67110232,
      64'd67110240,
      64'd67110248,
      64'd67110256,
      64'd67110264,
      64'd67110272,
      64'd67110280,
      64'd67110288,
      64'd67110296,
      64'd67110304,
      64'd67110312,
      64'd67110320,
      64'd67110328,
      64'd67110336,
      64'd67110344,
      64'd67110352,
      64'd67110360,
      64'd67110368,
      64'd67110376,
      64'd67110384,
      64'd67110392,
      64'd67110400,
      64'd67110408,
      64'd67110416,
      64'd67110424,
      64'd67110432,
      64'd67110440,
      64'd67110448,
      64'd67110456,
      64'd67110464,
      64'd67110472,
      64'd67110480,
      64'd67110488,
      64'd67110496,
      64'd67110504,
      64'd67110512,
      64'd67110520,
      64'd67110528,
      64'd67110536,
      64'd67110544,
      64'd67110552,
      64'd67110560,
      64'd67110568,
      64'd67110576,
      64'd67110584,
      64'd67110592,
      64'd67110600,
      64'd67110608,
      64'd67110616,
      64'd67110624,
      64'd67110632,
      64'd67110640,
      64'd67110648,
      64'd67110656,
      64'd67110664,
      64'd67110672,
      64'd67110680,
      64'd67110688,
      64'd67110696,
      64'd67110704,
      64'd67110712,
      64'd67110720,
      64'd67110728,
      64'd67110736,
      64'd67110744,
      64'd67110752,
      64'd67110760,
      64'd67110768,
      64'd67110776,
      64'd67110784,
      64'd67110792,
      64'd67110800,
      64'd67110808,
      64'd67110816,
      64'd67110824,
      64'd67110832,
      64'd67110840,
      64'd67110848,
      64'd67110856,
      64'd67110864,
      64'd67110872,
      64'd67110880,
      64'd67110888,
      64'd67110896,
      64'd67110904,
      64'd67110912,
      64'd67110920,
      64'd67110928,
      64'd67110936,
      64'd67110944,
      64'd67110952,
      64'd67110960,
      64'd67110968,
      64'd67110976,
      64'd67110984,
      64'd67110992,
      64'd67111000,
      64'd67111008,
      64'd67111016,
      64'd67111024,
      64'd67111032,
      64'd67111040,
      64'd67111048,
      64'd67111056,
      64'd67111064,
      64'd67111072,
      64'd67111080,
      64'd67111088,
      64'd67111096,
      64'd67111104,
      64'd67111112,
      64'd67111120,
      64'd67111128,
      64'd67111136,
      64'd67111144,
      64'd67111152,
      64'd67111160,
      64'd67111168,
      64'd67111176,
      64'd67111184,
      64'd67111192,
      64'd67111200,
      64'd67111208,
      64'd67111216,
      64'd67111224,
      64'd67111232,
      64'd67111240,
      64'd67111248,
      64'd67111256,
      64'd67111264,
      64'd67111272,
      64'd67111280,
      64'd67111288,
      64'd67111296,
      64'd67111304,
      64'd67111312,
      64'd67111320,
      64'd67111328,
      64'd67111336,
      64'd67111344,
      64'd67111352,
      64'd67111360,
      64'd67111368,
      64'd67111376,
      64'd67111384,
      64'd67111392,
      64'd67111400,
      64'd67111408,
      64'd67111416,
      64'd67111424,
      64'd67111432,
      64'd67111440,
      64'd67111448,
      64'd67111456,
      64'd67111464,
      64'd67111472,
      64'd67111480,
      64'd67111488,
      64'd67111496,
      64'd67111504,
      64'd67111512,
      64'd67111520,
      64'd67111528,
      64'd67111536,
      64'd67111544,
      64'd67111552,
      64'd67111560,
      64'd67111568,
      64'd67111576,
      64'd67111584,
      64'd67111592,
      64'd67111600,
      64'd67111608,
      64'd67111616,
      64'd67111624,
      64'd67111632,
      64'd67111640,
      64'd67111648,
      64'd67111656,
      64'd67111664,
      64'd67111672,
      64'd67111680,
      64'd67111688,
      64'd67111696,
      64'd67111704,
      64'd67111712,
      64'd67111720,
      64'd67111728,
      64'd67111736,
      64'd67111744,
      64'd67111752,
      64'd67111760,
      64'd67111768,
      64'd67111776,
      64'd67111784,
      64'd67111792,
      64'd67111800,
      64'd67111808,
      64'd67111816,
      64'd67111824,
      64'd67111832,
      64'd67111840,
      64'd67111848,
      64'd67111856,
      64'd67111864,
      64'd67111872,
      64'd67111880,
      64'd67111888,
      64'd67111896,
      64'd67111904,
      64'd67111912,
      64'd67111920,
      64'd67111928,
      64'd67111936,
      64'd67111944,
      64'd67111952,
      64'd67111960,
      64'd67111968,
      64'd67111976,
      64'd67111984,
      64'd67111992,
      64'd67112000,
      64'd67112008,
      64'd67112016,
      64'd67112024,
      64'd67112032,
      64'd67112040,
      64'd67112048,
      64'd67112056,
      64'd67112064,
      64'd67112072,
      64'd67112080,
      64'd67112088,
      64'd67112096,
      64'd67112104,
      64'd67112112,
      64'd67112120,
      64'd67112128,
      64'd67112136,
      64'd67112144,
      64'd67112152,
      64'd67112160,
      64'd67112168,
      64'd67112176,
      64'd67112184,
      64'd67112192,
      64'd67112200,
      64'd67112208,
      64'd67112216,
      64'd67112224,
      64'd67112232,
      64'd67112240,
      64'd67112248,
      64'd67112256,
      64'd67112264,
      64'd67112272,
      64'd67112280,
      64'd67112288,
      64'd67112296,
      64'd67112304,
      64'd67112312,
      64'd67112320,
      64'd67112328,
      64'd67112336,
      64'd67112344,
      64'd67112352,
      64'd67112360,
      64'd67112368,
      64'd67112376,
      64'd67112384,
      64'd67112392,
      64'd67112400,
      64'd67112408,
      64'd67112416,
      64'd67112424,
      64'd67112432,
      64'd67112440,
      64'd67112448,
      64'd67112456,
      64'd67112464,
      64'd67112472,
      64'd67112480,
      64'd67112488,
      64'd67112496,
      64'd67112504,
      64'd67112512,
      64'd67112520,
      64'd67112528,
      64'd67112536,
      64'd67112544,
      64'd67112552,
      64'd67112560,
      64'd67112568,
      64'd67112576,
      64'd67112584,
      64'd67112592,
      64'd67112600,
      64'd67112608,
      64'd67112616,
      64'd67112624,
      64'd67112632,
      64'd67112640,
      64'd67112648,
      64'd67112656,
      64'd67112664,
      64'd67112672,
      64'd67112680,
      64'd67112688,
      64'd67112696,
      64'd67112704,
      64'd67112712,
      64'd67112720,
      64'd67112728,
      64'd67112736,
      64'd67112744,
      64'd67112752,
      64'd67112760,
      64'd67112768,
      64'd67112776,
      64'd67112784,
      64'd67112792,
      64'd67112800,
      64'd67112808,
      64'd67112816,
      64'd67112824,
      64'd67112832,
      64'd67112840,
      64'd67112848,
      64'd67112856,
      64'd67112864,
      64'd67112872,
      64'd67112880,
      64'd67112888,
      64'd67112896,
      64'd67112904,
      64'd67112912,
      64'd67112920,
      64'd67112928,
      64'd67112936,
      64'd67112944,
      64'd67112952:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 = 32'h0;
      64'd67108896:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h54040000;
      64'd67108904:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h88030000;
      64'd67108912:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h11000000;
      64'd67108928:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h50030000;
      64'd67108960,
      64'd67108976,
      64'd67109072,
      64'd67109088,
      64'd67109104,
      64'd67109296,
      64'd67109352,
      64'd67109736,
      64'd67109752:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h04000000;
      64'd67108968, 64'd67108984, 64'd67109368, 64'd67109656, 64'd67109784:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h02000000;
      64'd67108992:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h16000000;
      64'd67109000:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h62626375;
      64'd67109008:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h656B6970;
      64'd67109016:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h65642D65;
      64'd67109024,
      64'd67109128,
      64'd67109144,
      64'd67109160,
      64'd67109200,
      64'd67109224,
      64'd67109248,
      64'd67109320,
      64'd67109416,
      64'd67109456,
      64'd67109472,
      64'd67109488,
      64'd67109536,
      64'd67109568,
      64'd67109624,
      64'd67109680,
      64'd67109704,
      64'd67109744:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h03000000;
      64'd67109032:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h26000000;
      64'd67109040, 64'd67109504:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h732C7261;
      64'd67109048, 64'd67109512:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h7261622D;
      64'd67109056,
      64'd67109080,
      64'd67109264,
      64'd67109304,
      64'd67109360,
      64'd67109376,
      64'd67109448,
      64'd67109608,
      64'd67109616,
      64'd67109776:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h01000000;
      64'd67109112, 64'd67109760:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h80969800;
      64'd67109120:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h40757063;
      64'd67109136:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h3F000000;
      64'd67109152, 64'd67109424, 64'd67109632, 64'd67109712:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h4B000000;
      64'd67109168:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h4F000000;
      64'd67109184:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h06000000;
      64'd67109192:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h63736972;
      64'd67109208:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h56000000;
      64'd67109216:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h75616D69;
      64'd67109232:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h60000000;
      64'd67109240:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h76732C76;
      64'd67109256:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h69000000;
      64'd67109272:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h70757272;
      64'd67109280:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6F72746E;
      64'd67109328, 64'd67109496, 64'd67109576, 64'd67109688:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h1B000000;
      64'd67109336:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h70632C76;
      64'd67109344:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h00006374;
      64'd67109384:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h38407972;
      64'd67109392:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h00303030;
      64'd67109400:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h07000000;
      64'd67109408:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6F6D656D;
      64'd67109432:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h00000080;
      64'd67109440:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h00000010;
      64'd67109480:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h0F000000;
      64'd67109520:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h69730063;
      64'd67109528:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h7375622D;
      64'd67109544:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'hA7000000;
      64'd67109552:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6E696C63;
      64'd67109560, 64'd67109672:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h30303030;
      64'd67109584:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6C632C76;
      64'd67109600:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h10000000;
      64'd67109640:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h00000002;
      64'd67109648:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h00000C00;
      64'd67109664:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h74726175;
      64'd67109696:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h61303535;
      64'd67109720:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h000000C0;
      64'd67109728:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h40000000;
      64'd67109768:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h08000000;
      64'd67109792:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h09000000;
      64'd67109800:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h73736572;
      64'd67109808:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h2300736C;
      64'd67109816:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6C65632D;
      64'd67109824:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h61706D6F;
      64'd67109832:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6F6D0065;
      64'd67109840:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h656D6974;
      64'd67109848:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6572662D;
      64'd67109856:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h64007963;
      64'd67109864:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h79745F65;
      64'd67109872:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h73006765;
      64'd67109880:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h69720073;
      64'd67109888:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h00617369;
      64'd67109896:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h65707974;
      64'd67109904:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h662D6B63;
      64'd67109912:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h79636E65;
      64'd67109920, 64'd67109936:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h72726574;
      64'd67109928:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6C6C6563;
      64'd67109944:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h746E6F63;
      64'd67109952:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h70007265;
      64'd67109960:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h7200656C;
      64'd67109968:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h6E690073;
      64'd67109976:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h73747075;
      64'd67109984:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h65646E65;
      64'd67109992:
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
	      32'h68732D67;
      default: CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 =
		   32'hAAAAAAAA;
    endcase
  end
  always@(byte_addr__h705)
  begin
    case (byte_addr__h705)
      64'd67108880:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00028067;
      64'd67108888:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'hC0000000;
      64'd67108896:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'hEDFE0DD0;
      64'd67108904:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h38000000;
      64'd67108912:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h28000000;
      64'd67108920, 64'd67109424, 64'd67109632, 64'd67109712:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h10000000;
      64'd67108928:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'hCC000000;
      64'd67108936,
      64'd67108944,
      64'd67108968,
      64'd67109080,
      64'd67109160,
      64'd67109432,
      64'd67109440,
      64'd67109536,
      64'd67109544,
      64'd67109640,
      64'd67109648,
      64'd67109704,
      64'd67109720,
      64'd67109728,
      64'd67110008,
      64'd67110016,
      64'd67110024,
      64'd67110032,
      64'd67110040,
      64'd67110048,
      64'd67110056,
      64'd67110064,
      64'd67110072,
      64'd67110080,
      64'd67110088,
      64'd67110096,
      64'd67110104,
      64'd67110112,
      64'd67110120,
      64'd67110128,
      64'd67110136,
      64'd67110144,
      64'd67110152,
      64'd67110160,
      64'd67110168,
      64'd67110176,
      64'd67110184,
      64'd67110192,
      64'd67110200,
      64'd67110208,
      64'd67110216,
      64'd67110224,
      64'd67110232,
      64'd67110240,
      64'd67110248,
      64'd67110256,
      64'd67110264,
      64'd67110272,
      64'd67110280,
      64'd67110288,
      64'd67110296,
      64'd67110304,
      64'd67110312,
      64'd67110320,
      64'd67110328,
      64'd67110336,
      64'd67110344,
      64'd67110352,
      64'd67110360,
      64'd67110368,
      64'd67110376,
      64'd67110384,
      64'd67110392,
      64'd67110400,
      64'd67110408,
      64'd67110416,
      64'd67110424,
      64'd67110432,
      64'd67110440,
      64'd67110448,
      64'd67110456,
      64'd67110464,
      64'd67110472,
      64'd67110480,
      64'd67110488,
      64'd67110496,
      64'd67110504,
      64'd67110512,
      64'd67110520,
      64'd67110528,
      64'd67110536,
      64'd67110544,
      64'd67110552,
      64'd67110560,
      64'd67110568,
      64'd67110576,
      64'd67110584,
      64'd67110592,
      64'd67110600,
      64'd67110608,
      64'd67110616,
      64'd67110624,
      64'd67110632,
      64'd67110640,
      64'd67110648,
      64'd67110656,
      64'd67110664,
      64'd67110672,
      64'd67110680,
      64'd67110688,
      64'd67110696,
      64'd67110704,
      64'd67110712,
      64'd67110720,
      64'd67110728,
      64'd67110736,
      64'd67110744,
      64'd67110752,
      64'd67110760,
      64'd67110768,
      64'd67110776,
      64'd67110784,
      64'd67110792,
      64'd67110800,
      64'd67110808,
      64'd67110816,
      64'd67110824,
      64'd67110832,
      64'd67110840,
      64'd67110848,
      64'd67110856,
      64'd67110864,
      64'd67110872,
      64'd67110880,
      64'd67110888,
      64'd67110896,
      64'd67110904,
      64'd67110912,
      64'd67110920,
      64'd67110928,
      64'd67110936,
      64'd67110944,
      64'd67110952,
      64'd67110960,
      64'd67110968,
      64'd67110976,
      64'd67110984,
      64'd67110992,
      64'd67111000,
      64'd67111008,
      64'd67111016,
      64'd67111024,
      64'd67111032,
      64'd67111040,
      64'd67111048,
      64'd67111056,
      64'd67111064,
      64'd67111072,
      64'd67111080,
      64'd67111088,
      64'd67111096,
      64'd67111104,
      64'd67111112,
      64'd67111120,
      64'd67111128,
      64'd67111136,
      64'd67111144,
      64'd67111152,
      64'd67111160,
      64'd67111168,
      64'd67111176,
      64'd67111184,
      64'd67111192,
      64'd67111200,
      64'd67111208,
      64'd67111216,
      64'd67111224,
      64'd67111232,
      64'd67111240,
      64'd67111248,
      64'd67111256,
      64'd67111264,
      64'd67111272,
      64'd67111280,
      64'd67111288,
      64'd67111296,
      64'd67111304,
      64'd67111312,
      64'd67111320,
      64'd67111328,
      64'd67111336,
      64'd67111344,
      64'd67111352,
      64'd67111360,
      64'd67111368,
      64'd67111376,
      64'd67111384,
      64'd67111392,
      64'd67111400,
      64'd67111408,
      64'd67111416,
      64'd67111424,
      64'd67111432,
      64'd67111440,
      64'd67111448,
      64'd67111456,
      64'd67111464,
      64'd67111472,
      64'd67111480,
      64'd67111488,
      64'd67111496,
      64'd67111504,
      64'd67111512,
      64'd67111520,
      64'd67111528,
      64'd67111536,
      64'd67111544,
      64'd67111552,
      64'd67111560,
      64'd67111568,
      64'd67111576,
      64'd67111584,
      64'd67111592,
      64'd67111600,
      64'd67111608,
      64'd67111616,
      64'd67111624,
      64'd67111632,
      64'd67111640,
      64'd67111648,
      64'd67111656,
      64'd67111664,
      64'd67111672,
      64'd67111680,
      64'd67111688,
      64'd67111696,
      64'd67111704,
      64'd67111712,
      64'd67111720,
      64'd67111728,
      64'd67111736,
      64'd67111744,
      64'd67111752,
      64'd67111760,
      64'd67111768,
      64'd67111776,
      64'd67111784,
      64'd67111792,
      64'd67111800,
      64'd67111808,
      64'd67111816,
      64'd67111824,
      64'd67111832,
      64'd67111840,
      64'd67111848,
      64'd67111856,
      64'd67111864,
      64'd67111872,
      64'd67111880,
      64'd67111888,
      64'd67111896,
      64'd67111904,
      64'd67111912,
      64'd67111920,
      64'd67111928,
      64'd67111936,
      64'd67111944,
      64'd67111952,
      64'd67111960,
      64'd67111968,
      64'd67111976,
      64'd67111984,
      64'd67111992,
      64'd67112000,
      64'd67112008,
      64'd67112016,
      64'd67112024,
      64'd67112032,
      64'd67112040,
      64'd67112048,
      64'd67112056,
      64'd67112064,
      64'd67112072,
      64'd67112080,
      64'd67112088,
      64'd67112096,
      64'd67112104,
      64'd67112112,
      64'd67112120,
      64'd67112128,
      64'd67112136,
      64'd67112144,
      64'd67112152,
      64'd67112160,
      64'd67112168,
      64'd67112176,
      64'd67112184,
      64'd67112192,
      64'd67112200,
      64'd67112208,
      64'd67112216,
      64'd67112224,
      64'd67112232,
      64'd67112240,
      64'd67112248,
      64'd67112256,
      64'd67112264,
      64'd67112272,
      64'd67112280,
      64'd67112288,
      64'd67112296,
      64'd67112304,
      64'd67112312,
      64'd67112320,
      64'd67112328,
      64'd67112336,
      64'd67112344,
      64'd67112352,
      64'd67112360,
      64'd67112368,
      64'd67112376,
      64'd67112384,
      64'd67112392,
      64'd67112400,
      64'd67112408,
      64'd67112416,
      64'd67112424,
      64'd67112432,
      64'd67112440,
      64'd67112448,
      64'd67112456,
      64'd67112464,
      64'd67112472,
      64'd67112480,
      64'd67112488,
      64'd67112496,
      64'd67112504,
      64'd67112512,
      64'd67112520,
      64'd67112528,
      64'd67112536,
      64'd67112544,
      64'd67112552,
      64'd67112560,
      64'd67112568,
      64'd67112576,
      64'd67112584,
      64'd67112592,
      64'd67112600,
      64'd67112608,
      64'd67112616,
      64'd67112624,
      64'd67112632,
      64'd67112640,
      64'd67112648,
      64'd67112656,
      64'd67112664,
      64'd67112672,
      64'd67112680,
      64'd67112688,
      64'd67112696,
      64'd67112704,
      64'd67112712,
      64'd67112720,
      64'd67112728,
      64'd67112736,
      64'd67112744,
      64'd67112752,
      64'd67112760,
      64'd67112768,
      64'd67112776,
      64'd67112784,
      64'd67112792,
      64'd67112800,
      64'd67112808,
      64'd67112816,
      64'd67112824,
      64'd67112832,
      64'd67112840,
      64'd67112848,
      64'd67112856,
      64'd67112864,
      64'd67112872,
      64'd67112880,
      64'd67112888,
      64'd67112896,
      64'd67112904,
      64'd67112912,
      64'd67112920,
      64'd67112928,
      64'd67112936,
      64'd67112944,
      64'd67112952:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 = 32'h0;
      64'd67108952, 64'd67109120, 64'd67109552, 64'd67109664:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h01000000;
      64'd67108960,
      64'd67108976,
      64'd67108992,
      64'd67109072,
      64'd67109088,
      64'd67109104,
      64'd67109184,
      64'd67109296,
      64'd67109312,
      64'd67109352,
      64'd67109400,
      64'd67109600,
      64'd67109616,
      64'd67109736,
      64'd67109752,
      64'd67109768:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h03000000;
      64'd67108984, 64'd67109096, 64'd67109328:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h0F000000;
      64'd67109000, 64'd67109192:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h1B000000;
      64'd67109008:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h732C7261;
      64'd67109016:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h7261622D;
      64'd67109024, 64'd67109200:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00000076;
      64'd67109032:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h12000000;
      64'd67109040, 64'd67109504:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h62626375;
      64'd67109048, 64'd67109512:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h656B6970;
      64'd67109056:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00000065;
      64'd67109064:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h73757063;
      64'd67109112:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h2C000000;
      64'd67109128, 64'd67109568, 64'd67109680:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00000030;
      64'd67109136, 64'd67109152, 64'd67109256, 64'd67109464, 64'd67109480:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h04000000;
      64'd67109144:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00757063;
      64'd67109168:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h05000000;
      64'd67109176:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h79616B6F;
      64'd67109208:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h0A000000;
      64'd67109216:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h32337672;
      64'd67109224:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00000073;
      64'd67109232, 64'd67109784:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h0B000000;
      64'd67109240, 64'd67109336, 64'd67109584:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h63736972;
      64'd67109248:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00003233;
      64'd67109264:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h80969800;
      64'd67109272:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h65746E69;
      64'd67109280:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6F632D74;
      64'd67109288:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h72656C6C;
      64'd67109304:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h79000000;
      64'd67109320:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h8A000000;
      64'd67109344:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6E692D75;
      64'd67109360:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h9F000000;
      64'd67109368,
      64'd67109376,
      64'd67109448,
      64'd67109472,
      64'd67109488,
      64'd67109656,
      64'd67109792:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h02000000;
      64'd67109384:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6F6D656D;
      64'd67109392:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h30303030;
      64'd67109408:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h3F000000;
      64'd67109416:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00007972;
      64'd67109456:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00636F73;
      64'd67109496:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h21000000;
      64'd67109520:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6F732D65;
      64'd67109528:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h656C706D;
      64'd67109560:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h30324074;
      64'd67109576:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h0D000000;
      64'd67109592:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h30746E69;
      64'd67109608, 64'd67109776:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'hAE000000;
      64'd67109624:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h07000000;
      64'd67109672:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h30306340;
      64'd67109688:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h09000000;
      64'd67109696:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h3631736E;
      64'd67109744:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'hC2000000;
      64'd67109760:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h69000000;
      64'd67109800:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h64646123;
      64'd67109808:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6C65632D;
      64'd67109816:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h657A6973;
      64'd67109824:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6300736C;
      64'd67109832:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6C626974;
      64'd67109840:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h006C6564;
      64'd67109848:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h65736162;
      64'd67109856:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6E657571;
      64'd67109864:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h63697665;
      64'd67109872:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h72006570;
      64'd67109880:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h75746174;
      64'd67109888:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h2C766373;
      64'd67109896:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h2D756D6D;
      64'd67109904:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6F6C6300;
      64'd67109912:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h75716572;
      64'd67109920:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6E692300;
      64'd67109928, 64'd67109944:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h2D747075;
      64'd67109936:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6E690073;
      64'd67109952:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h6C6C6F72;
      64'd67109960:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h646E6168;
      64'd67109968:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h65676E61;
      64'd67109976:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h72726574;
      64'd67109984:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h7478652D;
      64'd67109992:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h65720064;
      64'd67110000:
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
	      32'h00746669;
      default: CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 =
		   32'hAAAAAAAA;
    endcase
  end
  always@(byte_addr__h705 or
	  CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1 or
	  CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2)
  begin
    case (byte_addr__h705)
      64'd67108864: data64__h987 = 64'h0202859300000297;
      64'd67108872: data64__h987 = 64'h0182A283F1402573;
      default: data64__h987 =
		   { CASE_byte_addr05_67108880_0x0_67108888_0x0_671_ETC__q1,
		     CASE_byte_addr05_67108880_0x28067_67108888_0xC_ETC__q2 };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_module_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_module_ready$EN)
	  rg_module_ready <= `BSV_ASSIGNMENT_DELAY rg_module_ready$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_module_ready = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	begin
	  v__h808 = $stime;
	  #0;
	end
    v__h802 = v__h808 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$display("%0d: ERROR: Boot_ROM.rl_process_rd_req: unrecognized addr",
		 v__h802);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[96:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_31_TO_29_ETC___d18)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	begin
	  v__h12045 = $stime;
	  #0;
	end
    v__h12039 = v__h12045 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$display("%0d: ERROR: Boot_ROM.rl_process_wr_req: unrecognized addr",
		 v__h12039);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[96:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__208_BITS_31__ETC___d1218)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
	begin
	  v__h12338 = $stime;
	  #0;
	end
    v__h12332 = v__h12338 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
	$display("%0d: WARNING: Boot_ROM.set_addr_map: addr_base 0x%0h is not 4-Byte-aligned",
		 v__h12332,
		 set_addr_map_addr_base);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
	begin
	  v__h12448 = $stime;
	  #0;
	end
    v__h12442 = v__h12448 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
	$display("%0d: WARNING: Boot_ROM.set_addr_map: addr_lim 0x%0h is not 4-Byte-aligned",
		 v__h12442,
		 set_addr_map_addr_lim);
  end
  // synopsys translate_on
endmodule  // mkFlash

