## Makefile for loading files to flash
CCPATH 		?=
TARGET=$(CCPATH)riscv64-unknown-elf

XLEN?=32

ifeq ($(XLEN),64)
	ARCH 		= -march=rv64imac
	ABI 		= -mabi=lp64
	CLANG_ARCH  = riscv64
else
	ARCH 		= -march=rv32im
	ABI 		= -mabi=ilp32
	CLANG_ARCH  = riscv32
endif

# Decide which compiler to use
ifeq ($(USE_CLANG),yes)
	CC		= clang --target=$(CLANG_ARCH)
	# CPP		= clang++ --target=$(CLANG_ARCH)
	# TODO: clang has problems with system includes, use g++ for now
	CPP		= $(TARGET)-g++
	# LLVM doesn't support linking RISC-V files yet,
	# so we have to use GCC linker to do so
	LD		= $(TARGET)-gcc
	OBJCOPY	= llvm-objcopy
	# LLVM doesn't uderstand debug symbols created by GCC linker
	# using GCC objdump for the time being (instead of llvm-objdump)
	OBJDUMP	= $(TARGET)-objdump
	AR		= llvm-ar
	RANLIB	= llvm-ranlib
	WERROR = 
else
	CC		= $(TARGET)-gcc
	CPP		= $(TARGET)-g++
	LD		= $(CC)
	OBJCOPY	= $(TARGET)-objcopy
	OBJDUMP	= $(TARGET)-objdump
	AR		= $(TARGET)-ar
	RANLIB	= $(TARGET)-ranlib
	WERROR = -Werror
endif

COMPILER_FLAGS = -mcmodel=medany

# Default program name
PROG ?= flash.elf

# Default target
default: bootmem.bin

# Stripped binary
$(PROG).bin: $(PROG)
	$(OBJCOPY) -O binary $< $@

# Non-stripped binary (intermediate step)
bootmem: bootmem.S linker.ld $(PROG).bin
	@rm -rf bbl.bin
	@ln -s $(PROG).bin bbl.bin
	$(CC) $(ARCH) $(ABI) -Tlinker.ld $< -nostdlib -static -Wl,--no-gc-sections -o $@

# Stripped Binary file for booting from flash
bootmem.bin: bootmem
	$(OBJCOPY) -O binary $< $@

clean:
	@rm -f bootmem bootmem.bin $(PROG).bin
	
.PHONY: default
