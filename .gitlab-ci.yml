---
#-----------------------------------------------------------------------------#
#
# General startup commands
#
#-----------------------------------------------------------------------------#
before_script:
  - echo $PATH
  - export PATH=/opt/riscv/bin:$PATH
  - export RISCV_C_INCLUDE_PATH=/opt/riscv/riscv64-unknown-elf/include
  - export RISCV=/opt/riscv
  - export PATH=/opt/Xilinx/Vivado/2019.1/bin:/opt/Xilinx/Vivado_Lab/2019.1/bin:$PATH
  - echo $PATH
  - ./init_submodules.sh
  - source /opt/Xilinx/Vivado_Lab/2019.1/settings64.sh
  - export XILINXD_LICENSE_FILE=/opt/Xilinx/Xilinx.lic

variables:
  # defaults. Overridden when this pipeline is called by tool-suite.
  testgen_id: 273
  testgen_ref: master
  tool_suite_url: git@gitlab-ext.galois.com:ssith/tool-suite.git
  tool_suite_rev: master

.log_failure:
  artifacts:
    expire_in: 1 day
    when: on_failure
    paths:
      - test_processor.log

.log_always:
  extends: .log_failure
  artifacts:
    when: always

.verilator:
  tags: ["verilator"]

.no_sched:
  except: ["schedules"]

#-----------------------------------------------------------------------------#
#
# Verilator simulation tests
#
#-----------------------------------------------------------------------------#
CHSL_P1_sim:
  script:
    - ./pytest_processor.py chisel_p1 --simulator
  extends: [.log_failure, .no_sched, .verilator]

BSV_P1_sim:
  script:
    - ./pytest_processor.py bluespec_p1 --simulator
  extends: [.log_failure, .no_sched, .verilator]

CHSL_P2_sim:
  script:
    - ./pytest_processor.py chisel_p2 --simulator
  extends: [.log_failure, .no_sched, .verilator]

BSV_P2_sim:
  script:
    - ./pytest_processor.py bluespec_p2 --simulator
  extends: [.log_failure, .no_sched, .verilator]

CHSL_P3_sim:
  script:
    - ./pytest_processor.py chisel_p3 --simulator
  extends: [.log_failure, .no_sched, .verilator]

BSV_P3_sim:
  script:
    - ./pytest_processor.py bluespec_p3 --simulator
  extends: [.log_failure, .no_sched, .verilator]

#-----------------------------------------------------------------------------#
#
# FPGA tests
#
#-----------------------------------------------------------------------------#
P1_benchmarks:
  script:
    - make -C benchmarks/coremark/ PORT_DIR=riscv-bare-metal GFE_TARGET=P1 ITERATIONS=2000 clean
    - make -C benchmarks/coremark/ PORT_DIR=riscv-bare-metal GFE_TARGET=P1 ITERATIONS=2000 link
    - ./pytest_processor.py bluespec_p1  --elf benchmarks/coremark/coremark.bin --timeout 60 --expected "Correct operation validated" --absent "Errors detected"
    - ./pytest_processor.py chisel_p1  --elf benchmarks/coremark/coremark.bin --timeout 60 --expected "Correct operation validated" --absent "Errors detected"
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

P2_benchmarks:
  script:
    - make -C benchmarks/coremark/ PORT_DIR=riscv-bare-metal GFE_TARGET=P2 ITERATIONS=3000 clean
    - make -C benchmarks/coremark/ PORT_DIR=riscv-bare-metal GFE_TARGET=P2 ITERATIONS=3000 link
    - ./pytest_processor.py bluespec_p2  --elf benchmarks/coremark/coremark.bin --timeout 60 --expected "Correct operation validated" --absent "Errors detected"
    - ./pytest_processor.py chisel_p2  --elf benchmarks/coremark/coremark.bin --timeout 60 --expected "Correct operation validated" --absent "Errors detected"
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

P3_benchmarks:
  script:
    - make -C benchmarks/coremark/ PORT_DIR=riscv-bare-metal GFE_TARGET=P3 ITERATIONS=1000 clean
    - make -C benchmarks/coremark/ PORT_DIR=riscv-bare-metal GFE_TARGET=P3 ITERATIONS=1000 link
    # No BSV P3 yet
    # - ./pytest_processor.py bluespec_p3  --elf benchmarks/coremark/coremark.bin --timeout 60 --expected "Correct operation validated" --absent "Errors detected"
    - ./pytest_processor.py chisel_p3  --elf benchmarks/coremark/coremark.bin --timeout 60 --expected "Correct operation validated" --absent "Errors detected"
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

#-----------------------#
#                       #
#     Bluespec P1
#                       #
#-----------------------#
BSV_P1_isa:
  script:
    - ./pytest_processor.py bluespec_p1 --isa
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

BSV_P1_freertos_gcc:
  script:
    - ./pytest_processor.py bluespec_p1 --freertos
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

BSV_P1_freertos_io_gcc:
  script:
    - ./pytest_processor.py bluespec_p1 --freertos --io
  tags: ["fpga-io"]
  extends: [.log_always, .no_sched]

BSV_P1_freertos_network_gcc:
  script:
    - ./pytest_processor.py bluespec_p1 --freertos --network
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

#-----------------------#
#                       #
#     Chisel P1
#                       #
#-----------------------#
CHSL_P1_isa:
  script:
    - ./pytest_processor.py chisel_p1 --isa
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

CHSL_P1_freertos_gcc:
  script:
    - ./pytest_processor.py chisel_p1 --freertos
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

CHSL_P1_freertos_io_gcc:
  script:
    - ./pytest_processor.py chisel_p1 --freertos --io
  tags: ["fpga-io"]
  extends: [.log_always, .no_sched]

CHSL_P1_freertos_network_gcc:
  script:
    - ./pytest_processor.py chisel_p1 --freertos --network
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

#-----------------------#
#                       #
#     Chisel P2
#                       #
#-----------------------#
CHSL_P2_isa:
  script:
    - ./pytest_processor.py chisel_p2 --isa
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

CHSL_P2_freertos_gcc:
  script:
    - ./pytest_processor.py chisel_p2 --freertos
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

CHSL_P2_freertos_network_gcc:
  script:
    - ./pytest_processor.py chisel_p2 --freertos --network
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

CHSL_P2_busybox:
  script:
    - ./pytest_processor.py chisel_p2 --busybox --network --no-pcie
  tags: ["fpga"]
  extends: [.log_always, .no_sched]
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - bootmem/

# CHSL_P2_debian:
#   script:
#     - ./pytest_processor.py chisel_p2 --debian
#   tags: ["fpga-pcie"]
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}
#     paths:
#       - debian/riscv64-chroot.tar
#       - bootmem/
#   only:
#     variables:
#       - $JOB_TYPE == "linux"

#-----------------------#
#                       #
#     Bluespec P2
#                       #
#-----------------------#
BSV_P2_isa:
  script:
    - ./pytest_processor.py bluespec_p2 --isa
  tags: ["fpga"]
  extends: .log_always

BSV_P2_freertos_gcc:
  script:
    - ./pytest_processor.py bluespec_p2 --freertos
  tags: ["fpga"]
  extends: .log_always

BSV_P2_freertos_network_gcc:
  script:
    - ./pytest_processor.py bluespec_p2 --freertos --network
  tags: ["fpga"]
  extends: [.log_always, .no_sched]

BSV_P2_busybox:
  script:
    - ./pytest_processor.py bluespec_p2 --busybox --network --no-pcie
  tags: ["fpga"]
  extends: [.log_always, .no_sched]
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - bootmem/

# BSV_P2_debian:
#   script:
#     - ./pytest_processor.py bluespec_p2 --debian
#   tags: ["fpga-pcie"]
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}
#     paths:
#       - debian/riscv64-chroot.tar
#       - bootmem/
#   only:
#     variables:
#       - $JOB_TYPE == "linux"

#-----------------------#
#                       #
#     Chisel P3
#                       #
#-----------------------#
CHSL_P3_isa:
  script:
    - ./pytest_processor.py chisel_p3 --isa
  tags: ["fpga"]
  extends: .no_sched

# CHSL_P3:
#   script:
#     - ./pytest_processor.py chisel_p3 --isa
#   tags: ["fpga-pcie"]
#   cache:
#     key: ${CI_COMMIT_REF_SLUG}
#     paths:
#       - debian/riscv64-chroot.tar
#       - bootmem/
#   only:
#       variables:
#       - $JOB_TYPE == "linux"

#bluespec_p3: # currently fails
#  script:
#    - ./pytest_processor.py bluespec_p3 --isa
#  tags: ["fpga"]
#  only:
#      variables:
#      - $JOB_TYPE == "bluespec_p3"

#-----------------------------------------------------------------------------#
#
# Bitstream generation
#
#-----------------------------------------------------------------------------#
CHSL_P1_bitstream_gen:
  script:
    - ./setup_soc_project.sh chisel_p1
    - ./build.sh chisel_p1
    - ./get_ppa.py vivado/soc_chisel_p1/soc_chisel_p1.runs/impl_1/
  tags: ["bitstream"]
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: always
    expire_in: 1 week
    paths:
      - bitstreams/soc_chisel_p1.*
      - vivado/soc_chisel_p1/soc_chisel_p1.runs/impl_1/design_1_timing_summary_routed.rpt
      - vivado/soc_chisel_p1/soc_chisel_p1.runs/impl_1/design_1_utilization_placed.rpt
      - vivado/soc_chisel_p1/soc_chisel_p1.runs/impl_1/design_1_power_routed.rpt
  only:
    variables:
      - $JOB_TYPE == "bitstream_gen_chisel_p1"

CHSL_P2_bitstream_gen:
  script:
    - ./setup_soc_project.sh chisel_p2
    - ./build.sh chisel_p2
    - ./get_ppa.py vivado/soc_chisel_p2/soc_chisel_p2.runs/impl_1/
  tags: ["bitstream"]
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: always
    expire_in: 1 week
    paths:
      - bitstreams/soc_chisel_p2.*
      - vivado/soc_chisel_p2/soc_chisel_p2.runs/impl_1/design_1_timing_summary_routed.rpt
      - vivado/soc_chisel_p2/soc_chisel_p2.runs/impl_1/design_1_utilization_placed.rpt
      - vivado/soc_chisel_p2/soc_chisel_p2.runs/impl_1/design_1_power_routed.rpt

  only:
    variables:
      - $JOB_TYPE == "bitstream_gen_chisel_p2"

CHSL_P3_bitstream_gen:
  script:
    - ./setup_soc_project.sh chisel_p3
    - ./build.sh chisel_p3
    - ./get_ppa.py vivado/soc_chisel_p3/soc_chisel_p3.runs/impl_1/
  tags: ["bitstream"]
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: always
    expire_in: 1 week
    paths:
      - bitstreams/soc_chisel_p3.*
      - vivado/soc_chisel_p3/soc_chisel_p3.runs/impl_1/design_1_timing_summary_routed.rpt
      - vivado/soc_chisel_p3/soc_chisel_p3.runs/impl_1/design_1_utilization_placed.rpt
      - vivado/soc_chisel_p3/soc_chisel_p3.runs/impl_1/design_1_power_routed.rpt
  only:
    variables:
      - $JOB_TYPE == "bitstream_gen_chisel_p3"

BSV_P1_bitstream_gen:
  script:
    - ./setup_soc_project.sh bluespec_p1
    - ./build.sh bluespec_p1
    - ./get_ppa.py vivado/soc_bluespec_p1/soc_bluespec_p1.runs/impl_1/
  tags: ["bitstream"]
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: always
    expire_in: 1 week
    paths:
      - bitstreams/soc_bluespec_p1.*
      - vivado/soc_bluespec_p1/soc_bluespec_p1.runs/impl_1/design_1_timing_summary_routed.rpt
      - vivado/soc_bluespec_p1/soc_bluespec_p1.runs/impl_1/design_1_utilization_placed.rpt
      - vivado/soc_bluespec_p1/soc_bluespec_p1.runs/impl_1/design_1_power_routed.rpt
  only:
    variables:
      - $JOB_TYPE == "bitstream_gen_bluespec_p1"

BSV_P2_bitstream_gen:
  script:
    - ./setup_soc_project.sh bluespec_p2
    - ./build.sh bluespec_p2
    - ./get_ppa.py vivado/soc_bluespec_p2/soc_bluespec_p2.runs/impl_1/
  tags: ["bitstream"]
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: always
    expire_in: 1 week
    paths:
      - bitstreams/soc_bluespec_p2.*
      - vivado/soc_bluespec_p2/soc_bluespec_p2.runs/impl_1/design_1_timing_summary_routed.rpt
      - vivado/soc_bluespec_p2/soc_bluespec_p2.runs/impl_1/design_1_utilization_placed.rpt
      - vivado/soc_bluespec_p2/soc_bluespec_p2.runs/impl_1/design_1_power_routed.rpt
  only:
    variables:
      - $JOB_TYPE == "bitstream_gen_bluespec_p2"

BSV_P3_bitstream_gen:
  script:
    - ./setup_soc_project.sh bluespec_p3
    - ./build.sh bluespec_p3
    - ./get_ppa.py vivado/soc_bluespec_p3/soc_bluespec_p3.runs/impl_1/
  tags: ["bitstream"]
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: always
    expire_in: 1 week
    paths:
      - bitstreams/soc_bluespec_p3.*
      - vivado/soc_bluespec_p3/soc_bluespec_p3.runs/impl_1/design_1_timing_summary_routed.rpt
      - vivado/soc_bluespec_p3/soc_bluespec_p3.runs/impl_1/design_1_utilization_placed.rpt
      - vivado/soc_bluespec_p3/soc_bluespec_p3.runs/impl_1/design_1_power_routed.rpt
  only:
    variables:
      - $JOB_TYPE == "bitstream_gen_bluespec_p3"

#-----------------------------------------------------------------------------#
#
# Testgen
#
#-----------------------------------------------------------------------------#
testgen_msg:
  stage: .pre
  tags: ["fpga"]
  only:
    variables:
      - $PIPELINE_TYPE == "full"
  script:
    - "echo 'Running full pipeline: Will trigger testgen if all tests pass'"

testgen:
  stage: .post
  tags: ["fpga"]
  only:
    variables:
      - $PIPELINE_TYPE == "full"
  script:
    - >-
      curl -XPOST
        -F "token=$TESTGEN_TRIGGER"
        -F "ref=$testgen_ref"
        -F "tool_suite_url=$tool_suite_url"
        -F "tool_suite_rev=$tool_suite_rev"
        "$CI_API_V4_URL/projects/$testgen_id/trigger/pipeline"
