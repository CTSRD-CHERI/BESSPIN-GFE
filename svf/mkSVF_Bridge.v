//
// Generated by Bluespec Compiler, version 2017.07.A (build e1df8052c, 2017-07-21)
//
//
//
//
// Ports:
// Name                         I/O  size props
// axi_in_tready                  O     1
// m_axis_cc_tvalid               O     1 reg
// m_axis_cc_tdata                O    64
// m_axis_cc_tkeep                O     2
// m_axis_cc_tlast                O     1
// m_axis_cc_tuser                O    33 const
// m_axis_rq_tvalid               O     1 reg
// m_axis_rq_tdata                O    64
// m_axis_rq_tkeep                O     2
// m_axis_rq_tlast                O     1
// m_axis_rq_tuser                O    62
// s_axis_cq_tready               O     1
// s_axis_rc_tready               O     1
// pcie4_cfg_mgmt_addr            O    10 const
// pcie4_cfg_mgmt_byte_enable     O     4 const
// pcie4_cfg_mgmt_debug_access    O     1 const
// pcie4_cfg_mgmt_function_number  O     8 const
// pcie4_cfg_mgmt_read            O     1 const
// pcie4_cfg_mgmt_write_data      O    32 const
// pcie4_cfg_mgmt_write           O     1 const
// pcie4_cfg_pm_aspm_l1_entry_reject  O     1 const
// pcie4_cfg_pm_aspm_tx_10s_entry_disable  O     1 const
// pcie4_cfg_external_msix_msix_address  O    64 const
// pcie4_cfg_external_msix_msix_data  O    32 const
// pcie4_cfg_external_msix_msix_intrpt  O     1 const
// pcie4_cfg_external_msix_msix_vec_pending  O     2 const
// pcie4_cfg_external_msix_msi_function_number  O     8 const
// pcie4_cfg_interrupt_intrpt     O     4 const
// pcie4_cfg_interrupt_pending    O     4 const
// pcie4_cfg_control_config_space_enable  O     1 const
// pcie4_cfg_control_ds_bus_number  O     8 const
// pcie4_cfg_control_ds_device_number  O     5 const
// pcie4_cfg_control_ds_port_number  O     8 const
// pcie4_cfg_control_dsn          O    64 const
// pcie4_cfg_control_err_cor_in   O     1 const
// pcie4_cfg_control_err_uncor_in  O     1 const
// pcie4_cfg_control_flr_done     O     4 const
// pcie4_cfg_control_hot_reset_in  O     1 const
// pcie4_cfg_control_link_training_enable  O     1 const
// pcie4_cfg_control_power_state_change_ack  O     1 const
// pcie4_cfg_control_req_pm_transition_l23_ready  O     1 const
// pcie4_cfg_control_vf_flr_done  O     1 const
// pcie4_cfg_control_vf_flr_func_num  O     8 const
// pcie4_cfg_fc_sel               O     3 const
// pcie4_cfg_mesg_tx_transmit     O     1 const
// pcie4_cfg_mesg_tx_transmit_data  O    32 const
// pcie4_cfg_mesg_tx_transmit_type  O     3 const
// pcie4_cfg_status_pcie_cq_np_req  O     2 const
// CLK_user_clk                   I     1 clock
// RST_N_user_reset               I     1 reset
// CLK_user_clk_half              I     1 clock
// CLK_aclk                       I     1 clock
// RST_N_aresetn                  I     1 reset
// axi_in_tvalid                  I     1
// axi_in_tdata                   I   608 reg
// axi_in_tstrb                   I    76 reg
// axi_in_tkeep                   I    76 reg
// axi_in_tlast                   I     1 reg
// m_axis_cc_tready               I     1
// m_axis_rq_tready               I     1
// s_axis_cq_tvalid               I     1
// s_axis_cq_tdata                I    64
// s_axis_cq_tkeep                I     2
// s_axis_cq_tlast                I     1
// s_axis_cq_tuser                I    88
// s_axis_rc_tvalid               I     1
// s_axis_rc_tdata                I    64
// s_axis_rc_tkeep                I     2
// s_axis_rc_tlast                I     1
// s_axis_rc_tuser                I    75
// pcie4_cfg_mgmt_read_data       I    32 unused
// pcie4_cfg_mgmt_read_write_done  I     1 unused
// pcie4_cfg_external_msix_msix_msix_enable  I     4
// pcie4_cfg_external_msix_msix_msix_mask  I     4
// pcie4_cfg_external_msix_msix_vec_pending_status  I     1 unused
// pcie4_cfg_external_msix_msix_vf_enable  I   252 unused
// pcie4_cfg_external_msix_msix_vf_mask  I   252 unused
// pcie4_cfg_external_msix_msi_fail  I     1 unused
// pcie4_cfg_external_msix_msi_sent  I     1 unused
// pcie4_cfg_interrupt_sent       I     1 unused
// pcie4_cfg_control_bus_number   I     8 unused
// pcie4_cfg_control_flr_in_process  I     1 unused
// pcie4_cfg_control_hot_reset_out  I     1 unused
// pcie4_cfg_control_power_state_change_interrupt  I     1 unused
// pcie4_cfg_control_vf_flr_in_process  I   252 unused
// pcie4_cfg_fc_cpld              I    12 unused
// pcie4_cfg_fc_cplh              I     8 unused
// pcie4_cfg_fc_npd               I    12 unused
// pcie4_cfg_fc_nph               I     8 unused
// pcie4_cfg_fc_pd                I    12 unused
// pcie4_cfg_fc_ph                I     8 unused
// pcie4_cfg_mesg_tx_transmit_done  I     1 unused
// pcie4_cfg_mesg_rcvd_received   I     1 unused
// pcie4_cfg_mesg_rcvd_received_data  I     8 unused
// pcie4_cfg_mesg_rcvd_received_type  I     5 unused
// pcie4_cfg_status_pcie_cq_np_req_count  I     6 unused
// pcie4_cfg_status_current_speed  I     2 unused
// pcie4_cfg_status_err_cor_out   I     1 unused
// pcie4_cfg_status_err_fatal_out  I     1 unused
// pcie4_cfg_status_err_nonfatal_out  I     1 unused
// pcie4_cfg_status_funstion_power_state  I    12 unused
// pcie4_cfg_status_function_status  I    16
// pcie4_cfg_status_link_power_state  I     2 unused
// pcie4_cfg_status_local_error_out  I     5 unused
// pcie4_cfg_status_local_error_valid  I     1 unused
// pcie4_cfg_status_ltssm_state   I     6 unused
// pcie4_cfg_status_max_payload   I     2
// pcie4_cfg_status_max_read_req  I     3
// pcie4_cfg_status_negotiated_width  I     3 unused
// pcie4_cfg_status_obff_enable   I     2 unused
// pcie4_cfg_status_phy_link_down  I     1 unused
// pcie4_cfg_status_phy_link_status  I     2 unused
// pcie4_cfg_status_pl_status_change  I     1 unused
// pcie4_cfg_status_rcb_status    I     4
// pcie4_cfg_status_rq_seq_num0   I     6 unused
// pcie4_cfg_status_rq_seq_num1   I     6 unused
// pcie4_cfg_status_rq_seq_num_vld0  I     1 unused
// pcie4_cfg_status_rq_seq_num_vld1  I     1 unused
// pcie4_cfg_status_rq_tag0       I     8 unused
// pcie4_cfg_status_rq_tag1       I     8 unused
// pcie4_cfg_status_rq_tag_av     I     4 unused
// pcie4_cfg_status_rq_tag_vld0   I     1 unused
// pcie4_cfg_status_rq_tag_vld1   I     1 unused
// pcie4_cfg_status_rx_pm_state   I     2 unused
// pcie4_cfg_status_tfc_npd_av    I     4 unused
// pcie4_cfg_status_tfc_nph_av    I     4 unused
// pcie4_cfg_status_tph_requester_enable  I     4 unused
// pcie4_cfg_status_tph_st_mode   I    12 unused
// pcie4_cfg_status_tx_pm_state   I     2 unused
// pcie4_cfg_status_vf_power_state  I   756 unused
// pcie4_cfg_status_vf_status     I   504 unused
// pcie4_cfg_status_vf_tph_requester_enable  I   252 unused
// pcie4_cfg_status_vf_tph_st_mode  I   756 unused
// pcie4_user_link_up             I     1
// pcie4_phy_rdy_out              I     1 unused
// tvswitch                       I     2 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSVF_Bridge(CLK_user_clk,
		    RST_N_user_reset,
		    CLK_user_clk_half,
		    CLK_aclk,
		    RST_N_aresetn,

		    axi_in_tvalid,
		    axi_in_tdata,
		    axi_in_tstrb,
		    axi_in_tkeep,
		    axi_in_tlast,

		    axi_in_tready,

		    m_axis_cc_tvalid,

		    m_axis_cc_tdata,

		    m_axis_cc_tkeep,

		    m_axis_cc_tlast,

		    m_axis_cc_tuser,

		    m_axis_cc_tready,

		    m_axis_rq_tvalid,

		    m_axis_rq_tdata,

		    m_axis_rq_tkeep,

		    m_axis_rq_tlast,

		    m_axis_rq_tuser,

		    m_axis_rq_tready,

		    s_axis_cq_tvalid,
		    s_axis_cq_tdata,
		    s_axis_cq_tkeep,
		    s_axis_cq_tlast,
		    s_axis_cq_tuser,

		    s_axis_cq_tready,

		    s_axis_rc_tvalid,
		    s_axis_rc_tdata,
		    s_axis_rc_tkeep,
		    s_axis_rc_tlast,
		    s_axis_rc_tuser,

		    s_axis_rc_tready,

		    pcie4_cfg_mgmt_addr,

		    pcie4_cfg_mgmt_byte_enable,

		    pcie4_cfg_mgmt_debug_access,

		    pcie4_cfg_mgmt_function_number,

		    pcie4_cfg_mgmt_read_data,

		    pcie4_cfg_mgmt_read,

		    pcie4_cfg_mgmt_read_write_done,

		    pcie4_cfg_mgmt_write_data,

		    pcie4_cfg_mgmt_write,

		    pcie4_cfg_pm_aspm_l1_entry_reject,

		    pcie4_cfg_pm_aspm_tx_10s_entry_disable,

		    pcie4_cfg_external_msix_msix_address,

		    pcie4_cfg_external_msix_msix_data,

		    pcie4_cfg_external_msix_msix_msix_enable,

		    pcie4_cfg_external_msix_msix_intrpt,

		    pcie4_cfg_external_msix_msix_msix_mask,

		    pcie4_cfg_external_msix_msix_vec_pending,

		    pcie4_cfg_external_msix_msix_vec_pending_status,

		    pcie4_cfg_external_msix_msix_vf_enable,

		    pcie4_cfg_external_msix_msix_vf_mask,

		    pcie4_cfg_external_msix_msi_fail,

		    pcie4_cfg_external_msix_msi_function_number,

		    pcie4_cfg_external_msix_msi_sent,

		    pcie4_cfg_interrupt_intrpt,

		    pcie4_cfg_interrupt_pending,

		    pcie4_cfg_interrupt_sent,

		    pcie4_cfg_control_bus_number,

		    pcie4_cfg_control_config_space_enable,

		    pcie4_cfg_control_ds_bus_number,

		    pcie4_cfg_control_ds_device_number,

		    pcie4_cfg_control_ds_port_number,

		    pcie4_cfg_control_dsn,

		    pcie4_cfg_control_err_cor_in,

		    pcie4_cfg_control_err_uncor_in,

		    pcie4_cfg_control_flr_done,

		    pcie4_cfg_control_flr_in_process,

		    pcie4_cfg_control_hot_reset_in,

		    pcie4_cfg_control_hot_reset_out,

		    pcie4_cfg_control_link_training_enable,

		    pcie4_cfg_control_power_state_change_ack,

		    pcie4_cfg_control_power_state_change_interrupt,

		    pcie4_cfg_control_req_pm_transition_l23_ready,

		    pcie4_cfg_control_vf_flr_done,

		    pcie4_cfg_control_vf_flr_func_num,

		    pcie4_cfg_control_vf_flr_in_process,

		    pcie4_cfg_fc_cpld,

		    pcie4_cfg_fc_cplh,

		    pcie4_cfg_fc_npd,

		    pcie4_cfg_fc_nph,

		    pcie4_cfg_fc_pd,

		    pcie4_cfg_fc_ph,

		    pcie4_cfg_fc_sel,

		    pcie4_cfg_mesg_tx_transmit,

		    pcie4_cfg_mesg_tx_transmit_data,

		    pcie4_cfg_mesg_tx_transmit_done,

		    pcie4_cfg_mesg_tx_transmit_type,

		    pcie4_cfg_mesg_rcvd_received,

		    pcie4_cfg_mesg_rcvd_received_data,

		    pcie4_cfg_mesg_rcvd_received_type,

		    pcie4_cfg_status_pcie_cq_np_req,

		    pcie4_cfg_status_pcie_cq_np_req_count,

		    pcie4_cfg_status_current_speed,

		    pcie4_cfg_status_err_cor_out,

		    pcie4_cfg_status_err_fatal_out,

		    pcie4_cfg_status_err_nonfatal_out,

		    pcie4_cfg_status_funstion_power_state,

		    pcie4_cfg_status_function_status,

		    pcie4_cfg_status_link_power_state,

		    pcie4_cfg_status_local_error_out,

		    pcie4_cfg_status_local_error_valid,

		    pcie4_cfg_status_ltssm_state,

		    pcie4_cfg_status_max_payload,

		    pcie4_cfg_status_max_read_req,

		    pcie4_cfg_status_negotiated_width,

		    pcie4_cfg_status_obff_enable,

		    pcie4_cfg_status_phy_link_down,

		    pcie4_cfg_status_phy_link_status,

		    pcie4_cfg_status_pl_status_change,

		    pcie4_cfg_status_rcb_status,

		    pcie4_cfg_status_rq_seq_num0,

		    pcie4_cfg_status_rq_seq_num1,

		    pcie4_cfg_status_rq_seq_num_vld0,

		    pcie4_cfg_status_rq_seq_num_vld1,

		    pcie4_cfg_status_rq_tag0,

		    pcie4_cfg_status_rq_tag1,

		    pcie4_cfg_status_rq_tag_av,

		    pcie4_cfg_status_rq_tag_vld0,

		    pcie4_cfg_status_rq_tag_vld1,

		    pcie4_cfg_status_rx_pm_state,

		    pcie4_cfg_status_tfc_npd_av,

		    pcie4_cfg_status_tfc_nph_av,

		    pcie4_cfg_status_tph_requester_enable,

		    pcie4_cfg_status_tph_st_mode,

		    pcie4_cfg_status_tx_pm_state,

		    pcie4_cfg_status_vf_power_state,

		    pcie4_cfg_status_vf_status,

		    pcie4_cfg_status_vf_tph_requester_enable,

		    pcie4_cfg_status_vf_tph_st_mode,

		    pcie4_user_link_up,

		    pcie4_phy_rdy_out,

		    tvswitch);
  input  CLK_user_clk;
  input  RST_N_user_reset;
  input  CLK_user_clk_half;
  input  CLK_aclk;
  input  RST_N_aresetn;

  // action method axi_in_m_tvalid
  input  axi_in_tvalid;
  input  [607 : 0] axi_in_tdata;
  input  [75 : 0] axi_in_tstrb;
  input  [75 : 0] axi_in_tkeep;
  input  axi_in_tlast;

  // value method axi_in_m_tready
  output axi_in_tready;

  // value method pcie_in_m_axis_cc_m_tvalid
  output m_axis_cc_tvalid;

  // value method pcie_in_m_axis_cc_m_tdata
  output [63 : 0] m_axis_cc_tdata;

  // value method pcie_in_m_axis_cc_m_tkeep
  output [1 : 0] m_axis_cc_tkeep;

  // value method pcie_in_m_axis_cc_m_tlast
  output m_axis_cc_tlast;

  // value method pcie_in_m_axis_cc_m_tuser
  output [32 : 0] m_axis_cc_tuser;

  // action method pcie_in_m_axis_cc_m_tready
  input  m_axis_cc_tready;

  // value method pcie_in_m_axis_rq_m_tvalid
  output m_axis_rq_tvalid;

  // value method pcie_in_m_axis_rq_m_tdata
  output [63 : 0] m_axis_rq_tdata;

  // value method pcie_in_m_axis_rq_m_tkeep
  output [1 : 0] m_axis_rq_tkeep;

  // value method pcie_in_m_axis_rq_m_tlast
  output m_axis_rq_tlast;

  // value method pcie_in_m_axis_rq_m_tuser
  output [61 : 0] m_axis_rq_tuser;

  // action method pcie_in_m_axis_rq_m_tready
  input  m_axis_rq_tready;

  // action method pcie_in_s_axis_cq_m_tvalid
  input  s_axis_cq_tvalid;
  input  [63 : 0] s_axis_cq_tdata;
  input  [1 : 0] s_axis_cq_tkeep;
  input  s_axis_cq_tlast;
  input  [87 : 0] s_axis_cq_tuser;

  // value method pcie_in_s_axis_cq_m_tready
  output s_axis_cq_tready;

  // action method pcie_in_s_axis_rc_m_tvalid
  input  s_axis_rc_tvalid;
  input  [63 : 0] s_axis_rc_tdata;
  input  [1 : 0] s_axis_rc_tkeep;
  input  s_axis_rc_tlast;
  input  [74 : 0] s_axis_rc_tuser;

  // value method pcie_in_s_axis_rc_m_tready
  output s_axis_rc_tready;

  // value method pcie_in_pcie4_cfg_mgmt_addr
  output [9 : 0] pcie4_cfg_mgmt_addr;

  // value method pcie_in_pcie4_cfg_mgmt_byte_enable
  output [3 : 0] pcie4_cfg_mgmt_byte_enable;

  // value method pcie_in_pcie4_cfg_mgmt_debug_access
  output pcie4_cfg_mgmt_debug_access;

  // value method pcie_in_pcie4_cfg_mgmt_function_number
  output [7 : 0] pcie4_cfg_mgmt_function_number;

  // action method pcie_in_pcie4_cfg_mgmt_read_data
  input  [31 : 0] pcie4_cfg_mgmt_read_data;

  // value method pcie_in_pcie4_cfg_mgmt_read
  output pcie4_cfg_mgmt_read;

  // action method pcie_in_pcie4_cfg_mgmt_read_write_done
  input  pcie4_cfg_mgmt_read_write_done;

  // value method pcie_in_pcie4_cfg_mgmt_write_data
  output [31 : 0] pcie4_cfg_mgmt_write_data;

  // value method pcie_in_pcie4_cfg_mgmt_write
  output pcie4_cfg_mgmt_write;

  // value method pcie_in_pcie4_cfg_pm_aspm_l1_entry_reject
  output pcie4_cfg_pm_aspm_l1_entry_reject;

  // value method pcie_in_pcie4_cfg_pm_aspm_tx_10s_entry_disable
  output pcie4_cfg_pm_aspm_tx_10s_entry_disable;

  // value method pcie_in_pcie4_cfg_external_msix_msix_address
  output [63 : 0] pcie4_cfg_external_msix_msix_address;

  // value method pcie_in_pcie4_cfg_external_msix_msix_data
  output [31 : 0] pcie4_cfg_external_msix_msix_data;

  // action method pcie_in_pcie4_cfg_external_msix_msix_msix_enable
  input  [3 : 0] pcie4_cfg_external_msix_msix_msix_enable;

  // value method pcie_in_pcie4_cfg_external_msix_msix_intrpt
  output pcie4_cfg_external_msix_msix_intrpt;

  // action method pcie_in_pcie4_cfg_external_msix_msix_msix_mask
  input  [3 : 0] pcie4_cfg_external_msix_msix_msix_mask;

  // value method pcie_in_pcie4_cfg_external_msix_msix_vec_pending
  output [1 : 0] pcie4_cfg_external_msix_msix_vec_pending;

  // action method pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status
  input  pcie4_cfg_external_msix_msix_vec_pending_status;

  // action method pcie_in_pcie4_cfg_external_msix_msix_vf_enable
  input  [251 : 0] pcie4_cfg_external_msix_msix_vf_enable;

  // action method pcie_in_pcie4_cfg_external_msix_msix_vf_mask
  input  [251 : 0] pcie4_cfg_external_msix_msix_vf_mask;

  // action method pcie_in_pcie4_cfg_external_msix_msi_fail
  input  pcie4_cfg_external_msix_msi_fail;

  // value method pcie_in_pcie4_cfg_external_msix_msi_function_number
  output [7 : 0] pcie4_cfg_external_msix_msi_function_number;

  // action method pcie_in_pcie4_cfg_external_msix_msi_sent
  input  pcie4_cfg_external_msix_msi_sent;

  // value method pcie_in_pcie4_cfg_interrupt_intrpt
  output [3 : 0] pcie4_cfg_interrupt_intrpt;

  // value method pcie_in_pcie4_cfg_interrupt_pending
  output [3 : 0] pcie4_cfg_interrupt_pending;

  // action method pcie_in_pcie4_cfg_interrupt_sent
  input  pcie4_cfg_interrupt_sent;

  // action method pcie_in_pcie4_cfg_control_bus_number
  input  [7 : 0] pcie4_cfg_control_bus_number;

  // value method pcie_in_pcie4_cfg_control_config_space_enable
  output pcie4_cfg_control_config_space_enable;

  // value method pcie_in_pcie4_cfg_control_ds_bus_number
  output [7 : 0] pcie4_cfg_control_ds_bus_number;

  // value method pcie_in_pcie4_cfg_control_ds_device_number
  output [4 : 0] pcie4_cfg_control_ds_device_number;

  // value method pcie_in_pcie4_cfg_control_ds_port_number
  output [7 : 0] pcie4_cfg_control_ds_port_number;

  // value method pcie_in_pcie4_cfg_control_dsn
  output [63 : 0] pcie4_cfg_control_dsn;

  // value method pcie_in_pcie4_cfg_control_err_cor_in
  output pcie4_cfg_control_err_cor_in;

  // value method pcie_in_pcie4_cfg_control_err_uncor_in
  output pcie4_cfg_control_err_uncor_in;

  // value method pcie_in_pcie4_cfg_control_flr_done
  output [3 : 0] pcie4_cfg_control_flr_done;

  // action method pcie_in_pcie4_cfg_control_flr_in_process
  input  pcie4_cfg_control_flr_in_process;

  // value method pcie_in_pcie4_cfg_control_hot_reset_in
  output pcie4_cfg_control_hot_reset_in;

  // action method pcie_in_pcie4_cfg_control_hot_reset_out
  input  pcie4_cfg_control_hot_reset_out;

  // value method pcie_in_pcie4_cfg_control_link_training_enable
  output pcie4_cfg_control_link_training_enable;

  // value method pcie_in_pcie4_cfg_control_power_state_change_ack
  output pcie4_cfg_control_power_state_change_ack;

  // action method pcie_in_pcie4_cfg_control_power_state_change_interrupt
  input  pcie4_cfg_control_power_state_change_interrupt;

  // value method pcie_in_pcie4_cfg_control_req_pm_transition_l23_ready
  output pcie4_cfg_control_req_pm_transition_l23_ready;

  // value method pcie_in_pcie4_cfg_control_vf_flr_done
  output pcie4_cfg_control_vf_flr_done;

  // value method pcie_in_pcie4_cfg_control_vf_flr_func_num
  output [7 : 0] pcie4_cfg_control_vf_flr_func_num;

  // action method pcie_in_pcie4_cfg_control_vf_flr_in_process
  input  [251 : 0] pcie4_cfg_control_vf_flr_in_process;

  // action method pcie_in_pcie4_cfg_fc_cpld
  input  [11 : 0] pcie4_cfg_fc_cpld;

  // action method pcie_in_pcie4_cfg_fc_cplh
  input  [7 : 0] pcie4_cfg_fc_cplh;

  // action method pcie_in_pcie4_cfg_fc_npd
  input  [11 : 0] pcie4_cfg_fc_npd;

  // action method pcie_in_pcie4_cfg_fc_nph
  input  [7 : 0] pcie4_cfg_fc_nph;

  // action method pcie_in_pcie4_cfg_fc_pd
  input  [11 : 0] pcie4_cfg_fc_pd;

  // action method pcie_in_pcie4_cfg_fc_ph
  input  [7 : 0] pcie4_cfg_fc_ph;

  // value method pcie_in_pcie4_cfg_fc_sel
  output [2 : 0] pcie4_cfg_fc_sel;

  // value method pcie_in_pcie4_cfg_mesg_tx_transmit
  output pcie4_cfg_mesg_tx_transmit;

  // value method pcie_in_pcie4_cfg_mesg_tx_transmit_data
  output [31 : 0] pcie4_cfg_mesg_tx_transmit_data;

  // action method pcie_in_pcie4_cfg_mesg_tx_transmit_done
  input  pcie4_cfg_mesg_tx_transmit_done;

  // value method pcie_in_pcie4_cfg_mesg_tx_transmit_type
  output [2 : 0] pcie4_cfg_mesg_tx_transmit_type;

  // action method pcie_in_pcie4_cfg_mesg_rcvd_received
  input  pcie4_cfg_mesg_rcvd_received;

  // action method pcie_in_pcie4_cfg_mesg_rcvd_received_data
  input  [7 : 0] pcie4_cfg_mesg_rcvd_received_data;

  // action method pcie_in_pcie4_cfg_mesg_rcvd_received_type
  input  [4 : 0] pcie4_cfg_mesg_rcvd_received_type;

  // value method pcie_in_pcie4_cfg_status_pcie_cq_np_req
  output [1 : 0] pcie4_cfg_status_pcie_cq_np_req;

  // action method pcie_in_pcie4_cfg_status_pcie_cq_np_req_count
  input  [5 : 0] pcie4_cfg_status_pcie_cq_np_req_count;

  // action method pcie_in_pcie4_cfg_status_current_speed
  input  [1 : 0] pcie4_cfg_status_current_speed;

  // action method pcie_in_pcie4_cfg_status_err_cor_out
  input  pcie4_cfg_status_err_cor_out;

  // action method pcie_in_pcie4_cfg_status_err_fatal_out
  input  pcie4_cfg_status_err_fatal_out;

  // action method pcie_in_pcie4_cfg_status_err_nonfatal_out
  input  pcie4_cfg_status_err_nonfatal_out;

  // action method pcie_in_pcie4_cfg_status_funstion_power_state
  input  [11 : 0] pcie4_cfg_status_funstion_power_state;

  // action method pcie_in_pcie4_cfg_status_function_status
  input  [15 : 0] pcie4_cfg_status_function_status;

  // action method pcie_in_pcie4_cfg_status_link_power_state
  input  [1 : 0] pcie4_cfg_status_link_power_state;

  // action method pcie_in_pcie4_cfg_status_local_error_out
  input  [4 : 0] pcie4_cfg_status_local_error_out;

  // action method pcie_in_pcie4_cfg_status_local_error_valid
  input  pcie4_cfg_status_local_error_valid;

  // action method pcie_in_pcie4_cfg_status_ltssm_state
  input  [5 : 0] pcie4_cfg_status_ltssm_state;

  // action method pcie_in_pcie4_cfg_status_max_payload
  input  [1 : 0] pcie4_cfg_status_max_payload;

  // action method pcie_in_pcie4_cfg_status_max_read_req
  input  [2 : 0] pcie4_cfg_status_max_read_req;

  // action method pcie_in_pcie4_cfg_status_negotiated_width
  input  [2 : 0] pcie4_cfg_status_negotiated_width;

  // action method pcie_in_pcie4_cfg_status_obff_enable
  input  [1 : 0] pcie4_cfg_status_obff_enable;

  // action method pcie_in_pcie4_cfg_status_phy_link_down
  input  pcie4_cfg_status_phy_link_down;

  // action method pcie_in_pcie4_cfg_status_phy_link_status
  input  [1 : 0] pcie4_cfg_status_phy_link_status;

  // action method pcie_in_pcie4_cfg_status_pl_status_change
  input  pcie4_cfg_status_pl_status_change;

  // action method pcie_in_pcie4_cfg_status_rcb_status
  input  [3 : 0] pcie4_cfg_status_rcb_status;

  // action method pcie_in_pcie4_cfg_status_rq_seq_num0
  input  [5 : 0] pcie4_cfg_status_rq_seq_num0;

  // action method pcie_in_pcie4_cfg_status_rq_seq_num1
  input  [5 : 0] pcie4_cfg_status_rq_seq_num1;

  // action method pcie_in_pcie4_cfg_status_rq_seq_num_vld0
  input  pcie4_cfg_status_rq_seq_num_vld0;

  // action method pcie_in_pcie4_cfg_status_rq_seq_num_vld1
  input  pcie4_cfg_status_rq_seq_num_vld1;

  // action method pcie_in_pcie4_cfg_status_rq_tag0
  input  [7 : 0] pcie4_cfg_status_rq_tag0;

  // action method pcie_in_pcie4_cfg_status_rq_tag1
  input  [7 : 0] pcie4_cfg_status_rq_tag1;

  // action method pcie_in_pcie4_cfg_status_rq_tag_av
  input  [3 : 0] pcie4_cfg_status_rq_tag_av;

  // action method pcie_in_pcie4_cfg_status_rq_tag_vld0
  input  pcie4_cfg_status_rq_tag_vld0;

  // action method pcie_in_pcie4_cfg_status_rq_tag_vld1
  input  pcie4_cfg_status_rq_tag_vld1;

  // action method pcie_in_pcie4_cfg_status_rx_pm_state
  input  [1 : 0] pcie4_cfg_status_rx_pm_state;

  // action method pcie_in_pcie4_cfg_status_tfc_npd_av
  input  [3 : 0] pcie4_cfg_status_tfc_npd_av;

  // action method pcie_in_pcie4_cfg_status_tfc_nph_av
  input  [3 : 0] pcie4_cfg_status_tfc_nph_av;

  // action method pcie_in_pcie4_cfg_status_tph_requester_enable
  input  [3 : 0] pcie4_cfg_status_tph_requester_enable;

  // action method pcie_in_pcie4_cfg_status_tph_st_mode
  input  [11 : 0] pcie4_cfg_status_tph_st_mode;

  // action method pcie_in_pcie4_cfg_status_tx_pm_state
  input  [1 : 0] pcie4_cfg_status_tx_pm_state;

  // action method pcie_in_pcie4_cfg_status_vf_power_state
  input  [755 : 0] pcie4_cfg_status_vf_power_state;

  // action method pcie_in_pcie4_cfg_status_vf_status
  input  [503 : 0] pcie4_cfg_status_vf_status;

  // action method pcie_in_pcie4_cfg_status_vf_tph_requester_enable
  input  [251 : 0] pcie4_cfg_status_vf_tph_requester_enable;

  // action method pcie_in_pcie4_cfg_status_vf_tph_st_mode
  input  [755 : 0] pcie4_cfg_status_vf_tph_st_mode;

  // action method pcie_in_pcie4_user_link_up
  input  pcie4_user_link_up;

  // action method pcie_in_pcie4_phy_rdy_out
  input  pcie4_phy_rdy_out;

  // action method tv_switch
  input  [1 : 0] tvswitch;

  // signals for module outputs
  wire [63 : 0] m_axis_cc_tdata,
		m_axis_rq_tdata,
		pcie4_cfg_control_dsn,
		pcie4_cfg_external_msix_msix_address;
  wire [61 : 0] m_axis_rq_tuser;
  wire [32 : 0] m_axis_cc_tuser;
  wire [31 : 0] pcie4_cfg_external_msix_msix_data,
		pcie4_cfg_mesg_tx_transmit_data,
		pcie4_cfg_mgmt_write_data;
  wire [9 : 0] pcie4_cfg_mgmt_addr;
  wire [7 : 0] pcie4_cfg_control_ds_bus_number,
	       pcie4_cfg_control_ds_port_number,
	       pcie4_cfg_control_vf_flr_func_num,
	       pcie4_cfg_external_msix_msi_function_number,
	       pcie4_cfg_mgmt_function_number;
  wire [4 : 0] pcie4_cfg_control_ds_device_number;
  wire [3 : 0] pcie4_cfg_control_flr_done,
	       pcie4_cfg_interrupt_intrpt,
	       pcie4_cfg_interrupt_pending,
	       pcie4_cfg_mgmt_byte_enable;
  wire [2 : 0] pcie4_cfg_fc_sel, pcie4_cfg_mesg_tx_transmit_type;
  wire [1 : 0] m_axis_cc_tkeep,
	       m_axis_rq_tkeep,
	       pcie4_cfg_external_msix_msix_vec_pending,
	       pcie4_cfg_status_pcie_cq_np_req;
  wire axi_in_tready,
       m_axis_cc_tlast,
       m_axis_cc_tvalid,
       m_axis_rq_tlast,
       m_axis_rq_tvalid,
       pcie4_cfg_control_config_space_enable,
       pcie4_cfg_control_err_cor_in,
       pcie4_cfg_control_err_uncor_in,
       pcie4_cfg_control_hot_reset_in,
       pcie4_cfg_control_link_training_enable,
       pcie4_cfg_control_power_state_change_ack,
       pcie4_cfg_control_req_pm_transition_l23_ready,
       pcie4_cfg_control_vf_flr_done,
       pcie4_cfg_external_msix_msix_intrpt,
       pcie4_cfg_mesg_tx_transmit,
       pcie4_cfg_mgmt_debug_access,
       pcie4_cfg_mgmt_read,
       pcie4_cfg_mgmt_write,
       pcie4_cfg_pm_aspm_l1_entry_reject,
       pcie4_cfg_pm_aspm_tx_10s_entry_disable,
       s_axis_cq_tready,
       s_axis_rc_tready;

  // inlined wires
  wire [153 : 0] cc_f_tlps_rv$port1__read,
		 cc_f_tlps_rv$port1__write_1,
		 cc_f_tlps_rv$port2__read,
		 rq_f_tlps_rv$port1__read,
		 rq_f_tlps_rv$port1__write_1,
		 rq_f_tlps_rv$port2__read;
  wire [152 : 0] cq_f_cq_rv$port1__read,
		 cq_f_cq_rv$port1__write_1,
		 cq_f_cq_rv$port2__read;
  wire cc_f_tlps_rv$EN_port0__write,
       cq_f_cq_rv$EN_port0__write,
       rc_gearbox_pwDequeue$whas,
       rc_gearbox_pwEnqueue$whas,
       rq_f_tlps_rv$EN_port0__write;

  // register cc_f_tlps_rv
  reg [153 : 0] cc_f_tlps_rv;
  wire [153 : 0] cc_f_tlps_rv$D_IN;
  wire cc_f_tlps_rv$EN;

  // register cc_gearbox_block0
  reg [133 : 0] cc_gearbox_block0;
  wire [133 : 0] cc_gearbox_block0$D_IN;
  wire cc_gearbox_block0$EN;

  // register cc_gearbox_block0_status
  reg cc_gearbox_block0_status;
  wire cc_gearbox_block0_status$D_IN, cc_gearbox_block0_status$EN;

  // register cc_gearbox_block1
  reg [133 : 0] cc_gearbox_block1;
  wire [133 : 0] cc_gearbox_block1$D_IN;
  wire cc_gearbox_block1$EN;

  // register cc_gearbox_block1_status
  reg cc_gearbox_block1_status;
  wire cc_gearbox_block1_status$D_IN, cc_gearbox_block1_status$EN;

  // register cc_gearbox_dInReset_pre_isInReset
  reg cc_gearbox_dInReset_pre_isInReset;
  wire cc_gearbox_dInReset_pre_isInReset$D_IN,
       cc_gearbox_dInReset_pre_isInReset$EN;

  // register cc_gearbox_elem0_status_0
  reg cc_gearbox_elem0_status_0;
  wire cc_gearbox_elem0_status_0$D_IN, cc_gearbox_elem0_status_0$EN;

  // register cc_gearbox_elem0_status_1
  reg cc_gearbox_elem0_status_1;
  wire cc_gearbox_elem0_status_1$D_IN, cc_gearbox_elem0_status_1$EN;

  // register cc_gearbox_elem1_status_0
  reg cc_gearbox_elem1_status_0;
  wire cc_gearbox_elem1_status_0$D_IN, cc_gearbox_elem1_status_0$EN;

  // register cc_gearbox_elem1_status_1
  reg cc_gearbox_elem1_status_1;
  wire cc_gearbox_elem1_status_1$D_IN, cc_gearbox_elem1_status_1$EN;

  // register cc_gearbox_read_block
  reg cc_gearbox_read_block;
  wire cc_gearbox_read_block$D_IN, cc_gearbox_read_block$EN;

  // register cc_gearbox_sInReset_pre_isInReset
  reg cc_gearbox_sInReset_pre_isInReset;
  wire cc_gearbox_sInReset_pre_isInReset$D_IN,
       cc_gearbox_sInReset_pre_isInReset$EN;

  // register cc_gearbox_write_block
  reg cc_gearbox_write_block;
  wire cc_gearbox_write_block$D_IN, cc_gearbox_write_block$EN;

  // register cc_rg_dwcount
  reg [10 : 0] cc_rg_dwcount;
  wire [10 : 0] cc_rg_dwcount$D_IN;
  wire cc_rg_dwcount$EN;

  // register cnt
  reg [7 : 0] cnt;
  wire [7 : 0] cnt$D_IN;
  wire cnt$EN;

  // register cq_f_cq_rv
  reg [152 : 0] cq_f_cq_rv;
  wire [152 : 0] cq_f_cq_rv$D_IN;
  wire cq_f_cq_rv$EN;

  // register cq_gearbox_block0_status
  reg cq_gearbox_block0_status;
  wire cq_gearbox_block0_status$D_IN, cq_gearbox_block0_status$EN;

  // register cq_gearbox_block1_status
  reg cq_gearbox_block1_status;
  wire cq_gearbox_block1_status$D_IN, cq_gearbox_block1_status$EN;

  // register cq_gearbox_dInReset_pre_isInReset
  reg cq_gearbox_dInReset_pre_isInReset;
  wire cq_gearbox_dInReset_pre_isInReset$D_IN,
       cq_gearbox_dInReset_pre_isInReset$EN;

  // register cq_gearbox_elem0_status_0
  reg cq_gearbox_elem0_status_0;
  wire cq_gearbox_elem0_status_0$D_IN, cq_gearbox_elem0_status_0$EN;

  // register cq_gearbox_elem0_status_1
  reg cq_gearbox_elem0_status_1;
  wire cq_gearbox_elem0_status_1$D_IN, cq_gearbox_elem0_status_1$EN;

  // register cq_gearbox_elem1_status_0
  reg cq_gearbox_elem1_status_0;
  wire cq_gearbox_elem1_status_0$D_IN, cq_gearbox_elem1_status_0$EN;

  // register cq_gearbox_elem1_status_1
  reg cq_gearbox_elem1_status_1;
  wire cq_gearbox_elem1_status_1$D_IN, cq_gearbox_elem1_status_1$EN;

  // register cq_gearbox_elem_0
  reg [75 : 0] cq_gearbox_elem_0;
  wire [75 : 0] cq_gearbox_elem_0$D_IN;
  wire cq_gearbox_elem_0$EN;

  // register cq_gearbox_elem_1
  reg [75 : 0] cq_gearbox_elem_1;
  wire [75 : 0] cq_gearbox_elem_1$D_IN;
  wire cq_gearbox_elem_1$EN;

  // register cq_gearbox_elem_2
  reg [75 : 0] cq_gearbox_elem_2;
  wire [75 : 0] cq_gearbox_elem_2$D_IN;
  wire cq_gearbox_elem_2$EN;

  // register cq_gearbox_elem_3
  reg [75 : 0] cq_gearbox_elem_3;
  wire [75 : 0] cq_gearbox_elem_3$D_IN;
  wire cq_gearbox_elem_3$EN;

  // register cq_gearbox_read_block
  reg cq_gearbox_read_block;
  wire cq_gearbox_read_block$D_IN, cq_gearbox_read_block$EN;

  // register cq_gearbox_sInReset_pre_isInReset
  reg cq_gearbox_sInReset_pre_isInReset;
  wire cq_gearbox_sInReset_pre_isInReset$D_IN,
       cq_gearbox_sInReset_pre_isInReset$EN;

  // register cq_gearbox_write_block
  reg cq_gearbox_write_block;
  wire cq_gearbox_write_block$D_IN, cq_gearbox_write_block$EN;

  // register cq_rg_dwcount
  reg [10 : 0] cq_rg_dwcount;
  reg [10 : 0] cq_rg_dwcount$D_IN;
  wire cq_rg_dwcount$EN;

  // register cq_rg_even_enq
  reg cq_rg_even_enq;
  wire cq_rg_even_enq$D_IN, cq_rg_even_enq$EN;

  // register cq_rg_pad_odd_tail
  reg cq_rg_pad_odd_tail;
  wire cq_rg_pad_odd_tail$D_IN, cq_rg_pad_odd_tail$EN;

  // register intr_on
  reg intr_on;
  wire intr_on$D_IN, intr_on$EN;

  // register lnk_up_cr
  reg lnk_up_cr;
  wire lnk_up_cr$D_IN, lnk_up_cr$EN;

  // register max_payload_bytes
  reg [12 : 0] max_payload_bytes;
  wire [12 : 0] max_payload_bytes$D_IN;
  wire max_payload_bytes$EN;

  // register max_payload_cr
  reg [12 : 0] max_payload_cr;
  wire [12 : 0] max_payload_cr$D_IN;
  wire max_payload_cr$EN;

  // register max_rd_req_cr
  reg [12 : 0] max_rd_req_cr;
  wire [12 : 0] max_rd_req_cr$D_IN;
  wire max_rd_req_cr$EN;

  // register max_read_req_bytes
  reg [12 : 0] max_read_req_bytes;
  wire [12 : 0] max_read_req_bytes$D_IN;
  wire max_read_req_bytes$EN;

  // register msix_enable
  reg msix_enable;
  wire msix_enable$D_IN, msix_enable$EN;

  // register msix_enable_cr
  reg msix_enable_cr;
  wire msix_enable_cr$D_IN, msix_enable_cr$EN;

  // register msix_masked
  reg msix_masked;
  wire msix_masked$D_IN, msix_masked$EN;

  // register msix_masked_cr
  reg msix_masked_cr;
  wire msix_masked_cr$D_IN, msix_masked_cr$EN;

  // register rc_gearbox_block0_status
  reg rc_gearbox_block0_status;
  wire rc_gearbox_block0_status$D_IN, rc_gearbox_block0_status$EN;

  // register rc_gearbox_block1_status
  reg rc_gearbox_block1_status;
  wire rc_gearbox_block1_status$D_IN, rc_gearbox_block1_status$EN;

  // register rc_gearbox_dInReset_pre_isInReset
  reg rc_gearbox_dInReset_pre_isInReset;
  wire rc_gearbox_dInReset_pre_isInReset$D_IN,
       rc_gearbox_dInReset_pre_isInReset$EN;

  // register rc_gearbox_elem0_status_0
  reg rc_gearbox_elem0_status_0;
  wire rc_gearbox_elem0_status_0$D_IN, rc_gearbox_elem0_status_0$EN;

  // register rc_gearbox_elem0_status_1
  reg rc_gearbox_elem0_status_1;
  wire rc_gearbox_elem0_status_1$D_IN, rc_gearbox_elem0_status_1$EN;

  // register rc_gearbox_elem1_status_0
  reg rc_gearbox_elem1_status_0;
  wire rc_gearbox_elem1_status_0$D_IN, rc_gearbox_elem1_status_0$EN;

  // register rc_gearbox_elem1_status_1
  reg rc_gearbox_elem1_status_1;
  wire rc_gearbox_elem1_status_1$D_IN, rc_gearbox_elem1_status_1$EN;

  // register rc_gearbox_elem_0
  reg [75 : 0] rc_gearbox_elem_0;
  wire [75 : 0] rc_gearbox_elem_0$D_IN;
  wire rc_gearbox_elem_0$EN;

  // register rc_gearbox_elem_1
  reg [75 : 0] rc_gearbox_elem_1;
  wire [75 : 0] rc_gearbox_elem_1$D_IN;
  wire rc_gearbox_elem_1$EN;

  // register rc_gearbox_elem_2
  reg [75 : 0] rc_gearbox_elem_2;
  wire [75 : 0] rc_gearbox_elem_2$D_IN;
  wire rc_gearbox_elem_2$EN;

  // register rc_gearbox_elem_3
  reg [75 : 0] rc_gearbox_elem_3;
  wire [75 : 0] rc_gearbox_elem_3$D_IN;
  wire rc_gearbox_elem_3$EN;

  // register rc_gearbox_read_block
  reg rc_gearbox_read_block;
  wire rc_gearbox_read_block$D_IN, rc_gearbox_read_block$EN;

  // register rc_gearbox_sInReset_pre_isInReset
  reg rc_gearbox_sInReset_pre_isInReset;
  wire rc_gearbox_sInReset_pre_isInReset$D_IN,
       rc_gearbox_sInReset_pre_isInReset$EN;

  // register rc_gearbox_write_block
  reg rc_gearbox_write_block;
  wire rc_gearbox_write_block$D_IN, rc_gearbox_write_block$EN;

  // register rc_rg_dwcount
  reg [10 : 0] rc_rg_dwcount;
  wire [10 : 0] rc_rg_dwcount$D_IN;
  wire rc_rg_dwcount$EN;

  // register rc_rg_even_enq
  reg rc_rg_even_enq;
  wire rc_rg_even_enq$D_IN, rc_rg_even_enq$EN;

  // register rc_rg_in_packet
  reg rc_rg_in_packet;
  wire rc_rg_in_packet$D_IN, rc_rg_in_packet$EN;

  // register rc_rg_pad_odd_tail
  reg rc_rg_pad_odd_tail;
  wire rc_rg_pad_odd_tail$D_IN, rc_rg_pad_odd_tail$EN;

  // register rcb_cr
  reg [7 : 0] rcb_cr;
  wire [7 : 0] rcb_cr$D_IN;
  wire rcb_cr$EN;

  // register rcb_mask
  reg [6 : 0] rcb_mask;
  wire [6 : 0] rcb_mask$D_IN;
  wire rcb_mask$EN;

  // register rq_f_tlps_rv
  reg [153 : 0] rq_f_tlps_rv;
  wire [153 : 0] rq_f_tlps_rv$D_IN;
  wire rq_f_tlps_rv$EN;

  // register rq_gearbox_block0
  reg [149 : 0] rq_gearbox_block0;
  reg [149 : 0] rq_gearbox_block0$D_IN;
  wire rq_gearbox_block0$EN;

  // register rq_gearbox_block0_status
  reg rq_gearbox_block0_status;
  wire rq_gearbox_block0_status$D_IN, rq_gearbox_block0_status$EN;

  // register rq_gearbox_block1
  reg [149 : 0] rq_gearbox_block1;
  reg [149 : 0] rq_gearbox_block1$D_IN;
  wire rq_gearbox_block1$EN;

  // register rq_gearbox_block1_status
  reg rq_gearbox_block1_status;
  wire rq_gearbox_block1_status$D_IN, rq_gearbox_block1_status$EN;

  // register rq_gearbox_dInReset_pre_isInReset
  reg rq_gearbox_dInReset_pre_isInReset;
  wire rq_gearbox_dInReset_pre_isInReset$D_IN,
       rq_gearbox_dInReset_pre_isInReset$EN;

  // register rq_gearbox_elem0_status_0
  reg rq_gearbox_elem0_status_0;
  wire rq_gearbox_elem0_status_0$D_IN, rq_gearbox_elem0_status_0$EN;

  // register rq_gearbox_elem0_status_1
  reg rq_gearbox_elem0_status_1;
  wire rq_gearbox_elem0_status_1$D_IN, rq_gearbox_elem0_status_1$EN;

  // register rq_gearbox_elem1_status_0
  reg rq_gearbox_elem1_status_0;
  wire rq_gearbox_elem1_status_0$D_IN, rq_gearbox_elem1_status_0$EN;

  // register rq_gearbox_elem1_status_1
  reg rq_gearbox_elem1_status_1;
  wire rq_gearbox_elem1_status_1$D_IN, rq_gearbox_elem1_status_1$EN;

  // register rq_gearbox_read_block
  reg rq_gearbox_read_block;
  wire rq_gearbox_read_block$D_IN, rq_gearbox_read_block$EN;

  // register rq_gearbox_sInReset_pre_isInReset
  reg rq_gearbox_sInReset_pre_isInReset;
  wire rq_gearbox_sInReset_pre_isInReset$D_IN,
       rq_gearbox_sInReset_pre_isInReset$EN;

  // register rq_gearbox_write_block
  reg rq_gearbox_write_block;
  wire rq_gearbox_write_block$D_IN, rq_gearbox_write_block$EN;

  // register rq_rg_dwcount
  reg [10 : 0] rq_rg_dwcount;
  reg [10 : 0] rq_rg_dwcount$D_IN;
  wire rq_rg_dwcount$EN;

  // register rq_rg_first_be
  reg [3 : 0] rq_rg_first_be;
  wire [3 : 0] rq_rg_first_be$D_IN;
  wire rq_rg_first_be$EN;

  // register rq_rg_last_be
  reg [3 : 0] rq_rg_last_be;
  wire [3 : 0] rq_rg_last_be$D_IN;
  wire rq_rg_last_be$EN;

  // register rq_rg_mdw
  reg [32 : 0] rq_rg_mdw;
  reg [32 : 0] rq_rg_mdw$D_IN;
  wire rq_rg_mdw$EN;

  // register trace
  reg [575 : 0] trace;
  wire [575 : 0] trace$D_IN;
  wire trace$EN;

  // register tracesOn
  reg tracesOn;
  wire tracesOn$D_IN, tracesOn$EN;

  // register vecSize
  reg [7 : 0] vecSize;
  wire [7 : 0] vecSize$D_IN;
  wire vecSize$EN;

  // register vrgs_0
  reg [1 : 0] vrgs_0;
  wire [1 : 0] vrgs_0$D_IN;
  wire vrgs_0$EN;

  // register vrgs_1
  reg [1 : 0] vrgs_1;
  wire [1 : 0] vrgs_1$D_IN;
  wire vrgs_1$EN;

  // register vrgs_2
  reg [1 : 0] vrgs_2;
  wire [1 : 0] vrgs_2$D_IN;
  wire vrgs_2$EN;

  // register vrgs_3
  reg [1 : 0] vrgs_3;
  wire [1 : 0] vrgs_3$D_IN;
  wire vrgs_3$EN;

  // register vrgs_4
  reg [1 : 0] vrgs_4;
  wire [1 : 0] vrgs_4$D_IN;
  wire vrgs_4$EN;

  // register vrgs_5
  reg [1 : 0] vrgs_5;
  wire [1 : 0] vrgs_5$D_IN;
  wire vrgs_5$EN;

  // register vrgs_6
  reg [1 : 0] vrgs_6;
  wire [1 : 0] vrgs_6$D_IN;
  wire vrgs_6$EN;

  // register vrgs_7
  reg [1 : 0] vrgs_7;
  wire [1 : 0] vrgs_7$D_IN;
  wire vrgs_7$EN;

  // ports of submodule _unnamed_
  wire [755 : 0] _unnamed_$pcie_in_pcie4_cfg_status_vf_power_state,
		 _unnamed_$pcie_in_pcie4_cfg_status_vf_tph_st_mode;
  wire [503 : 0] _unnamed_$pcie_in_pcie4_cfg_status_vf_status;
  wire [251 : 0] _unnamed_$pcie_in_pcie4_cfg_control_vf_flr_in_process,
		 _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vf_enable,
		 _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vf_mask,
		 _unnamed_$pcie_in_pcie4_cfg_status_vf_tph_requester_enable;
  wire [87 : 0] _unnamed_$pcie_in_s_axis_cq_tuser;
  wire [75 : 0] _unnamed_$cq_recv_get, _unnamed_$rc_recv_get;
  wire [74 : 0] _unnamed_$pcie_in_s_axis_rc_tuser, _unnamed_$rq_xmit_put;
  wire [66 : 0] _unnamed_$cc_xmit_put;
  wire [63 : 0] _unnamed_$pcie_in_m_axis_cc_tdata,
		_unnamed_$pcie_in_m_axis_rq_tdata,
		_unnamed_$pcie_in_pcie4_cfg_control_dsn,
		_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_address,
		_unnamed_$pcie_in_s_axis_cq_tdata,
		_unnamed_$pcie_in_s_axis_rc_tdata;
  wire [61 : 0] _unnamed_$pcie_in_m_axis_rq_tuser;
  wire [32 : 0] _unnamed_$pcie_in_m_axis_cc_tuser;
  wire [31 : 0] _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_data,
		_unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_data,
		_unnamed_$pcie_in_pcie4_cfg_mgmt_read_data,
		_unnamed_$pcie_in_pcie4_cfg_mgmt_write_data;
  wire [15 : 0] _unnamed_$pcie_in_pcie4_cfg_status_function_status,
		_unnamed_$status_function_status;
  wire [11 : 0] _unnamed_$pcie_in_pcie4_cfg_fc_cpld,
		_unnamed_$pcie_in_pcie4_cfg_fc_npd,
		_unnamed_$pcie_in_pcie4_cfg_fc_pd,
		_unnamed_$pcie_in_pcie4_cfg_status_funstion_power_state,
		_unnamed_$pcie_in_pcie4_cfg_status_tph_st_mode;
  wire [9 : 0] _unnamed_$pcie_in_pcie4_cfg_mgmt_addr;
  wire [7 : 0] _unnamed_$pcie_in_pcie4_cfg_control_bus_number,
	       _unnamed_$pcie_in_pcie4_cfg_control_ds_bus_number,
	       _unnamed_$pcie_in_pcie4_cfg_control_ds_port_number,
	       _unnamed_$pcie_in_pcie4_cfg_control_vf_flr_func_num,
	       _unnamed_$pcie_in_pcie4_cfg_external_msix_msi_function_number,
	       _unnamed_$pcie_in_pcie4_cfg_fc_cplh,
	       _unnamed_$pcie_in_pcie4_cfg_fc_nph,
	       _unnamed_$pcie_in_pcie4_cfg_fc_ph,
	       _unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received_data,
	       _unnamed_$pcie_in_pcie4_cfg_mgmt_function_number,
	       _unnamed_$pcie_in_pcie4_cfg_status_rq_tag0,
	       _unnamed_$pcie_in_pcie4_cfg_status_rq_tag1;
  wire [5 : 0] _unnamed_$pcie_in_pcie4_cfg_status_ltssm_state,
	       _unnamed_$pcie_in_pcie4_cfg_status_pcie_cq_np_req_count,
	       _unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num0,
	       _unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num1;
  wire [4 : 0] _unnamed_$pcie_in_pcie4_cfg_control_ds_device_number,
	       _unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received_type,
	       _unnamed_$pcie_in_pcie4_cfg_status_local_error_out;
  wire [3 : 0] _unnamed_$cfg_interrupt_msix_enabled,
	       _unnamed_$cfg_interrupt_msix_mask,
	       _unnamed_$pcie_in_pcie4_cfg_control_flr_done,
	       _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_msix_enable,
	       _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_msix_mask,
	       _unnamed_$pcie_in_pcie4_cfg_interrupt_intrpt,
	       _unnamed_$pcie_in_pcie4_cfg_interrupt_pending,
	       _unnamed_$pcie_in_pcie4_cfg_mgmt_byte_enable,
	       _unnamed_$pcie_in_pcie4_cfg_status_rcb_status,
	       _unnamed_$pcie_in_pcie4_cfg_status_rq_tag_av,
	       _unnamed_$pcie_in_pcie4_cfg_status_tfc_npd_av,
	       _unnamed_$pcie_in_pcie4_cfg_status_tfc_nph_av,
	       _unnamed_$pcie_in_pcie4_cfg_status_tph_requester_enable,
	       _unnamed_$status_rcb_status;
  wire [2 : 0] _unnamed_$pcie_in_pcie4_cfg_fc_sel,
	       _unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_type,
	       _unnamed_$pcie_in_pcie4_cfg_status_max_read_req,
	       _unnamed_$pcie_in_pcie4_cfg_status_negotiated_width,
	       _unnamed_$status_max_read_req;
  wire [1 : 0] _unnamed_$pcie_in_m_axis_cc_tkeep,
	       _unnamed_$pcie_in_m_axis_rq_tkeep,
	       _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vec_pending,
	       _unnamed_$pcie_in_pcie4_cfg_status_current_speed,
	       _unnamed_$pcie_in_pcie4_cfg_status_link_power_state,
	       _unnamed_$pcie_in_pcie4_cfg_status_max_payload,
	       _unnamed_$pcie_in_pcie4_cfg_status_obff_enable,
	       _unnamed_$pcie_in_pcie4_cfg_status_pcie_cq_np_req,
	       _unnamed_$pcie_in_pcie4_cfg_status_phy_link_status,
	       _unnamed_$pcie_in_pcie4_cfg_status_rx_pm_state,
	       _unnamed_$pcie_in_pcie4_cfg_status_tx_pm_state,
	       _unnamed_$pcie_in_s_axis_cq_tkeep,
	       _unnamed_$pcie_in_s_axis_rc_tkeep,
	       _unnamed_$status_max_payload;
  wire _unnamed_$EN_cc_xmit_put,
       _unnamed_$EN_cq_recv_get,
       _unnamed_$EN_rc_recv_get,
       _unnamed_$EN_rq_xmit_put,
       _unnamed_$RDY_cc_xmit_put,
       _unnamed_$RDY_cq_recv_get,
       _unnamed_$RDY_rc_recv_get,
       _unnamed_$RDY_rq_xmit_put,
       _unnamed_$pcie_in_m_axis_cc_tlast,
       _unnamed_$pcie_in_m_axis_cc_tready,
       _unnamed_$pcie_in_m_axis_cc_tvalid,
       _unnamed_$pcie_in_m_axis_rq_tlast,
       _unnamed_$pcie_in_m_axis_rq_tready,
       _unnamed_$pcie_in_m_axis_rq_tvalid,
       _unnamed_$pcie_in_pcie4_cfg_control_config_space_enable,
       _unnamed_$pcie_in_pcie4_cfg_control_err_cor_in,
       _unnamed_$pcie_in_pcie4_cfg_control_err_uncor_in,
       _unnamed_$pcie_in_pcie4_cfg_control_flr_in_process,
       _unnamed_$pcie_in_pcie4_cfg_control_hot_reset_in,
       _unnamed_$pcie_in_pcie4_cfg_control_hot_reset_out,
       _unnamed_$pcie_in_pcie4_cfg_control_link_training_enable,
       _unnamed_$pcie_in_pcie4_cfg_control_power_state_change_ack,
       _unnamed_$pcie_in_pcie4_cfg_control_power_state_change_interrupt,
       _unnamed_$pcie_in_pcie4_cfg_control_req_pm_transition_l23_ready,
       _unnamed_$pcie_in_pcie4_cfg_control_vf_flr_done,
       _unnamed_$pcie_in_pcie4_cfg_external_msix_msi_fail,
       _unnamed_$pcie_in_pcie4_cfg_external_msix_msi_sent,
       _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_intrpt,
       _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status,
       _unnamed_$pcie_in_pcie4_cfg_interrupt_sent,
       _unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received,
       _unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit,
       _unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_done,
       _unnamed_$pcie_in_pcie4_cfg_mgmt_debug_access,
       _unnamed_$pcie_in_pcie4_cfg_mgmt_read,
       _unnamed_$pcie_in_pcie4_cfg_mgmt_read_write_done,
       _unnamed_$pcie_in_pcie4_cfg_mgmt_write,
       _unnamed_$pcie_in_pcie4_cfg_pm_aspm_l1_entry_reject,
       _unnamed_$pcie_in_pcie4_cfg_pm_aspm_tx_10s_entry_disable,
       _unnamed_$pcie_in_pcie4_cfg_status_err_cor_out,
       _unnamed_$pcie_in_pcie4_cfg_status_err_fatal_out,
       _unnamed_$pcie_in_pcie4_cfg_status_err_nonfatal_out,
       _unnamed_$pcie_in_pcie4_cfg_status_local_error_valid,
       _unnamed_$pcie_in_pcie4_cfg_status_phy_link_down,
       _unnamed_$pcie_in_pcie4_cfg_status_pl_status_change,
       _unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num_vld0,
       _unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num_vld1,
       _unnamed_$pcie_in_pcie4_cfg_status_rq_tag_vld0,
       _unnamed_$pcie_in_pcie4_cfg_status_rq_tag_vld1,
       _unnamed_$pcie_in_pcie4_phy_rdy_out,
       _unnamed_$pcie_in_pcie4_user_link_up,
       _unnamed_$pcie_in_s_axis_cq_tlast,
       _unnamed_$pcie_in_s_axis_cq_tready,
       _unnamed_$pcie_in_s_axis_cq_tvalid,
       _unnamed_$pcie_in_s_axis_rc_tlast,
       _unnamed_$pcie_in_s_axis_rc_tready,
       _unnamed_$pcie_in_s_axis_rc_tvalid,
       _unnamed_$status_lnk_up;

  // ports of submodule axis_xactor_f_data
  wire [760 : 0] axis_xactor_f_data$D_IN, axis_xactor_f_data$D_OUT;
  wire axis_xactor_f_data$CLR,
       axis_xactor_f_data$DEQ,
       axis_xactor_f_data$EMPTY_N,
       axis_xactor_f_data$ENQ,
       axis_xactor_f_data$FULL_N;

  // ports of submodule beatFF
  wire [31 : 0] beatFF$dD_OUT, beatFF$sD_IN;
  wire beatFF$dDEQ, beatFF$dEMPTY_N, beatFF$sENQ, beatFF$sFULL_N;

  // ports of submodule bridge
  reg [152 : 0] bridge$cq_tlps_put;
  wire [152 : 0] bridge$cc_tlps_get, bridge$rc_tlps_put, bridge$rq_tlps_get;
  wire [31 : 0] bridge$clocks_response_put, bridge$noc_in_beat_v;
  wire bridge$EN_cc_tlps_get,
       bridge$EN_clocks_request_get,
       bridge$EN_clocks_response_put,
       bridge$EN_cq_tlps_put,
       bridge$EN_msi_interrupt_clear,
       bridge$EN_rc_tlps_put,
       bridge$EN_rq_tlps_get,
       bridge$RDY_cc_tlps_get,
       bridge$RDY_clocks_request_get,
       bridge$RDY_clocks_response_put,
       bridge$RDY_cq_tlps_put,
       bridge$RDY_rc_tlps_put,
       bridge$RDY_rq_tlps_get,
       bridge$is_activated,
       bridge$noc_in_dst_rdy,
       bridge$noc_in_src_rdy_b,
       bridge$noc_out_dst_rdy_b,
       bridge$status_bluenoc_link_is_up_i,
       bridge$status_interrupts_enabled_i,
       bridge$status_memory_enabled_i,
       bridge$status_out_of_reset_i,
       bridge$status_pcie_link_is_up_i;

  // ports of submodule cc_gearbox_dCombinedReset
  wire cc_gearbox_dCombinedReset$RST_OUT;

  // ports of submodule cc_gearbox_dCrossedsReset
  wire cc_gearbox_dCrossedsReset$OUT_RST;

  // ports of submodule cc_gearbox_sCombinedReset
  wire cc_gearbox_sCombinedReset$RST_OUT;

  // ports of submodule cc_gearbox_sCrosseddReset
  wire cc_gearbox_sCrosseddReset$OUT_RST;

  // ports of submodule cq_gearbox_dCombinedReset
  wire cq_gearbox_dCombinedReset$RST_OUT;

  // ports of submodule cq_gearbox_dCrossedsReset
  wire cq_gearbox_dCrossedsReset$OUT_RST;

  // ports of submodule cq_gearbox_sCombinedReset
  wire cq_gearbox_sCombinedReset$RST_OUT;

  // ports of submodule cq_gearbox_sCrosseddReset
  wire cq_gearbox_sCrosseddReset$OUT_RST;

  // ports of submodule cq_in_buf
  wire [75 : 0] cq_in_buf$D_IN, cq_in_buf$D_OUT;
  wire cq_in_buf$CLR,
       cq_in_buf$DEQ,
       cq_in_buf$EMPTY_N,
       cq_in_buf$ENQ,
       cq_in_buf$FULL_N;

  // ports of submodule epReset125
  wire epReset125$OUT_RST;

  // ports of submodule fOut_f
  wire [31 : 0] fOut_f$D_IN, fOut_f$D_OUT;
  wire fOut_f$CLR, fOut_f$DEQ, fOut_f$EMPTY_N, fOut_f$ENQ, fOut_f$FULL_N;

  // ports of submodule network_status
  wire network_status$ASSERT_IN, network_status$OUT_RST;

  // ports of submodule rc_gearbox_dCombinedReset
  wire rc_gearbox_dCombinedReset$RST_OUT;

  // ports of submodule rc_gearbox_dCrossedsReset
  wire rc_gearbox_dCrossedsReset$OUT_RST;

  // ports of submodule rc_gearbox_sCombinedReset
  wire rc_gearbox_sCombinedReset$RST_OUT;

  // ports of submodule rc_gearbox_sCrosseddReset
  wire rc_gearbox_sCrosseddReset$OUT_RST;

  // ports of submodule rc_in_buf
  wire [75 : 0] rc_in_buf$D_IN, rc_in_buf$D_OUT;
  wire rc_in_buf$CLR,
       rc_in_buf$DEQ,
       rc_in_buf$EMPTY_N,
       rc_in_buf$ENQ,
       rc_in_buf$FULL_N;

  // ports of submodule rq_gearbox_dCombinedReset
  wire rq_gearbox_dCombinedReset$RST_OUT;

  // ports of submodule rq_gearbox_dCrossedsReset
  wire rq_gearbox_dCrossedsReset$OUT_RST;

  // ports of submodule rq_gearbox_sCombinedReset
  wire rq_gearbox_sCombinedReset$RST_OUT;

  // ports of submodule rq_gearbox_sCrosseddReset
  wire rq_gearbox_sCrosseddReset$OUT_RST;

  // ports of submodule user_reset_n
  wire user_reset_n$RESET_OUT;

  // rule scheduling signals
  wire CAN_FIRE_RL_always_accept_beat,
       CAN_FIRE_RL_cc_gearbox_dInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_cc_gearbox_launder_dInReset,
       CAN_FIRE_RL_cc_gearbox_launder_sInReset,
       CAN_FIRE_RL_cc_gearbox_sInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_cc_rl_data,
       CAN_FIRE_RL_cc_rl_fastclock,
       CAN_FIRE_RL_cc_rl_get_tlps,
       CAN_FIRE_RL_cc_rl_header,
       CAN_FIRE_RL_connect_data,
       CAN_FIRE_RL_connect_dst_rdy,
       CAN_FIRE_RL_connect_src_rdy,
       CAN_FIRE_RL_cq_gearbox_dInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_cq_gearbox_launder_dInReset,
       CAN_FIRE_RL_cq_gearbox_launder_sInReset,
       CAN_FIRE_RL_cq_gearbox_sInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_cq_mkConnectionGetPut,
       CAN_FIRE_RL_cq_rl_data_0,
       CAN_FIRE_RL_cq_rl_data_1_to_3,
       CAN_FIRE_RL_cq_rl_data_4,
       CAN_FIRE_RL_cq_rl_g_to_gearbox,
       CAN_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail,
       CAN_FIRE_RL_cq_rl_rd_header,
       CAN_FIRE_RL_cq_rl_slowclock,
       CAN_FIRE_RL_cq_rl_wr_header,
       CAN_FIRE_RL_cross_config_values,
       CAN_FIRE_RL_drive_status_bluenoc_link_up,
       CAN_FIRE_RL_drive_status_interrupts_enabled,
       CAN_FIRE_RL_drive_status_memory_enabled,
       CAN_FIRE_RL_drive_status_out_of_reset,
       CAN_FIRE_RL_drive_status_pcie_link_up,
       CAN_FIRE_RL_egress,
       CAN_FIRE_RL_fOut_update,
       CAN_FIRE_RL_field_clock_request,
       CAN_FIRE_RL_intr_ifc_ctl,
       CAN_FIRE_RL_rc_gearbox_dInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_rc_gearbox_launder_dInReset,
       CAN_FIRE_RL_rc_gearbox_launder_sInReset,
       CAN_FIRE_RL_rc_gearbox_sInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_rc_mkConnectionGetPut,
       CAN_FIRE_RL_rc_rl_data_a,
       CAN_FIRE_RL_rc_rl_g_to_gearbox,
       CAN_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail,
       CAN_FIRE_RL_rc_rl_header,
       CAN_FIRE_RL_register_config_values,
       CAN_FIRE_RL_reset_block_if_network_is_inactive,
       CAN_FIRE_RL_rq_gearbox_dInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_rq_gearbox_launder_dInReset,
       CAN_FIRE_RL_rq_gearbox_launder_sInReset,
       CAN_FIRE_RL_rq_gearbox_sInReset_pre_isResetAssertedUpdate,
       CAN_FIRE_RL_rq_rl_data_a,
       CAN_FIRE_RL_rq_rl_data_b,
       CAN_FIRE_RL_rq_rl_data_c,
       CAN_FIRE_RL_rq_rl_fastclock,
       CAN_FIRE_RL_rq_rl_get_tlps,
       CAN_FIRE_RL_rq_rl_header,
       CAN_FIRE_RL_xferBeat,
       CAN_FIRE_axi_in_m_tvalid,
       CAN_FIRE_pcie_in_m_axis_cc_m_tready,
       CAN_FIRE_pcie_in_m_axis_rq_m_tready,
       CAN_FIRE_pcie_in_pcie4_cfg_control_bus_number,
       CAN_FIRE_pcie_in_pcie4_cfg_control_flr_in_process,
       CAN_FIRE_pcie_in_pcie4_cfg_control_hot_reset_out,
       CAN_FIRE_pcie_in_pcie4_cfg_control_power_state_change_interrupt,
       CAN_FIRE_pcie_in_pcie4_cfg_control_vf_flr_in_process,
       CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msi_fail,
       CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msi_sent,
       CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_msix_enable,
       CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_msix_mask,
       CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status,
       CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vf_enable,
       CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vf_mask,
       CAN_FIRE_pcie_in_pcie4_cfg_fc_cpld,
       CAN_FIRE_pcie_in_pcie4_cfg_fc_cplh,
       CAN_FIRE_pcie_in_pcie4_cfg_fc_npd,
       CAN_FIRE_pcie_in_pcie4_cfg_fc_nph,
       CAN_FIRE_pcie_in_pcie4_cfg_fc_pd,
       CAN_FIRE_pcie_in_pcie4_cfg_fc_ph,
       CAN_FIRE_pcie_in_pcie4_cfg_interrupt_sent,
       CAN_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received,
       CAN_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received_data,
       CAN_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received_type,
       CAN_FIRE_pcie_in_pcie4_cfg_mesg_tx_transmit_done,
       CAN_FIRE_pcie_in_pcie4_cfg_mgmt_read_data,
       CAN_FIRE_pcie_in_pcie4_cfg_mgmt_read_write_done,
       CAN_FIRE_pcie_in_pcie4_cfg_status_current_speed,
       CAN_FIRE_pcie_in_pcie4_cfg_status_err_cor_out,
       CAN_FIRE_pcie_in_pcie4_cfg_status_err_fatal_out,
       CAN_FIRE_pcie_in_pcie4_cfg_status_err_nonfatal_out,
       CAN_FIRE_pcie_in_pcie4_cfg_status_function_status,
       CAN_FIRE_pcie_in_pcie4_cfg_status_funstion_power_state,
       CAN_FIRE_pcie_in_pcie4_cfg_status_link_power_state,
       CAN_FIRE_pcie_in_pcie4_cfg_status_local_error_out,
       CAN_FIRE_pcie_in_pcie4_cfg_status_local_error_valid,
       CAN_FIRE_pcie_in_pcie4_cfg_status_ltssm_state,
       CAN_FIRE_pcie_in_pcie4_cfg_status_max_payload,
       CAN_FIRE_pcie_in_pcie4_cfg_status_max_read_req,
       CAN_FIRE_pcie_in_pcie4_cfg_status_negotiated_width,
       CAN_FIRE_pcie_in_pcie4_cfg_status_obff_enable,
       CAN_FIRE_pcie_in_pcie4_cfg_status_pcie_cq_np_req_count,
       CAN_FIRE_pcie_in_pcie4_cfg_status_phy_link_down,
       CAN_FIRE_pcie_in_pcie4_cfg_status_phy_link_status,
       CAN_FIRE_pcie_in_pcie4_cfg_status_pl_status_change,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rcb_status,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num0,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num1,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num_vld0,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num_vld1,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag0,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag1,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag_av,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag_vld0,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag_vld1,
       CAN_FIRE_pcie_in_pcie4_cfg_status_rx_pm_state,
       CAN_FIRE_pcie_in_pcie4_cfg_status_tfc_npd_av,
       CAN_FIRE_pcie_in_pcie4_cfg_status_tfc_nph_av,
       CAN_FIRE_pcie_in_pcie4_cfg_status_tph_requester_enable,
       CAN_FIRE_pcie_in_pcie4_cfg_status_tph_st_mode,
       CAN_FIRE_pcie_in_pcie4_cfg_status_tx_pm_state,
       CAN_FIRE_pcie_in_pcie4_cfg_status_vf_power_state,
       CAN_FIRE_pcie_in_pcie4_cfg_status_vf_status,
       CAN_FIRE_pcie_in_pcie4_cfg_status_vf_tph_requester_enable,
       CAN_FIRE_pcie_in_pcie4_cfg_status_vf_tph_st_mode,
       CAN_FIRE_pcie_in_pcie4_phy_rdy_out,
       CAN_FIRE_pcie_in_pcie4_user_link_up,
       CAN_FIRE_pcie_in_s_axis_cq_m_tvalid,
       CAN_FIRE_pcie_in_s_axis_rc_m_tvalid,
       CAN_FIRE_tv_switch,
       WILL_FIRE_RL_always_accept_beat,
       WILL_FIRE_RL_cc_gearbox_dInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_cc_gearbox_launder_dInReset,
       WILL_FIRE_RL_cc_gearbox_launder_sInReset,
       WILL_FIRE_RL_cc_gearbox_sInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_cc_rl_data,
       WILL_FIRE_RL_cc_rl_fastclock,
       WILL_FIRE_RL_cc_rl_get_tlps,
       WILL_FIRE_RL_cc_rl_header,
       WILL_FIRE_RL_connect_data,
       WILL_FIRE_RL_connect_dst_rdy,
       WILL_FIRE_RL_connect_src_rdy,
       WILL_FIRE_RL_cq_gearbox_dInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_cq_gearbox_launder_dInReset,
       WILL_FIRE_RL_cq_gearbox_launder_sInReset,
       WILL_FIRE_RL_cq_gearbox_sInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_cq_mkConnectionGetPut,
       WILL_FIRE_RL_cq_rl_data_0,
       WILL_FIRE_RL_cq_rl_data_1_to_3,
       WILL_FIRE_RL_cq_rl_data_4,
       WILL_FIRE_RL_cq_rl_g_to_gearbox,
       WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail,
       WILL_FIRE_RL_cq_rl_rd_header,
       WILL_FIRE_RL_cq_rl_slowclock,
       WILL_FIRE_RL_cq_rl_wr_header,
       WILL_FIRE_RL_cross_config_values,
       WILL_FIRE_RL_drive_status_bluenoc_link_up,
       WILL_FIRE_RL_drive_status_interrupts_enabled,
       WILL_FIRE_RL_drive_status_memory_enabled,
       WILL_FIRE_RL_drive_status_out_of_reset,
       WILL_FIRE_RL_drive_status_pcie_link_up,
       WILL_FIRE_RL_egress,
       WILL_FIRE_RL_fOut_update,
       WILL_FIRE_RL_field_clock_request,
       WILL_FIRE_RL_intr_ifc_ctl,
       WILL_FIRE_RL_rc_gearbox_dInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_rc_gearbox_launder_dInReset,
       WILL_FIRE_RL_rc_gearbox_launder_sInReset,
       WILL_FIRE_RL_rc_gearbox_sInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_rc_mkConnectionGetPut,
       WILL_FIRE_RL_rc_rl_data_a,
       WILL_FIRE_RL_rc_rl_g_to_gearbox,
       WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail,
       WILL_FIRE_RL_rc_rl_header,
       WILL_FIRE_RL_register_config_values,
       WILL_FIRE_RL_reset_block_if_network_is_inactive,
       WILL_FIRE_RL_rq_gearbox_dInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_rq_gearbox_launder_dInReset,
       WILL_FIRE_RL_rq_gearbox_launder_sInReset,
       WILL_FIRE_RL_rq_gearbox_sInReset_pre_isResetAssertedUpdate,
       WILL_FIRE_RL_rq_rl_data_a,
       WILL_FIRE_RL_rq_rl_data_b,
       WILL_FIRE_RL_rq_rl_data_c,
       WILL_FIRE_RL_rq_rl_fastclock,
       WILL_FIRE_RL_rq_rl_get_tlps,
       WILL_FIRE_RL_rq_rl_header,
       WILL_FIRE_RL_xferBeat,
       WILL_FIRE_axi_in_m_tvalid,
       WILL_FIRE_pcie_in_m_axis_cc_m_tready,
       WILL_FIRE_pcie_in_m_axis_rq_m_tready,
       WILL_FIRE_pcie_in_pcie4_cfg_control_bus_number,
       WILL_FIRE_pcie_in_pcie4_cfg_control_flr_in_process,
       WILL_FIRE_pcie_in_pcie4_cfg_control_hot_reset_out,
       WILL_FIRE_pcie_in_pcie4_cfg_control_power_state_change_interrupt,
       WILL_FIRE_pcie_in_pcie4_cfg_control_vf_flr_in_process,
       WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msi_fail,
       WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msi_sent,
       WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_msix_enable,
       WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_msix_mask,
       WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status,
       WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vf_enable,
       WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vf_mask,
       WILL_FIRE_pcie_in_pcie4_cfg_fc_cpld,
       WILL_FIRE_pcie_in_pcie4_cfg_fc_cplh,
       WILL_FIRE_pcie_in_pcie4_cfg_fc_npd,
       WILL_FIRE_pcie_in_pcie4_cfg_fc_nph,
       WILL_FIRE_pcie_in_pcie4_cfg_fc_pd,
       WILL_FIRE_pcie_in_pcie4_cfg_fc_ph,
       WILL_FIRE_pcie_in_pcie4_cfg_interrupt_sent,
       WILL_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received,
       WILL_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received_data,
       WILL_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received_type,
       WILL_FIRE_pcie_in_pcie4_cfg_mesg_tx_transmit_done,
       WILL_FIRE_pcie_in_pcie4_cfg_mgmt_read_data,
       WILL_FIRE_pcie_in_pcie4_cfg_mgmt_read_write_done,
       WILL_FIRE_pcie_in_pcie4_cfg_status_current_speed,
       WILL_FIRE_pcie_in_pcie4_cfg_status_err_cor_out,
       WILL_FIRE_pcie_in_pcie4_cfg_status_err_fatal_out,
       WILL_FIRE_pcie_in_pcie4_cfg_status_err_nonfatal_out,
       WILL_FIRE_pcie_in_pcie4_cfg_status_function_status,
       WILL_FIRE_pcie_in_pcie4_cfg_status_funstion_power_state,
       WILL_FIRE_pcie_in_pcie4_cfg_status_link_power_state,
       WILL_FIRE_pcie_in_pcie4_cfg_status_local_error_out,
       WILL_FIRE_pcie_in_pcie4_cfg_status_local_error_valid,
       WILL_FIRE_pcie_in_pcie4_cfg_status_ltssm_state,
       WILL_FIRE_pcie_in_pcie4_cfg_status_max_payload,
       WILL_FIRE_pcie_in_pcie4_cfg_status_max_read_req,
       WILL_FIRE_pcie_in_pcie4_cfg_status_negotiated_width,
       WILL_FIRE_pcie_in_pcie4_cfg_status_obff_enable,
       WILL_FIRE_pcie_in_pcie4_cfg_status_pcie_cq_np_req_count,
       WILL_FIRE_pcie_in_pcie4_cfg_status_phy_link_down,
       WILL_FIRE_pcie_in_pcie4_cfg_status_phy_link_status,
       WILL_FIRE_pcie_in_pcie4_cfg_status_pl_status_change,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rcb_status,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num0,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num1,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num_vld0,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num_vld1,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag0,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag1,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag_av,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag_vld0,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag_vld1,
       WILL_FIRE_pcie_in_pcie4_cfg_status_rx_pm_state,
       WILL_FIRE_pcie_in_pcie4_cfg_status_tfc_npd_av,
       WILL_FIRE_pcie_in_pcie4_cfg_status_tfc_nph_av,
       WILL_FIRE_pcie_in_pcie4_cfg_status_tph_requester_enable,
       WILL_FIRE_pcie_in_pcie4_cfg_status_tph_st_mode,
       WILL_FIRE_pcie_in_pcie4_cfg_status_tx_pm_state,
       WILL_FIRE_pcie_in_pcie4_cfg_status_vf_power_state,
       WILL_FIRE_pcie_in_pcie4_cfg_status_vf_status,
       WILL_FIRE_pcie_in_pcie4_cfg_status_vf_tph_requester_enable,
       WILL_FIRE_pcie_in_pcie4_cfg_status_vf_tph_st_mode,
       WILL_FIRE_pcie_in_pcie4_phy_rdy_out,
       WILL_FIRE_pcie_in_pcie4_user_link_up,
       WILL_FIRE_pcie_in_s_axis_cq_m_tvalid,
       WILL_FIRE_pcie_in_s_axis_rc_m_tvalid,
       WILL_FIRE_tv_switch;

  // inputs to muxes for submodule ports
  wire [152 : 0] MUX_bridge$cq_tlps_put_1__VAL_1,
		 MUX_bridge$cq_tlps_put_1__VAL_2,
		 MUX_bridge$cq_tlps_put_1__VAL_3,
		 MUX_bridge$cq_tlps_put_1__VAL_4,
		 MUX_bridge$rc_tlps_put_1__VAL_1,
		 MUX_bridge$rc_tlps_put_1__VAL_2;
  wire [149 : 0] MUX_rq_gearbox_block0$_write_1__VAL_1,
		 MUX_rq_gearbox_block0$_write_1__VAL_2,
		 MUX_rq_gearbox_block0$_write_1__VAL_3,
		 MUX_rq_gearbox_block0$_write_1__VAL_4;
  wire [133 : 0] MUX_cc_gearbox_block0$_write_1__VAL_1,
		 MUX_cc_gearbox_block0$_write_1__VAL_2;
  wire [75 : 0] MUX_cq_gearbox_elem_0$_write_1__VAL_1,
		MUX_cq_gearbox_elem_0$_write_1__VAL_2,
		MUX_cq_gearbox_elem_1$_write_1__VAL_1,
		MUX_cq_gearbox_elem_1$_write_1__VAL_2,
		MUX_cq_gearbox_elem_2$_write_1__VAL_1,
		MUX_cq_gearbox_elem_2$_write_1__VAL_2,
		MUX_cq_gearbox_elem_3$_write_1__VAL_1,
		MUX_cq_gearbox_elem_3$_write_1__VAL_2,
		MUX_rc_gearbox_elem_0$_write_1__VAL_1,
		MUX_rc_gearbox_elem_0$_write_1__VAL_2,
		MUX_rc_gearbox_elem_1$_write_1__VAL_1,
		MUX_rc_gearbox_elem_1$_write_1__VAL_2,
		MUX_rc_gearbox_elem_2$_write_1__VAL_1,
		MUX_rc_gearbox_elem_2$_write_1__VAL_2,
		MUX_rc_gearbox_elem_3$_write_1__VAL_1,
		MUX_rc_gearbox_elem_3$_write_1__VAL_2;
  wire [32 : 0] MUX_rq_rg_mdw$write_1__VAL_1, MUX_rq_rg_mdw$write_1__VAL_3;
  wire [10 : 0] MUX_cc_rg_dwcount$write_1__VAL_1,
		MUX_cc_rg_dwcount$write_1__VAL_2,
		MUX_cq_rg_dwcount$write_1__VAL_1,
		MUX_cq_rg_dwcount$write_1__VAL_2,
		MUX_rc_rg_dwcount$write_1__VAL_1,
		MUX_rc_rg_dwcount$write_1__VAL_2,
		MUX_rq_rg_dwcount$write_1__VAL_1,
		MUX_rq_rg_dwcount$write_1__VAL_2,
		MUX_rq_rg_dwcount$write_1__VAL_3;
  wire MUX_cc_gearbox_block0$_write_1__SEL_1,
       MUX_cc_gearbox_block1$_write_1__SEL_1,
       MUX_cq_rg_pad_odd_tail$write_1__VAL_1,
       MUX_rc_gearbox_elem0_status_0$_write_1__SEL_1,
       MUX_rc_gearbox_elem1_status_1$_write_1__SEL_1,
       MUX_rc_gearbox_elem_0$_write_1__SEL_1,
       MUX_rc_gearbox_write_block$write_1__SEL_1,
       MUX_rc_rg_pad_odd_tail$write_1__VAL_1,
       MUX_rq_gearbox_block0$_write_1__SEL_1,
       MUX_rq_gearbox_block0$_write_1__SEL_2,
       MUX_rq_gearbox_block0$_write_1__SEL_3,
       MUX_rq_gearbox_block0$_write_1__SEL_4,
       MUX_rq_gearbox_block1$_write_1__SEL_1,
       MUX_rq_gearbox_block1$_write_1__SEL_2,
       MUX_rq_gearbox_block1$_write_1__SEL_3,
       MUX_rq_gearbox_block1$_write_1__SEL_4;

  // remaining internal signals
  reg [61 : 0] _theResult___snd_address__h34981;
  reg [31 : 0] x1__h72615;
  reg [15 : 0] tlp16_be__h12902, tlp16_be__h15546, tlp16_be__h58016;
  reg [4 : 0] IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d206;
  reg [3 : 0] CASE_rq_f_tlps_rv_BITS_126_TO_125_0_0_1_0_2_1__ETC__q1;
  reg [1 : 0] IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d202,
	      n_keep__h38472;
  wire [151 : 0] IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d176;
  wire [127 : 0] tlp16_data__h12903,
		 tlp16_data__h14295,
		 tlp16_data__h15547,
		 tlp16_data__h18195,
		 tlp16_data__h56541,
		 tlp16_data__h58017;
  wire [75 : 0] IF_cq_gearbox_elem0_status_1__read__5_EQ_cq_ge_ETC___d72,
		IF_cq_gearbox_elem1_status_1__read__6_EQ_cq_ge_ETC___d79,
		IF_rc_gearbox_elem0_status_1__read__90_EQ_rc_g_ETC___d727,
		IF_rc_gearbox_elem1_status_1__read__01_EQ_rc_g_ETC___d734;
  wire [63 : 0] IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221,
		IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832,
		IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842,
		data__h10677,
		data__h10753,
		data__h54290,
		data__h54382,
		data__h55133,
		data__h55205,
		data__h9812,
		data__h9910,
		n_data__h25159,
		n_data__h26211,
		n_data__h26795,
		n_data__h28189,
		n_data__h37007,
		n_data__h37299,
		n_data__h37935,
		n_data__h38470,
		n_data__h39881,
		n_data__h41940,
		n_data__h43340;
  wire [61 : 0] _theResult___snd_address__h34967;
  wire [31 : 0] axis_xactor_f_dataD_OUT_BITS_760_TO_729_PLUS__ETC__q2,
		b__h23914,
		x1__h71759;
  wire [15 : 0] tlp16_be__h56540;
  wire [12 : 0] a_bytecount__h23930;
  wire [10 : 0] NOT_cq_gearbox_elem0_status_1__read__5_EQ_cq_g_ETC___d111,
		NOT_cq_gearbox_elem1_status_1__read__6_EQ_cq_g_ETC___d134,
		NOT_rc_gearbox_elem0_status_1__read__90_EQ_rc__ETC___d770,
		NOT_rc_gearbox_elem1_status_1__read__01_EQ_rc__ETC___d793,
		_theResult___snd_dwcount__h34980,
		rq_rg_dwcount_56_MINUS_4___d598,
		x__h23896;
  wire [9 : 0] IF_cq_f_cq_rv_port0__read__78_BITS_98_TO_88_93_ETC___d211;
  wire [6 : 0] tlp16_hit__h12901;
  wire [1 : 0] keep__h31975,
	       keep__h32070,
	       keep__h47157,
	       keep__h47266,
	       n_keep__h26796,
	       n_keep__h28190,
	       n_keep__h41942,
	       n_keep__h43342,
	       x__h10877,
	       x__h11230,
	       x__h24098,
	       x__h24519,
	       x__h29836,
	       x__h30184,
	       x__h35946,
	       x__h36367,
	       x__h45005,
	       x__h45353,
	       x__h49572,
	       x__h50000,
	       x__h5071,
	       x__h5503,
	       x__h55382,
	       x__h55735;
  wire IF_cc_gearbox_read_block_04_THEN_IF_NOT_cc_gea_ETC___d445,
       IF_rc_gearbox_read_block_96_THEN_NOT_rc_gearbo_ETC___d885,
       IF_rq_gearbox_read_block_19_THEN_IF_NOT_rq_gea_ETC___d660,
       NOT_cc_gearbox_read_block_04_05_AND_NOT_cc_gea_ETC___d427,
       NOT_cc_gearbox_write_block_05_06_AND_cc_gearbo_ETC___d326,
       NOT_cq_gearbox_read_block_37_38_AND_NOT_cq_gea_ETC___d162,
       NOT_cq_gearbox_write_block_3_4_AND_NOT_NOT_cq__ETC___d60,
       NOT_rc_gearbox_read_block_96_97_AND_NOT_rc_gea_ETC___d821,
       NOT_rc_gearbox_write_block_88_89_AND_NOT_NOT_r_ETC___d715,
       NOT_rq_gearbox_read_block_19_20_AND_NOT_rq_gea_ETC___d642,
       NOT_rq_gearbox_write_block_71_72_AND_rq_gearbo_ETC___d492,
       _dor1cc_gearbox_block0_status$EN__write,
       _dor1cc_gearbox_block1_status$EN__write,
       _dor1cq_gearbox_elem0_status_0$EN__write,
       _dor1cq_gearbox_elem0_status_1$EN__write,
       _dor1cq_gearbox_elem1_status_0$EN__write,
       _dor1cq_gearbox_elem1_status_1$EN__write,
       _dor1cq_gearbox_write_block$EN_write,
       _dor1rc_gearbox_block0_status$EN__write,
       _dor1rc_gearbox_block1_status$EN__write,
       _dor1rq_gearbox_block0_status$EN__write,
       _dor1rq_gearbox_block1_status$EN__write,
       cc_gearbox_elem0_status_0__read__09_EQ_cc_gear_ETC___d410,
       cc_gearbox_elem0_status_1__read__06_EQ_cc_gear_ETC___d408,
       cc_gearbox_elem1_status_0__read__18_EQ_cc_gear_ETC___d419,
       cc_gearbox_elem1_status_1__read__15_EQ_cc_gear_ETC___d417,
       cc_rg_dwcount_70_ULE_2___d380,
       cnt_32_EQ_vecSize_33___d934,
       cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40,
       cq_gearbox_elem0_status_1__read__5_EQ_cq_gearb_ETC___d37,
       cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51,
       cq_gearbox_elem1_status_1__read__6_EQ_cq_gearb_ETC___d48,
       rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695,
       rc_gearbox_elem0_status_1__read__90_EQ_rc_gear_ETC___d692,
       rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706,
       rc_gearbox_elem1_status_1__read__01_EQ_rc_gear_ETC___d703,
       rc_in_buf_i_notEmpty__81_AND_NOT_rc_rg_in_pack_ETC___d717,
       rc_rg_in_packet_82_OR_rc_in_buf_first__84_BIT__ETC___d739,
       rq_gearbox_elem0_status_0__read__24_EQ_rq_gear_ETC___d625,
       rq_gearbox_elem0_status_1__read__21_EQ_rq_gear_ETC___d623,
       rq_gearbox_elem1_status_0__read__33_EQ_rq_gear_ETC___d634,
       rq_gearbox_elem1_status_1__read__30_EQ_rq_gear_ETC___d632,
       rq_rg_dwcount_56_ULE_2___d610,
       rq_rg_dwcount_56_ULE_4___d583;

  // action method axi_in_m_tvalid
  assign CAN_FIRE_axi_in_m_tvalid = 1'd1 ;
  assign WILL_FIRE_axi_in_m_tvalid = 1'd1 ;

  // value method axi_in_m_tready
  assign axi_in_tready = axis_xactor_f_data$FULL_N || !tracesOn ;

  // value method pcie_in_m_axis_cc_m_tvalid
  assign m_axis_cc_tvalid = _unnamed_$pcie_in_m_axis_cc_tvalid ;

  // value method pcie_in_m_axis_cc_m_tdata
  assign m_axis_cc_tdata = _unnamed_$pcie_in_m_axis_cc_tdata ;

  // value method pcie_in_m_axis_cc_m_tkeep
  assign m_axis_cc_tkeep = _unnamed_$pcie_in_m_axis_cc_tkeep ;

  // value method pcie_in_m_axis_cc_m_tlast
  assign m_axis_cc_tlast = _unnamed_$pcie_in_m_axis_cc_tlast ;

  // value method pcie_in_m_axis_cc_m_tuser
  assign m_axis_cc_tuser = _unnamed_$pcie_in_m_axis_cc_tuser ;

  // action method pcie_in_m_axis_cc_m_tready
  assign CAN_FIRE_pcie_in_m_axis_cc_m_tready = 1'd1 ;
  assign WILL_FIRE_pcie_in_m_axis_cc_m_tready = 1'd1 ;

  // value method pcie_in_m_axis_rq_m_tvalid
  assign m_axis_rq_tvalid = _unnamed_$pcie_in_m_axis_rq_tvalid ;

  // value method pcie_in_m_axis_rq_m_tdata
  assign m_axis_rq_tdata = _unnamed_$pcie_in_m_axis_rq_tdata ;

  // value method pcie_in_m_axis_rq_m_tkeep
  assign m_axis_rq_tkeep = _unnamed_$pcie_in_m_axis_rq_tkeep ;

  // value method pcie_in_m_axis_rq_m_tlast
  assign m_axis_rq_tlast = _unnamed_$pcie_in_m_axis_rq_tlast ;

  // value method pcie_in_m_axis_rq_m_tuser
  assign m_axis_rq_tuser = _unnamed_$pcie_in_m_axis_rq_tuser ;

  // action method pcie_in_m_axis_rq_m_tready
  assign CAN_FIRE_pcie_in_m_axis_rq_m_tready = 1'd1 ;
  assign WILL_FIRE_pcie_in_m_axis_rq_m_tready = 1'd1 ;

  // action method pcie_in_s_axis_cq_m_tvalid
  assign CAN_FIRE_pcie_in_s_axis_cq_m_tvalid = 1'd1 ;
  assign WILL_FIRE_pcie_in_s_axis_cq_m_tvalid = 1'd1 ;

  // value method pcie_in_s_axis_cq_m_tready
  assign s_axis_cq_tready = _unnamed_$pcie_in_s_axis_cq_tready ;

  // action method pcie_in_s_axis_rc_m_tvalid
  assign CAN_FIRE_pcie_in_s_axis_rc_m_tvalid = 1'd1 ;
  assign WILL_FIRE_pcie_in_s_axis_rc_m_tvalid = 1'd1 ;

  // value method pcie_in_s_axis_rc_m_tready
  assign s_axis_rc_tready = _unnamed_$pcie_in_s_axis_rc_tready ;

  // value method pcie_in_pcie4_cfg_mgmt_addr
  assign pcie4_cfg_mgmt_addr = _unnamed_$pcie_in_pcie4_cfg_mgmt_addr ;

  // value method pcie_in_pcie4_cfg_mgmt_byte_enable
  assign pcie4_cfg_mgmt_byte_enable =
	     _unnamed_$pcie_in_pcie4_cfg_mgmt_byte_enable ;

  // value method pcie_in_pcie4_cfg_mgmt_debug_access
  assign pcie4_cfg_mgmt_debug_access =
	     _unnamed_$pcie_in_pcie4_cfg_mgmt_debug_access ;

  // value method pcie_in_pcie4_cfg_mgmt_function_number
  assign pcie4_cfg_mgmt_function_number =
	     _unnamed_$pcie_in_pcie4_cfg_mgmt_function_number ;

  // action method pcie_in_pcie4_cfg_mgmt_read_data
  assign CAN_FIRE_pcie_in_pcie4_cfg_mgmt_read_data = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_mgmt_read_data = 1'd1 ;

  // value method pcie_in_pcie4_cfg_mgmt_read
  assign pcie4_cfg_mgmt_read = _unnamed_$pcie_in_pcie4_cfg_mgmt_read ;

  // action method pcie_in_pcie4_cfg_mgmt_read_write_done
  assign CAN_FIRE_pcie_in_pcie4_cfg_mgmt_read_write_done = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_mgmt_read_write_done = 1'd1 ;

  // value method pcie_in_pcie4_cfg_mgmt_write_data
  assign pcie4_cfg_mgmt_write_data =
	     _unnamed_$pcie_in_pcie4_cfg_mgmt_write_data ;

  // value method pcie_in_pcie4_cfg_mgmt_write
  assign pcie4_cfg_mgmt_write = _unnamed_$pcie_in_pcie4_cfg_mgmt_write ;

  // value method pcie_in_pcie4_cfg_pm_aspm_l1_entry_reject
  assign pcie4_cfg_pm_aspm_l1_entry_reject =
	     _unnamed_$pcie_in_pcie4_cfg_pm_aspm_l1_entry_reject ;

  // value method pcie_in_pcie4_cfg_pm_aspm_tx_10s_entry_disable
  assign pcie4_cfg_pm_aspm_tx_10s_entry_disable =
	     _unnamed_$pcie_in_pcie4_cfg_pm_aspm_tx_10s_entry_disable ;

  // value method pcie_in_pcie4_cfg_external_msix_msix_address
  assign pcie4_cfg_external_msix_msix_address =
	     _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_address ;

  // value method pcie_in_pcie4_cfg_external_msix_msix_data
  assign pcie4_cfg_external_msix_msix_data =
	     _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_data ;

  // action method pcie_in_pcie4_cfg_external_msix_msix_msix_enable
  assign CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_msix_enable = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_msix_enable = 1'd1 ;

  // value method pcie_in_pcie4_cfg_external_msix_msix_intrpt
  assign pcie4_cfg_external_msix_msix_intrpt =
	     _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_intrpt ;

  // action method pcie_in_pcie4_cfg_external_msix_msix_msix_mask
  assign CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_msix_mask = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_msix_mask = 1'd1 ;

  // value method pcie_in_pcie4_cfg_external_msix_msix_vec_pending
  assign pcie4_cfg_external_msix_msix_vec_pending =
	     _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vec_pending ;

  // action method pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status
  assign CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status =
	     1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status =
	     1'd1 ;

  // action method pcie_in_pcie4_cfg_external_msix_msix_vf_enable
  assign CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vf_enable = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vf_enable = 1'd1 ;

  // action method pcie_in_pcie4_cfg_external_msix_msix_vf_mask
  assign CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vf_mask = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msix_vf_mask = 1'd1 ;

  // action method pcie_in_pcie4_cfg_external_msix_msi_fail
  assign CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msi_fail = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msi_fail = 1'd1 ;

  // value method pcie_in_pcie4_cfg_external_msix_msi_function_number
  assign pcie4_cfg_external_msix_msi_function_number =
	     _unnamed_$pcie_in_pcie4_cfg_external_msix_msi_function_number ;

  // action method pcie_in_pcie4_cfg_external_msix_msi_sent
  assign CAN_FIRE_pcie_in_pcie4_cfg_external_msix_msi_sent = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_external_msix_msi_sent = 1'd1 ;

  // value method pcie_in_pcie4_cfg_interrupt_intrpt
  assign pcie4_cfg_interrupt_intrpt =
	     _unnamed_$pcie_in_pcie4_cfg_interrupt_intrpt ;

  // value method pcie_in_pcie4_cfg_interrupt_pending
  assign pcie4_cfg_interrupt_pending =
	     _unnamed_$pcie_in_pcie4_cfg_interrupt_pending ;

  // action method pcie_in_pcie4_cfg_interrupt_sent
  assign CAN_FIRE_pcie_in_pcie4_cfg_interrupt_sent = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_interrupt_sent = 1'd1 ;

  // action method pcie_in_pcie4_cfg_control_bus_number
  assign CAN_FIRE_pcie_in_pcie4_cfg_control_bus_number = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_control_bus_number = 1'd1 ;

  // value method pcie_in_pcie4_cfg_control_config_space_enable
  assign pcie4_cfg_control_config_space_enable =
	     _unnamed_$pcie_in_pcie4_cfg_control_config_space_enable ;

  // value method pcie_in_pcie4_cfg_control_ds_bus_number
  assign pcie4_cfg_control_ds_bus_number =
	     _unnamed_$pcie_in_pcie4_cfg_control_ds_bus_number ;

  // value method pcie_in_pcie4_cfg_control_ds_device_number
  assign pcie4_cfg_control_ds_device_number =
	     _unnamed_$pcie_in_pcie4_cfg_control_ds_device_number ;

  // value method pcie_in_pcie4_cfg_control_ds_port_number
  assign pcie4_cfg_control_ds_port_number =
	     _unnamed_$pcie_in_pcie4_cfg_control_ds_port_number ;

  // value method pcie_in_pcie4_cfg_control_dsn
  assign pcie4_cfg_control_dsn = _unnamed_$pcie_in_pcie4_cfg_control_dsn ;

  // value method pcie_in_pcie4_cfg_control_err_cor_in
  assign pcie4_cfg_control_err_cor_in =
	     _unnamed_$pcie_in_pcie4_cfg_control_err_cor_in ;

  // value method pcie_in_pcie4_cfg_control_err_uncor_in
  assign pcie4_cfg_control_err_uncor_in =
	     _unnamed_$pcie_in_pcie4_cfg_control_err_uncor_in ;

  // value method pcie_in_pcie4_cfg_control_flr_done
  assign pcie4_cfg_control_flr_done =
	     _unnamed_$pcie_in_pcie4_cfg_control_flr_done ;

  // action method pcie_in_pcie4_cfg_control_flr_in_process
  assign CAN_FIRE_pcie_in_pcie4_cfg_control_flr_in_process = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_control_flr_in_process = 1'd1 ;

  // value method pcie_in_pcie4_cfg_control_hot_reset_in
  assign pcie4_cfg_control_hot_reset_in =
	     _unnamed_$pcie_in_pcie4_cfg_control_hot_reset_in ;

  // action method pcie_in_pcie4_cfg_control_hot_reset_out
  assign CAN_FIRE_pcie_in_pcie4_cfg_control_hot_reset_out = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_control_hot_reset_out = 1'd1 ;

  // value method pcie_in_pcie4_cfg_control_link_training_enable
  assign pcie4_cfg_control_link_training_enable =
	     _unnamed_$pcie_in_pcie4_cfg_control_link_training_enable ;

  // value method pcie_in_pcie4_cfg_control_power_state_change_ack
  assign pcie4_cfg_control_power_state_change_ack =
	     _unnamed_$pcie_in_pcie4_cfg_control_power_state_change_ack ;

  // action method pcie_in_pcie4_cfg_control_power_state_change_interrupt
  assign CAN_FIRE_pcie_in_pcie4_cfg_control_power_state_change_interrupt =
	     1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_control_power_state_change_interrupt =
	     1'd1 ;

  // value method pcie_in_pcie4_cfg_control_req_pm_transition_l23_ready
  assign pcie4_cfg_control_req_pm_transition_l23_ready =
	     _unnamed_$pcie_in_pcie4_cfg_control_req_pm_transition_l23_ready ;

  // value method pcie_in_pcie4_cfg_control_vf_flr_done
  assign pcie4_cfg_control_vf_flr_done =
	     _unnamed_$pcie_in_pcie4_cfg_control_vf_flr_done ;

  // value method pcie_in_pcie4_cfg_control_vf_flr_func_num
  assign pcie4_cfg_control_vf_flr_func_num =
	     _unnamed_$pcie_in_pcie4_cfg_control_vf_flr_func_num ;

  // action method pcie_in_pcie4_cfg_control_vf_flr_in_process
  assign CAN_FIRE_pcie_in_pcie4_cfg_control_vf_flr_in_process = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_control_vf_flr_in_process = 1'd1 ;

  // action method pcie_in_pcie4_cfg_fc_cpld
  assign CAN_FIRE_pcie_in_pcie4_cfg_fc_cpld = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_fc_cpld = 1'd1 ;

  // action method pcie_in_pcie4_cfg_fc_cplh
  assign CAN_FIRE_pcie_in_pcie4_cfg_fc_cplh = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_fc_cplh = 1'd1 ;

  // action method pcie_in_pcie4_cfg_fc_npd
  assign CAN_FIRE_pcie_in_pcie4_cfg_fc_npd = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_fc_npd = 1'd1 ;

  // action method pcie_in_pcie4_cfg_fc_nph
  assign CAN_FIRE_pcie_in_pcie4_cfg_fc_nph = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_fc_nph = 1'd1 ;

  // action method pcie_in_pcie4_cfg_fc_pd
  assign CAN_FIRE_pcie_in_pcie4_cfg_fc_pd = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_fc_pd = 1'd1 ;

  // action method pcie_in_pcie4_cfg_fc_ph
  assign CAN_FIRE_pcie_in_pcie4_cfg_fc_ph = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_fc_ph = 1'd1 ;

  // value method pcie_in_pcie4_cfg_fc_sel
  assign pcie4_cfg_fc_sel = _unnamed_$pcie_in_pcie4_cfg_fc_sel ;

  // value method pcie_in_pcie4_cfg_mesg_tx_transmit
  assign pcie4_cfg_mesg_tx_transmit =
	     _unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit ;

  // value method pcie_in_pcie4_cfg_mesg_tx_transmit_data
  assign pcie4_cfg_mesg_tx_transmit_data =
	     _unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_data ;

  // action method pcie_in_pcie4_cfg_mesg_tx_transmit_done
  assign CAN_FIRE_pcie_in_pcie4_cfg_mesg_tx_transmit_done = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_mesg_tx_transmit_done = 1'd1 ;

  // value method pcie_in_pcie4_cfg_mesg_tx_transmit_type
  assign pcie4_cfg_mesg_tx_transmit_type =
	     _unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_type ;

  // action method pcie_in_pcie4_cfg_mesg_rcvd_received
  assign CAN_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received = 1'd1 ;

  // action method pcie_in_pcie4_cfg_mesg_rcvd_received_data
  assign CAN_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received_data = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received_data = 1'd1 ;

  // action method pcie_in_pcie4_cfg_mesg_rcvd_received_type
  assign CAN_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received_type = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_mesg_rcvd_received_type = 1'd1 ;

  // value method pcie_in_pcie4_cfg_status_pcie_cq_np_req
  assign pcie4_cfg_status_pcie_cq_np_req =
	     _unnamed_$pcie_in_pcie4_cfg_status_pcie_cq_np_req ;

  // action method pcie_in_pcie4_cfg_status_pcie_cq_np_req_count
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_pcie_cq_np_req_count = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_pcie_cq_np_req_count = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_current_speed
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_current_speed = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_current_speed = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_err_cor_out
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_err_cor_out = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_err_cor_out = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_err_fatal_out
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_err_fatal_out = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_err_fatal_out = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_err_nonfatal_out
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_err_nonfatal_out = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_err_nonfatal_out = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_funstion_power_state
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_funstion_power_state = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_funstion_power_state = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_function_status
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_function_status = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_function_status = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_link_power_state
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_link_power_state = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_link_power_state = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_local_error_out
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_local_error_out = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_local_error_out = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_local_error_valid
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_local_error_valid = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_local_error_valid = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_ltssm_state
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_ltssm_state = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_ltssm_state = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_max_payload
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_max_payload = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_max_payload = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_max_read_req
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_max_read_req = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_max_read_req = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_negotiated_width
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_negotiated_width = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_negotiated_width = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_obff_enable
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_obff_enable = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_obff_enable = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_phy_link_down
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_phy_link_down = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_phy_link_down = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_phy_link_status
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_phy_link_status = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_phy_link_status = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_pl_status_change
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_pl_status_change = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_pl_status_change = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rcb_status
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rcb_status = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rcb_status = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_seq_num0
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num0 = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num0 = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_seq_num1
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num1 = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num1 = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_seq_num_vld0
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num_vld0 = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num_vld0 = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_seq_num_vld1
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num_vld1 = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_seq_num_vld1 = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_tag0
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag0 = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag0 = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_tag1
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag1 = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag1 = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_tag_av
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag_av = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag_av = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_tag_vld0
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag_vld0 = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag_vld0 = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rq_tag_vld1
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rq_tag_vld1 = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rq_tag_vld1 = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_rx_pm_state
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_rx_pm_state = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_rx_pm_state = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_tfc_npd_av
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_tfc_npd_av = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_tfc_npd_av = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_tfc_nph_av
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_tfc_nph_av = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_tfc_nph_av = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_tph_requester_enable
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_tph_requester_enable = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_tph_requester_enable = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_tph_st_mode
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_tph_st_mode = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_tph_st_mode = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_tx_pm_state
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_tx_pm_state = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_tx_pm_state = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_vf_power_state
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_vf_power_state = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_vf_power_state = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_vf_status
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_vf_status = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_vf_status = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_vf_tph_requester_enable
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_vf_tph_requester_enable = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_vf_tph_requester_enable = 1'd1 ;

  // action method pcie_in_pcie4_cfg_status_vf_tph_st_mode
  assign CAN_FIRE_pcie_in_pcie4_cfg_status_vf_tph_st_mode = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_cfg_status_vf_tph_st_mode = 1'd1 ;

  // action method pcie_in_pcie4_user_link_up
  assign CAN_FIRE_pcie_in_pcie4_user_link_up = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_user_link_up = 1'd1 ;

  // action method pcie_in_pcie4_phy_rdy_out
  assign CAN_FIRE_pcie_in_pcie4_phy_rdy_out = 1'd1 ;
  assign WILL_FIRE_pcie_in_pcie4_phy_rdy_out = 1'd1 ;

  // action method tv_switch
  assign CAN_FIRE_tv_switch = 1'd1 ;
  assign WILL_FIRE_tv_switch = 1'd1 ;

  // submodule _unnamed_
  mkSVF_PCIE _unnamed_(.CLK(CLK_user_clk),
		       .RST_N(user_reset_n$RESET_OUT),
		       .cc_xmit_put(_unnamed_$cc_xmit_put),
		       .pcie_in_m_axis_cc_tready(_unnamed_$pcie_in_m_axis_cc_tready),
		       .pcie_in_m_axis_rq_tready(_unnamed_$pcie_in_m_axis_rq_tready),
		       .pcie_in_pcie4_cfg_control_bus_number(_unnamed_$pcie_in_pcie4_cfg_control_bus_number),
		       .pcie_in_pcie4_cfg_control_flr_in_process(_unnamed_$pcie_in_pcie4_cfg_control_flr_in_process),
		       .pcie_in_pcie4_cfg_control_hot_reset_out(_unnamed_$pcie_in_pcie4_cfg_control_hot_reset_out),
		       .pcie_in_pcie4_cfg_control_power_state_change_interrupt(_unnamed_$pcie_in_pcie4_cfg_control_power_state_change_interrupt),
		       .pcie_in_pcie4_cfg_control_vf_flr_in_process(_unnamed_$pcie_in_pcie4_cfg_control_vf_flr_in_process),
		       .pcie_in_pcie4_cfg_external_msix_msi_fail(_unnamed_$pcie_in_pcie4_cfg_external_msix_msi_fail),
		       .pcie_in_pcie4_cfg_external_msix_msi_sent(_unnamed_$pcie_in_pcie4_cfg_external_msix_msi_sent),
		       .pcie_in_pcie4_cfg_external_msix_msix_msix_enable(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_msix_enable),
		       .pcie_in_pcie4_cfg_external_msix_msix_msix_mask(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_msix_mask),
		       .pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status),
		       .pcie_in_pcie4_cfg_external_msix_msix_vf_enable(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vf_enable),
		       .pcie_in_pcie4_cfg_external_msix_msix_vf_mask(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vf_mask),
		       .pcie_in_pcie4_cfg_fc_cpld(_unnamed_$pcie_in_pcie4_cfg_fc_cpld),
		       .pcie_in_pcie4_cfg_fc_cplh(_unnamed_$pcie_in_pcie4_cfg_fc_cplh),
		       .pcie_in_pcie4_cfg_fc_npd(_unnamed_$pcie_in_pcie4_cfg_fc_npd),
		       .pcie_in_pcie4_cfg_fc_nph(_unnamed_$pcie_in_pcie4_cfg_fc_nph),
		       .pcie_in_pcie4_cfg_fc_pd(_unnamed_$pcie_in_pcie4_cfg_fc_pd),
		       .pcie_in_pcie4_cfg_fc_ph(_unnamed_$pcie_in_pcie4_cfg_fc_ph),
		       .pcie_in_pcie4_cfg_interrupt_sent(_unnamed_$pcie_in_pcie4_cfg_interrupt_sent),
		       .pcie_in_pcie4_cfg_mesg_rcvd_received(_unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received),
		       .pcie_in_pcie4_cfg_mesg_rcvd_received_data(_unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received_data),
		       .pcie_in_pcie4_cfg_mesg_rcvd_received_type(_unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received_type),
		       .pcie_in_pcie4_cfg_mesg_tx_transmit_done(_unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_done),
		       .pcie_in_pcie4_cfg_mgmt_read_data(_unnamed_$pcie_in_pcie4_cfg_mgmt_read_data),
		       .pcie_in_pcie4_cfg_mgmt_read_write_done(_unnamed_$pcie_in_pcie4_cfg_mgmt_read_write_done),
		       .pcie_in_pcie4_cfg_status_current_speed(_unnamed_$pcie_in_pcie4_cfg_status_current_speed),
		       .pcie_in_pcie4_cfg_status_err_cor_out(_unnamed_$pcie_in_pcie4_cfg_status_err_cor_out),
		       .pcie_in_pcie4_cfg_status_err_fatal_out(_unnamed_$pcie_in_pcie4_cfg_status_err_fatal_out),
		       .pcie_in_pcie4_cfg_status_err_nonfatal_out(_unnamed_$pcie_in_pcie4_cfg_status_err_nonfatal_out),
		       .pcie_in_pcie4_cfg_status_function_status(_unnamed_$pcie_in_pcie4_cfg_status_function_status),
		       .pcie_in_pcie4_cfg_status_funstion_power_state(_unnamed_$pcie_in_pcie4_cfg_status_funstion_power_state),
		       .pcie_in_pcie4_cfg_status_link_power_state(_unnamed_$pcie_in_pcie4_cfg_status_link_power_state),
		       .pcie_in_pcie4_cfg_status_local_error_out(_unnamed_$pcie_in_pcie4_cfg_status_local_error_out),
		       .pcie_in_pcie4_cfg_status_local_error_valid(_unnamed_$pcie_in_pcie4_cfg_status_local_error_valid),
		       .pcie_in_pcie4_cfg_status_ltssm_state(_unnamed_$pcie_in_pcie4_cfg_status_ltssm_state),
		       .pcie_in_pcie4_cfg_status_max_payload(_unnamed_$pcie_in_pcie4_cfg_status_max_payload),
		       .pcie_in_pcie4_cfg_status_max_read_req(_unnamed_$pcie_in_pcie4_cfg_status_max_read_req),
		       .pcie_in_pcie4_cfg_status_negotiated_width(_unnamed_$pcie_in_pcie4_cfg_status_negotiated_width),
		       .pcie_in_pcie4_cfg_status_obff_enable(_unnamed_$pcie_in_pcie4_cfg_status_obff_enable),
		       .pcie_in_pcie4_cfg_status_pcie_cq_np_req_count(_unnamed_$pcie_in_pcie4_cfg_status_pcie_cq_np_req_count),
		       .pcie_in_pcie4_cfg_status_phy_link_down(_unnamed_$pcie_in_pcie4_cfg_status_phy_link_down),
		       .pcie_in_pcie4_cfg_status_phy_link_status(_unnamed_$pcie_in_pcie4_cfg_status_phy_link_status),
		       .pcie_in_pcie4_cfg_status_pl_status_change(_unnamed_$pcie_in_pcie4_cfg_status_pl_status_change),
		       .pcie_in_pcie4_cfg_status_rcb_status(_unnamed_$pcie_in_pcie4_cfg_status_rcb_status),
		       .pcie_in_pcie4_cfg_status_rq_seq_num0(_unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num0),
		       .pcie_in_pcie4_cfg_status_rq_seq_num1(_unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num1),
		       .pcie_in_pcie4_cfg_status_rq_seq_num_vld0(_unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num_vld0),
		       .pcie_in_pcie4_cfg_status_rq_seq_num_vld1(_unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num_vld1),
		       .pcie_in_pcie4_cfg_status_rq_tag0(_unnamed_$pcie_in_pcie4_cfg_status_rq_tag0),
		       .pcie_in_pcie4_cfg_status_rq_tag1(_unnamed_$pcie_in_pcie4_cfg_status_rq_tag1),
		       .pcie_in_pcie4_cfg_status_rq_tag_av(_unnamed_$pcie_in_pcie4_cfg_status_rq_tag_av),
		       .pcie_in_pcie4_cfg_status_rq_tag_vld0(_unnamed_$pcie_in_pcie4_cfg_status_rq_tag_vld0),
		       .pcie_in_pcie4_cfg_status_rq_tag_vld1(_unnamed_$pcie_in_pcie4_cfg_status_rq_tag_vld1),
		       .pcie_in_pcie4_cfg_status_rx_pm_state(_unnamed_$pcie_in_pcie4_cfg_status_rx_pm_state),
		       .pcie_in_pcie4_cfg_status_tfc_npd_av(_unnamed_$pcie_in_pcie4_cfg_status_tfc_npd_av),
		       .pcie_in_pcie4_cfg_status_tfc_nph_av(_unnamed_$pcie_in_pcie4_cfg_status_tfc_nph_av),
		       .pcie_in_pcie4_cfg_status_tph_requester_enable(_unnamed_$pcie_in_pcie4_cfg_status_tph_requester_enable),
		       .pcie_in_pcie4_cfg_status_tph_st_mode(_unnamed_$pcie_in_pcie4_cfg_status_tph_st_mode),
		       .pcie_in_pcie4_cfg_status_tx_pm_state(_unnamed_$pcie_in_pcie4_cfg_status_tx_pm_state),
		       .pcie_in_pcie4_cfg_status_vf_power_state(_unnamed_$pcie_in_pcie4_cfg_status_vf_power_state),
		       .pcie_in_pcie4_cfg_status_vf_status(_unnamed_$pcie_in_pcie4_cfg_status_vf_status),
		       .pcie_in_pcie4_cfg_status_vf_tph_requester_enable(_unnamed_$pcie_in_pcie4_cfg_status_vf_tph_requester_enable),
		       .pcie_in_pcie4_cfg_status_vf_tph_st_mode(_unnamed_$pcie_in_pcie4_cfg_status_vf_tph_st_mode),
		       .pcie_in_pcie4_phy_rdy_out(_unnamed_$pcie_in_pcie4_phy_rdy_out),
		       .pcie_in_pcie4_user_link_up(_unnamed_$pcie_in_pcie4_user_link_up),
		       .pcie_in_s_axis_cq_tdata(_unnamed_$pcie_in_s_axis_cq_tdata),
		       .pcie_in_s_axis_cq_tkeep(_unnamed_$pcie_in_s_axis_cq_tkeep),
		       .pcie_in_s_axis_cq_tlast(_unnamed_$pcie_in_s_axis_cq_tlast),
		       .pcie_in_s_axis_cq_tuser(_unnamed_$pcie_in_s_axis_cq_tuser),
		       .pcie_in_s_axis_cq_tvalid(_unnamed_$pcie_in_s_axis_cq_tvalid),
		       .pcie_in_s_axis_rc_tdata(_unnamed_$pcie_in_s_axis_rc_tdata),
		       .pcie_in_s_axis_rc_tkeep(_unnamed_$pcie_in_s_axis_rc_tkeep),
		       .pcie_in_s_axis_rc_tlast(_unnamed_$pcie_in_s_axis_rc_tlast),
		       .pcie_in_s_axis_rc_tuser(_unnamed_$pcie_in_s_axis_rc_tuser),
		       .pcie_in_s_axis_rc_tvalid(_unnamed_$pcie_in_s_axis_rc_tvalid),
		       .rq_xmit_put(_unnamed_$rq_xmit_put),
		       .EN_cq_recv_get(_unnamed_$EN_cq_recv_get),
		       .EN_cc_xmit_put(_unnamed_$EN_cc_xmit_put),
		       .EN_rq_xmit_put(_unnamed_$EN_rq_xmit_put),
		       .EN_rc_recv_get(_unnamed_$EN_rc_recv_get),
		       .pcie_in_m_axis_cc_tvalid(_unnamed_$pcie_in_m_axis_cc_tvalid),
		       .pcie_in_m_axis_cc_tdata(_unnamed_$pcie_in_m_axis_cc_tdata),
		       .pcie_in_m_axis_cc_tkeep(_unnamed_$pcie_in_m_axis_cc_tkeep),
		       .pcie_in_m_axis_cc_tlast(_unnamed_$pcie_in_m_axis_cc_tlast),
		       .pcie_in_m_axis_cc_tuser(_unnamed_$pcie_in_m_axis_cc_tuser),
		       .pcie_in_m_axis_rq_tvalid(_unnamed_$pcie_in_m_axis_rq_tvalid),
		       .pcie_in_m_axis_rq_tdata(_unnamed_$pcie_in_m_axis_rq_tdata),
		       .pcie_in_m_axis_rq_tkeep(_unnamed_$pcie_in_m_axis_rq_tkeep),
		       .pcie_in_m_axis_rq_tlast(_unnamed_$pcie_in_m_axis_rq_tlast),
		       .pcie_in_m_axis_rq_tuser(_unnamed_$pcie_in_m_axis_rq_tuser),
		       .pcie_in_s_axis_cq_tready(_unnamed_$pcie_in_s_axis_cq_tready),
		       .pcie_in_s_axis_rc_tready(_unnamed_$pcie_in_s_axis_rc_tready),
		       .pcie_in_pcie4_cfg_mgmt_addr(_unnamed_$pcie_in_pcie4_cfg_mgmt_addr),
		       .pcie_in_pcie4_cfg_mgmt_byte_enable(_unnamed_$pcie_in_pcie4_cfg_mgmt_byte_enable),
		       .pcie_in_pcie4_cfg_mgmt_debug_access(_unnamed_$pcie_in_pcie4_cfg_mgmt_debug_access),
		       .pcie_in_pcie4_cfg_mgmt_function_number(_unnamed_$pcie_in_pcie4_cfg_mgmt_function_number),
		       .pcie_in_pcie4_cfg_mgmt_read(_unnamed_$pcie_in_pcie4_cfg_mgmt_read),
		       .pcie_in_pcie4_cfg_mgmt_write_data(_unnamed_$pcie_in_pcie4_cfg_mgmt_write_data),
		       .pcie_in_pcie4_cfg_mgmt_write(_unnamed_$pcie_in_pcie4_cfg_mgmt_write),
		       .pcie_in_pcie4_cfg_pm_aspm_l1_entry_reject(_unnamed_$pcie_in_pcie4_cfg_pm_aspm_l1_entry_reject),
		       .pcie_in_pcie4_cfg_pm_aspm_tx_10s_entry_disable(_unnamed_$pcie_in_pcie4_cfg_pm_aspm_tx_10s_entry_disable),
		       .pcie_in_pcie4_cfg_external_msix_msix_address(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_address),
		       .pcie_in_pcie4_cfg_external_msix_msix_data(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_data),
		       .pcie_in_pcie4_cfg_external_msix_msix_intrpt(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_intrpt),
		       .pcie_in_pcie4_cfg_external_msix_msix_vec_pending(_unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vec_pending),
		       .pcie_in_pcie4_cfg_external_msix_msi_function_number(_unnamed_$pcie_in_pcie4_cfg_external_msix_msi_function_number),
		       .pcie_in_pcie4_cfg_interrupt_intrpt(_unnamed_$pcie_in_pcie4_cfg_interrupt_intrpt),
		       .pcie_in_pcie4_cfg_interrupt_pending(_unnamed_$pcie_in_pcie4_cfg_interrupt_pending),
		       .pcie_in_pcie4_cfg_control_config_space_enable(_unnamed_$pcie_in_pcie4_cfg_control_config_space_enable),
		       .pcie_in_pcie4_cfg_control_ds_bus_number(_unnamed_$pcie_in_pcie4_cfg_control_ds_bus_number),
		       .pcie_in_pcie4_cfg_control_ds_device_number(_unnamed_$pcie_in_pcie4_cfg_control_ds_device_number),
		       .pcie_in_pcie4_cfg_control_ds_port_number(_unnamed_$pcie_in_pcie4_cfg_control_ds_port_number),
		       .pcie_in_pcie4_cfg_control_dsn(_unnamed_$pcie_in_pcie4_cfg_control_dsn),
		       .pcie_in_pcie4_cfg_control_err_cor_in(_unnamed_$pcie_in_pcie4_cfg_control_err_cor_in),
		       .pcie_in_pcie4_cfg_control_err_uncor_in(_unnamed_$pcie_in_pcie4_cfg_control_err_uncor_in),
		       .pcie_in_pcie4_cfg_control_flr_done(_unnamed_$pcie_in_pcie4_cfg_control_flr_done),
		       .pcie_in_pcie4_cfg_control_hot_reset_in(_unnamed_$pcie_in_pcie4_cfg_control_hot_reset_in),
		       .pcie_in_pcie4_cfg_control_link_training_enable(_unnamed_$pcie_in_pcie4_cfg_control_link_training_enable),
		       .pcie_in_pcie4_cfg_control_power_state_change_ack(_unnamed_$pcie_in_pcie4_cfg_control_power_state_change_ack),
		       .pcie_in_pcie4_cfg_control_req_pm_transition_l23_ready(_unnamed_$pcie_in_pcie4_cfg_control_req_pm_transition_l23_ready),
		       .pcie_in_pcie4_cfg_control_vf_flr_done(_unnamed_$pcie_in_pcie4_cfg_control_vf_flr_done),
		       .pcie_in_pcie4_cfg_control_vf_flr_func_num(_unnamed_$pcie_in_pcie4_cfg_control_vf_flr_func_num),
		       .pcie_in_pcie4_cfg_fc_sel(_unnamed_$pcie_in_pcie4_cfg_fc_sel),
		       .pcie_in_pcie4_cfg_mesg_tx_transmit(_unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit),
		       .pcie_in_pcie4_cfg_mesg_tx_transmit_data(_unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_data),
		       .pcie_in_pcie4_cfg_mesg_tx_transmit_type(_unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_type),
		       .pcie_in_pcie4_cfg_status_pcie_cq_np_req(_unnamed_$pcie_in_pcie4_cfg_status_pcie_cq_np_req),
		       .cq_recv_get(_unnamed_$cq_recv_get),
		       .RDY_cq_recv_get(_unnamed_$RDY_cq_recv_get),
		       .RDY_cc_xmit_put(_unnamed_$RDY_cc_xmit_put),
		       .RDY_rq_xmit_put(_unnamed_$RDY_rq_xmit_put),
		       .rc_recv_get(_unnamed_$rc_recv_get),
		       .RDY_rc_recv_get(_unnamed_$RDY_rc_recv_get),
		       .status_lnk_up(_unnamed_$status_lnk_up),
		       .status_max_payload(_unnamed_$status_max_payload),
		       .status_max_read_req(_unnamed_$status_max_read_req),
		       .status_rcb_status(_unnamed_$status_rcb_status),
		       .status_function_status(_unnamed_$status_function_status),
		       .cfg_interrupt_msix_enabled(_unnamed_$cfg_interrupt_msix_enabled),
		       .cfg_interrupt_msix_mask(_unnamed_$cfg_interrupt_msix_mask));

  // submodule aresetAsserted
  ResetToBool aresetAsserted(.RST(RST_N_aresetn), .VAL());

  // submodule axis_xactor_f_data
  FIFO2 #(.width(32'd761),
	  .guarded(32'd1)) axis_xactor_f_data(.RST(network_status$OUT_RST),
					      .CLK(CLK_aclk),
					      .D_IN(axis_xactor_f_data$D_IN),
					      .ENQ(axis_xactor_f_data$ENQ),
					      .DEQ(axis_xactor_f_data$DEQ),
					      .CLR(axis_xactor_f_data$CLR),
					      .D_OUT(axis_xactor_f_data$D_OUT),
					      .FULL_N(axis_xactor_f_data$FULL_N),
					      .EMPTY_N(axis_xactor_f_data$EMPTY_N));

  // submodule beatFF
  SyncFIFO #(.dataWidth(32'd32),
	     .depth(32'd8),
	     .indxWidth(32'd3)) beatFF(.sCLK(CLK_aclk),
				       .dCLK(CLK_user_clk_half),
				       .sRST(network_status$OUT_RST),
				       .sD_IN(beatFF$sD_IN),
				       .sENQ(beatFF$sENQ),
				       .dDEQ(beatFF$dDEQ),
				       .sFULL_N(beatFF$sFULL_N),
				       .dEMPTY_N(beatFF$dEMPTY_N),
				       .dD_OUT(beatFF$dD_OUT));

  // submodule bridge
  mkPCIE3toBNoCFull_4 bridge(.board_content_id(64'h05CE000600080000),
			     .max_read_req_bytes(max_read_req_bytes),
			     .max_payload_bytes(max_payload_bytes),
			     .rcb_mask(rcb_mask),
			     .msix_enabled(msix_enable),
			     .msix_mask_all_intr(msix_masked),
			     .msi_enabled(1'd0),
			     .CLK(CLK_user_clk_half),
			     .RST_N(epReset125$OUT_RST),
			     .clocks_response_put(bridge$clocks_response_put),
			     .cq_tlps_put(bridge$cq_tlps_put),
			     .noc_in_beat_v(bridge$noc_in_beat_v),
			     .noc_in_src_rdy_b(bridge$noc_in_src_rdy_b),
			     .noc_out_dst_rdy_b(bridge$noc_out_dst_rdy_b),
			     .rc_tlps_put(bridge$rc_tlps_put),
			     .status_bluenoc_link_is_up_i(bridge$status_bluenoc_link_is_up_i),
			     .status_interrupts_enabled_i(bridge$status_interrupts_enabled_i),
			     .status_memory_enabled_i(bridge$status_memory_enabled_i),
			     .status_out_of_reset_i(bridge$status_out_of_reset_i),
			     .status_pcie_link_is_up_i(bridge$status_pcie_link_is_up_i),
			     .EN_rq_tlps_get(bridge$EN_rq_tlps_get),
			     .EN_rc_tlps_put(bridge$EN_rc_tlps_put),
			     .EN_cq_tlps_put(bridge$EN_cq_tlps_put),
			     .EN_cc_tlps_get(bridge$EN_cc_tlps_get),
			     .EN_msi_interrupt_clear(bridge$EN_msi_interrupt_clear),
			     .EN_clocks_request_get(bridge$EN_clocks_request_get),
			     .EN_clocks_response_put(bridge$EN_clocks_response_put),
			     .rq_tlps_get(bridge$rq_tlps_get),
			     .RDY_rq_tlps_get(bridge$RDY_rq_tlps_get),
			     .RDY_rc_tlps_put(bridge$RDY_rc_tlps_put),
			     .RDY_cq_tlps_put(bridge$RDY_cq_tlps_put),
			     .cc_tlps_get(bridge$cc_tlps_get),
			     .RDY_cc_tlps_get(bridge$RDY_cc_tlps_get),
			     .noc_in_dst_rdy(bridge$noc_in_dst_rdy),
			     .noc_out_src_rdy(),
			     .noc_out_beat(),
			     .is_activated(bridge$is_activated),
			     .rx_activity(),
			     .tx_activity(),
			     .msi_interrupt_req(),
			     .clocks_request_get(),
			     .RDY_clocks_request_get(bridge$RDY_clocks_request_get),
			     .RDY_clocks_response_put(bridge$RDY_clocks_response_put));

  // submodule cc_gearbox_dCombinedReset
  ResetEither cc_gearbox_dCombinedReset(.A_RST(user_reset_n$RESET_OUT),
					.B_RST(cc_gearbox_dCrossedsReset$OUT_RST),
					.RST_OUT(cc_gearbox_dCombinedReset$RST_OUT));

  // submodule cc_gearbox_dCrossedsReset
  SyncReset0 cc_gearbox_dCrossedsReset(.IN_RST(epReset125$OUT_RST),
				       .OUT_RST(cc_gearbox_dCrossedsReset$OUT_RST));

  // submodule cc_gearbox_sCombinedReset
  ResetEither cc_gearbox_sCombinedReset(.A_RST(epReset125$OUT_RST),
					.B_RST(cc_gearbox_sCrosseddReset$OUT_RST),
					.RST_OUT(cc_gearbox_sCombinedReset$RST_OUT));

  // submodule cc_gearbox_sCrosseddReset
  SyncReset0 cc_gearbox_sCrosseddReset(.IN_RST(user_reset_n$RESET_OUT),
				       .OUT_RST(cc_gearbox_sCrosseddReset$OUT_RST));

  // submodule cq_gearbox_dCombinedReset
  ResetEither cq_gearbox_dCombinedReset(.A_RST(epReset125$OUT_RST),
					.B_RST(cq_gearbox_dCrossedsReset$OUT_RST),
					.RST_OUT(cq_gearbox_dCombinedReset$RST_OUT));

  // submodule cq_gearbox_dCrossedsReset
  SyncReset0 cq_gearbox_dCrossedsReset(.IN_RST(user_reset_n$RESET_OUT),
				       .OUT_RST(cq_gearbox_dCrossedsReset$OUT_RST));

  // submodule cq_gearbox_sCombinedReset
  ResetEither cq_gearbox_sCombinedReset(.A_RST(user_reset_n$RESET_OUT),
					.B_RST(cq_gearbox_sCrosseddReset$OUT_RST),
					.RST_OUT(cq_gearbox_sCombinedReset$RST_OUT));

  // submodule cq_gearbox_sCrosseddReset
  SyncReset0 cq_gearbox_sCrosseddReset(.IN_RST(epReset125$OUT_RST),
				       .OUT_RST(cq_gearbox_sCrosseddReset$OUT_RST));

  // submodule cq_in_buf
  FIFO2 #(.width(32'd76),
	  .guarded(32'd1)) cq_in_buf(.RST(user_reset_n$RESET_OUT),
				     .CLK(CLK_user_clk),
				     .D_IN(cq_in_buf$D_IN),
				     .ENQ(cq_in_buf$ENQ),
				     .DEQ(cq_in_buf$DEQ),
				     .CLR(cq_in_buf$CLR),
				     .D_OUT(cq_in_buf$D_OUT),
				     .FULL_N(cq_in_buf$FULL_N),
				     .EMPTY_N(cq_in_buf$EMPTY_N));

  // submodule epReset125
  SyncResetA #(.RSTDELAY(32'd3)) epReset125(.CLK(CLK_user_clk_half),
					    .IN_RST(user_reset_n$RESET_OUT),
					    .OUT_RST(epReset125$OUT_RST));

  // submodule fOut_f
  FIFO2 #(.width(32'd32), .guarded(32'd0)) fOut_f(.RST(epReset125$OUT_RST),
						  .CLK(CLK_user_clk_half),
						  .D_IN(fOut_f$D_IN),
						  .ENQ(fOut_f$ENQ),
						  .DEQ(fOut_f$DEQ),
						  .CLR(fOut_f$CLR),
						  .D_OUT(fOut_f$D_OUT),
						  .FULL_N(fOut_f$FULL_N),
						  .EMPTY_N(fOut_f$EMPTY_N));

  // submodule network_status
  MakeResetA #(.RSTDELAY(32'd4),
	       .init(1'd0)) network_status(.CLK(CLK_user_clk_half),
					   .RST(epReset125$OUT_RST),
					   .DST_CLK(CLK_aclk),
					   .ASSERT_IN(network_status$ASSERT_IN),
					   .ASSERT_OUT(),
					   .OUT_RST(network_status$OUT_RST));

  // submodule rc_gearbox_dCombinedReset
  ResetEither rc_gearbox_dCombinedReset(.A_RST(epReset125$OUT_RST),
					.B_RST(rc_gearbox_dCrossedsReset$OUT_RST),
					.RST_OUT(rc_gearbox_dCombinedReset$RST_OUT));

  // submodule rc_gearbox_dCrossedsReset
  SyncReset0 rc_gearbox_dCrossedsReset(.IN_RST(user_reset_n$RESET_OUT),
				       .OUT_RST(rc_gearbox_dCrossedsReset$OUT_RST));

  // submodule rc_gearbox_sCombinedReset
  ResetEither rc_gearbox_sCombinedReset(.A_RST(user_reset_n$RESET_OUT),
					.B_RST(rc_gearbox_sCrosseddReset$OUT_RST),
					.RST_OUT(rc_gearbox_sCombinedReset$RST_OUT));

  // submodule rc_gearbox_sCrosseddReset
  SyncReset0 rc_gearbox_sCrosseddReset(.IN_RST(epReset125$OUT_RST),
				       .OUT_RST(rc_gearbox_sCrosseddReset$OUT_RST));

  // submodule rc_in_buf
  FIFO2 #(.width(32'd76),
	  .guarded(32'd1)) rc_in_buf(.RST(user_reset_n$RESET_OUT),
				     .CLK(CLK_user_clk),
				     .D_IN(rc_in_buf$D_IN),
				     .ENQ(rc_in_buf$ENQ),
				     .DEQ(rc_in_buf$DEQ),
				     .CLR(rc_in_buf$CLR),
				     .D_OUT(rc_in_buf$D_OUT),
				     .FULL_N(rc_in_buf$FULL_N),
				     .EMPTY_N(rc_in_buf$EMPTY_N));

  // submodule rq_gearbox_dCombinedReset
  ResetEither rq_gearbox_dCombinedReset(.A_RST(user_reset_n$RESET_OUT),
					.B_RST(rq_gearbox_dCrossedsReset$OUT_RST),
					.RST_OUT(rq_gearbox_dCombinedReset$RST_OUT));

  // submodule rq_gearbox_dCrossedsReset
  SyncReset0 rq_gearbox_dCrossedsReset(.IN_RST(epReset125$OUT_RST),
				       .OUT_RST(rq_gearbox_dCrossedsReset$OUT_RST));

  // submodule rq_gearbox_sCombinedReset
  ResetEither rq_gearbox_sCombinedReset(.A_RST(epReset125$OUT_RST),
					.B_RST(rq_gearbox_sCrosseddReset$OUT_RST),
					.RST_OUT(rq_gearbox_sCombinedReset$RST_OUT));

  // submodule rq_gearbox_sCrosseddReset
  SyncReset0 rq_gearbox_sCrosseddReset(.IN_RST(user_reset_n$RESET_OUT),
				       .OUT_RST(rq_gearbox_sCrosseddReset$OUT_RST));

  // submodule user_reset_n
  ResetInverter user_reset_n(.RESET_IN(RST_N_user_reset),
			     .RESET_OUT(user_reset_n$RESET_OUT));

  // rule RL_register_config_values
  assign CAN_FIRE_RL_register_config_values = 1'd1 ;
  assign WILL_FIRE_RL_register_config_values = 1'd1 ;

  // rule RL_intr_ifc_ctl
  assign CAN_FIRE_RL_intr_ifc_ctl = 1'd1 ;
  assign WILL_FIRE_RL_intr_ifc_ctl = 1'd1 ;

  // rule RL_cross_config_values
  assign CAN_FIRE_RL_cross_config_values = 1'd1 ;
  assign WILL_FIRE_RL_cross_config_values = 1'd1 ;

  // rule RL_field_clock_request
  assign CAN_FIRE_RL_field_clock_request =
	     bridge$RDY_clocks_request_get && bridge$RDY_clocks_response_put ;
  assign WILL_FIRE_RL_field_clock_request = CAN_FIRE_RL_field_clock_request ;

  // rule RL_drive_status_pcie_link_up
  assign CAN_FIRE_RL_drive_status_pcie_link_up = 1'd1 ;
  assign WILL_FIRE_RL_drive_status_pcie_link_up = 1'd1 ;

  // rule RL_drive_status_bluenoc_link_up
  assign CAN_FIRE_RL_drive_status_bluenoc_link_up = 1'd1 ;
  assign WILL_FIRE_RL_drive_status_bluenoc_link_up = 1'd1 ;

  // rule RL_drive_status_interrupts_enabled
  assign CAN_FIRE_RL_drive_status_interrupts_enabled = 1'd1 ;
  assign WILL_FIRE_RL_drive_status_interrupts_enabled = 1'd1 ;

  // rule RL_drive_status_memory_enabled
  assign CAN_FIRE_RL_drive_status_memory_enabled = 1'd1 ;
  assign WILL_FIRE_RL_drive_status_memory_enabled = 1'd1 ;

  // rule RL_drive_status_out_of_reset
  assign CAN_FIRE_RL_drive_status_out_of_reset = 1'd1 ;
  assign WILL_FIRE_RL_drive_status_out_of_reset = 1'd1 ;

  // rule RL_reset_block_if_network_is_inactive
  assign CAN_FIRE_RL_reset_block_if_network_is_inactive =
	     !bridge$is_activated ;
  assign WILL_FIRE_RL_reset_block_if_network_is_inactive =
	     CAN_FIRE_RL_reset_block_if_network_is_inactive ;

  // rule RL_always_accept_beat
  assign CAN_FIRE_RL_always_accept_beat = 1'd1 ;
  assign WILL_FIRE_RL_always_accept_beat = 1'd1 ;

  // rule RL_connect_src_rdy
  assign CAN_FIRE_RL_connect_src_rdy = 1'd1 ;
  assign WILL_FIRE_RL_connect_src_rdy = 1'd1 ;

  // rule RL_connect_dst_rdy
  assign CAN_FIRE_RL_connect_dst_rdy = 1'd1 ;
  assign WILL_FIRE_RL_connect_dst_rdy = 1'd1 ;

  // rule RL_connect_data
  assign CAN_FIRE_RL_connect_data = 1'd1 ;
  assign WILL_FIRE_RL_connect_data = 1'd1 ;

  // rule RL_egress
  assign CAN_FIRE_RL_egress = beatFF$dEMPTY_N && fOut_f$FULL_N ;
  assign WILL_FIRE_RL_egress = CAN_FIRE_RL_egress ;

  // rule RL_xferBeat
  assign CAN_FIRE_RL_xferBeat =
	     beatFF$sFULL_N &&
	     (!cnt_32_EQ_vecSize_33___d934 || axis_xactor_f_data$EMPTY_N) ;
  assign WILL_FIRE_RL_xferBeat = CAN_FIRE_RL_xferBeat ;

  // rule RL_cq_mkConnectionGetPut
  assign CAN_FIRE_RL_cq_mkConnectionGetPut =
	     _unnamed_$RDY_cq_recv_get && cq_in_buf$FULL_N ;
  assign WILL_FIRE_RL_cq_mkConnectionGetPut =
	     CAN_FIRE_RL_cq_mkConnectionGetPut ;

  // rule RL_cq_rl_rd_header
  assign CAN_FIRE_RL_cq_rl_rd_header =
	     cq_f_cq_rv[152] && bridge$RDY_cq_tlps_put && cq_f_cq_rv[11] &&
	     (cq_f_cq_rv[102:99] == 4'd0 || cq_f_cq_rv[102:99] == 4'd2) ;
  assign WILL_FIRE_RL_cq_rl_rd_header = CAN_FIRE_RL_cq_rl_rd_header ;

  // rule RL_cq_rl_data_0
  assign CAN_FIRE_RL_cq_rl_data_0 =
	     cq_f_cq_rv[152] && !cq_f_cq_rv[11] && cq_rg_dwcount == 11'd0 ;
  assign WILL_FIRE_RL_cq_rl_data_0 = CAN_FIRE_RL_cq_rl_data_0 ;

  // rule RL_cq_rl_data_1_to_3
  assign CAN_FIRE_RL_cq_rl_data_1_to_3 =
	     cq_f_cq_rv[152] && bridge$RDY_cq_tlps_put && !cq_f_cq_rv[11] &&
	     cq_rg_dwcount != 11'd0 &&
	     cq_rg_dwcount < 11'd4 ;
  assign WILL_FIRE_RL_cq_rl_data_1_to_3 = CAN_FIRE_RL_cq_rl_data_1_to_3 ;

  // rule RL_cq_gearbox_launder_sInReset
  assign CAN_FIRE_RL_cq_gearbox_launder_sInReset = 1'd1 ;
  assign WILL_FIRE_RL_cq_gearbox_launder_sInReset = 1'd1 ;

  // rule RL_cq_rl_g_to_gearbox
  assign CAN_FIRE_RL_cq_rl_g_to_gearbox =
	     NOT_cq_gearbox_write_block_3_4_AND_NOT_NOT_cq__ETC___d60 &&
	     cq_in_buf$EMPTY_N &&
	     !cq_rg_pad_odd_tail ;
  assign WILL_FIRE_RL_cq_rl_g_to_gearbox = CAN_FIRE_RL_cq_rl_g_to_gearbox ;

  // rule RL_cq_rl_g_to_gearbox_pad_odd_tail
  assign CAN_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail =
	     NOT_cq_gearbox_write_block_3_4_AND_NOT_NOT_cq__ETC___d60 &&
	     cq_rg_pad_odd_tail ;
  assign WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail =
	     CAN_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ;

  // rule RL_cq_gearbox_launder_dInReset
  assign CAN_FIRE_RL_cq_gearbox_launder_dInReset = 1'd1 ;
  assign WILL_FIRE_RL_cq_gearbox_launder_dInReset = 1'd1 ;

  // rule RL_cq_rl_wr_header
  assign CAN_FIRE_RL_cq_rl_wr_header =
	     cq_f_cq_rv[152] &&
	     NOT_cq_gearbox_read_block_37_38_AND_NOT_cq_gea_ETC___d162 &&
	     bridge$RDY_cq_tlps_put &&
	     cq_f_cq_rv[11] &&
	     (cq_f_cq_rv[102:99] == 4'd1 || cq_f_cq_rv[102:99] == 4'd3) ;
  assign WILL_FIRE_RL_cq_rl_wr_header = CAN_FIRE_RL_cq_rl_wr_header ;

  // rule RL_cq_rl_data_4
  assign CAN_FIRE_RL_cq_rl_data_4 =
	     cq_f_cq_rv[152] &&
	     NOT_cq_gearbox_read_block_37_38_AND_NOT_cq_gea_ETC___d162 &&
	     bridge$RDY_cq_tlps_put &&
	     !cq_f_cq_rv[11] &&
	     cq_rg_dwcount > 11'd3 ;
  assign WILL_FIRE_RL_cq_rl_data_4 = CAN_FIRE_RL_cq_rl_data_4 ;

  // rule RL_cq_rl_slowclock
  assign CAN_FIRE_RL_cq_rl_slowclock =
	     NOT_cq_gearbox_read_block_37_38_AND_NOT_cq_gea_ETC___d162 &&
	     !cq_f_cq_rv$port1__read[152] ;
  assign WILL_FIRE_RL_cq_rl_slowclock = CAN_FIRE_RL_cq_rl_slowclock ;

  // rule RL_cq_gearbox_sInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_cq_gearbox_sInReset_pre_isResetAssertedUpdate =
	     cq_gearbox_sInReset_pre_isInReset ;
  assign WILL_FIRE_RL_cq_gearbox_sInReset_pre_isResetAssertedUpdate =
	     cq_gearbox_sInReset_pre_isInReset ;

  // rule RL_cq_gearbox_dInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_cq_gearbox_dInReset_pre_isResetAssertedUpdate =
	     cq_gearbox_dInReset_pre_isInReset ;
  assign WILL_FIRE_RL_cq_gearbox_dInReset_pre_isResetAssertedUpdate =
	     cq_gearbox_dInReset_pre_isInReset ;

  // rule RL_cc_gearbox_launder_sInReset
  assign CAN_FIRE_RL_cc_gearbox_launder_sInReset = 1'd1 ;
  assign WILL_FIRE_RL_cc_gearbox_launder_sInReset = 1'd1 ;

  // rule RL_cc_rl_header
  assign CAN_FIRE_RL_cc_rl_header =
	     cc_f_tlps_rv[153] &&
	     NOT_cc_gearbox_write_block_05_06_AND_cc_gearbo_ETC___d326 &&
	     cc_f_tlps_rv[152] ;
  assign WILL_FIRE_RL_cc_rl_header = CAN_FIRE_RL_cc_rl_header ;

  // rule RL_cc_rl_data
  assign CAN_FIRE_RL_cc_rl_data =
	     cc_f_tlps_rv[153] &&
	     NOT_cc_gearbox_write_block_05_06_AND_cc_gearbo_ETC___d326 &&
	     !cc_f_tlps_rv[152] &&
	     cc_rg_dwcount != 11'd0 ;
  assign WILL_FIRE_RL_cc_rl_data = CAN_FIRE_RL_cc_rl_data ;

  // rule RL_cc_rl_get_tlps
  assign CAN_FIRE_RL_cc_rl_get_tlps =
	     bridge$RDY_cc_tlps_get && !cc_f_tlps_rv$port1__read[153] ;
  assign WILL_FIRE_RL_cc_rl_get_tlps = CAN_FIRE_RL_cc_rl_get_tlps ;

  // rule RL_cc_gearbox_launder_dInReset
  assign CAN_FIRE_RL_cc_gearbox_launder_dInReset = 1'd1 ;
  assign WILL_FIRE_RL_cc_gearbox_launder_dInReset = 1'd1 ;

  // rule RL_cc_rl_fastclock
  assign CAN_FIRE_RL_cc_rl_fastclock =
	     NOT_cc_gearbox_read_block_04_05_AND_NOT_cc_gea_ETC___d427 &&
	     IF_cc_gearbox_read_block_04_THEN_IF_NOT_cc_gea_ETC___d445 ;
  assign WILL_FIRE_RL_cc_rl_fastclock = CAN_FIRE_RL_cc_rl_fastclock ;

  // rule RL_cc_gearbox_sInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_cc_gearbox_sInReset_pre_isResetAssertedUpdate =
	     cc_gearbox_sInReset_pre_isInReset ;
  assign WILL_FIRE_RL_cc_gearbox_sInReset_pre_isResetAssertedUpdate =
	     cc_gearbox_sInReset_pre_isInReset ;

  // rule RL_cc_gearbox_dInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_cc_gearbox_dInReset_pre_isResetAssertedUpdate =
	     cc_gearbox_dInReset_pre_isInReset ;
  assign WILL_FIRE_RL_cc_gearbox_dInReset_pre_isResetAssertedUpdate =
	     cc_gearbox_dInReset_pre_isInReset ;

  // rule RL_rq_gearbox_launder_sInReset
  assign CAN_FIRE_RL_rq_gearbox_launder_sInReset = 1'd1 ;
  assign WILL_FIRE_RL_rq_gearbox_launder_sInReset = 1'd1 ;

  // rule RL_rq_rl_header
  assign CAN_FIRE_RL_rq_rl_header =
	     rq_f_tlps_rv[153] &&
	     NOT_rq_gearbox_write_block_71_72_AND_rq_gearbo_ETC___d492 &&
	     !rq_rg_mdw[32] &&
	     rq_f_tlps_rv[152] ;
  assign WILL_FIRE_RL_rq_rl_header = CAN_FIRE_RL_rq_rl_header ;

  // rule RL_rq_rl_data_a
  assign CAN_FIRE_RL_rq_rl_data_a =
	     NOT_rq_gearbox_write_block_71_72_AND_rq_gearbo_ETC___d492 &&
	     rq_rg_mdw[32] &&
	     rq_rg_dwcount == 11'd1 ;
  assign WILL_FIRE_RL_rq_rl_data_a = CAN_FIRE_RL_rq_rl_data_a ;

  // rule RL_rq_rl_data_b
  assign CAN_FIRE_RL_rq_rl_data_b =
	     rq_f_tlps_rv[153] &&
	     NOT_rq_gearbox_write_block_71_72_AND_rq_gearbo_ETC___d492 &&
	     rq_rg_mdw[32] &&
	     rq_rg_dwcount != 11'd1 ;
  assign WILL_FIRE_RL_rq_rl_data_b = CAN_FIRE_RL_rq_rl_data_b ;

  // rule RL_rq_rl_data_c
  assign CAN_FIRE_RL_rq_rl_data_c =
	     rq_f_tlps_rv[153] &&
	     NOT_rq_gearbox_write_block_71_72_AND_rq_gearbo_ETC___d492 &&
	     !rq_rg_mdw[32] &&
	     !rq_f_tlps_rv[152] &&
	     rq_rg_dwcount != 11'd0 ;
  assign WILL_FIRE_RL_rq_rl_data_c = CAN_FIRE_RL_rq_rl_data_c ;

  // rule RL_rq_rl_get_tlps
  assign CAN_FIRE_RL_rq_rl_get_tlps =
	     bridge$RDY_rq_tlps_get && !rq_f_tlps_rv$port1__read[153] ;
  assign WILL_FIRE_RL_rq_rl_get_tlps = CAN_FIRE_RL_rq_rl_get_tlps ;

  // rule RL_rq_gearbox_launder_dInReset
  assign CAN_FIRE_RL_rq_gearbox_launder_dInReset = 1'd1 ;
  assign WILL_FIRE_RL_rq_gearbox_launder_dInReset = 1'd1 ;

  // rule RL_rq_rl_fastclock
  assign CAN_FIRE_RL_rq_rl_fastclock =
	     NOT_rq_gearbox_read_block_19_20_AND_NOT_rq_gea_ETC___d642 &&
	     IF_rq_gearbox_read_block_19_THEN_IF_NOT_rq_gea_ETC___d660 ;
  assign WILL_FIRE_RL_rq_rl_fastclock = CAN_FIRE_RL_rq_rl_fastclock ;

  // rule RL_rq_gearbox_sInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_rq_gearbox_sInReset_pre_isResetAssertedUpdate =
	     rq_gearbox_sInReset_pre_isInReset ;
  assign WILL_FIRE_RL_rq_gearbox_sInReset_pre_isResetAssertedUpdate =
	     rq_gearbox_sInReset_pre_isInReset ;

  // rule RL_rq_gearbox_dInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_rq_gearbox_dInReset_pre_isResetAssertedUpdate =
	     rq_gearbox_dInReset_pre_isInReset ;
  assign WILL_FIRE_RL_rq_gearbox_dInReset_pre_isResetAssertedUpdate =
	     rq_gearbox_dInReset_pre_isInReset ;

  // rule RL_rc_mkConnectionGetPut
  assign CAN_FIRE_RL_rc_mkConnectionGetPut =
	     _unnamed_$RDY_rc_recv_get && rc_in_buf$FULL_N ;
  assign WILL_FIRE_RL_rc_mkConnectionGetPut =
	     CAN_FIRE_RL_rc_mkConnectionGetPut ;

  // rule RL_rc_gearbox_launder_sInReset
  assign CAN_FIRE_RL_rc_gearbox_launder_sInReset = 1'd1 ;
  assign WILL_FIRE_RL_rc_gearbox_launder_sInReset = 1'd1 ;

  // rule RL_rc_rl_g_to_gearbox
  assign CAN_FIRE_RL_rc_rl_g_to_gearbox =
	     rc_in_buf_i_notEmpty__81_AND_NOT_rc_rg_in_pack_ETC___d717 &&
	     !rc_rg_pad_odd_tail ;
  assign WILL_FIRE_RL_rc_rl_g_to_gearbox = CAN_FIRE_RL_rc_rl_g_to_gearbox ;

  // rule RL_rc_rl_g_to_gearbox_pad_odd_tail
  assign CAN_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail =
	     NOT_rc_gearbox_write_block_88_89_AND_NOT_NOT_r_ETC___d715 &&
	     rc_rg_pad_odd_tail ;
  assign WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail =
	     CAN_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail ;

  // rule RL_rc_gearbox_launder_dInReset
  assign CAN_FIRE_RL_rc_gearbox_launder_dInReset = 1'd1 ;
  assign WILL_FIRE_RL_rc_gearbox_launder_dInReset = 1'd1 ;

  // rule RL_rc_rl_header
  assign CAN_FIRE_RL_rc_rl_header =
	     NOT_rc_gearbox_read_block_96_97_AND_NOT_rc_gea_ETC___d821 &&
	     bridge$RDY_rc_tlps_put &&
	     (rc_gearbox_read_block ?
		rc_gearbox_elem_2[11] :
		rc_gearbox_elem_0[11]) ;
  assign WILL_FIRE_RL_rc_rl_header = CAN_FIRE_RL_rc_rl_header ;

  // rule RL_rc_rl_data_a
  assign CAN_FIRE_RL_rc_rl_data_a =
	     NOT_rc_gearbox_read_block_96_97_AND_NOT_rc_gea_ETC___d821 &&
	     bridge$RDY_rc_tlps_put &&
	     IF_rc_gearbox_read_block_96_THEN_NOT_rc_gearbo_ETC___d885 ;
  assign WILL_FIRE_RL_rc_rl_data_a = CAN_FIRE_RL_rc_rl_data_a ;

  // rule RL_rc_gearbox_sInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_rc_gearbox_sInReset_pre_isResetAssertedUpdate =
	     rc_gearbox_sInReset_pre_isInReset ;
  assign WILL_FIRE_RL_rc_gearbox_sInReset_pre_isResetAssertedUpdate =
	     rc_gearbox_sInReset_pre_isInReset ;

  // rule RL_rc_gearbox_dInReset_pre_isResetAssertedUpdate
  assign CAN_FIRE_RL_rc_gearbox_dInReset_pre_isResetAssertedUpdate =
	     rc_gearbox_dInReset_pre_isInReset ;
  assign WILL_FIRE_RL_rc_gearbox_dInReset_pre_isResetAssertedUpdate =
	     rc_gearbox_dInReset_pre_isInReset ;

  // rule RL_fOut_update
  assign CAN_FIRE_RL_fOut_update = fOut_f$EMPTY_N && bridge$noc_in_dst_rdy ;
  assign WILL_FIRE_RL_fOut_update = CAN_FIRE_RL_fOut_update ;

  // inputs to muxes for submodule ports
  assign MUX_cc_gearbox_block0$_write_1__SEL_1 =
	     WILL_FIRE_RL_cc_rl_header && !cc_gearbox_write_block ;
  assign MUX_cc_gearbox_block1$_write_1__SEL_1 =
	     WILL_FIRE_RL_cc_rl_header && cc_gearbox_write_block ;
  assign MUX_rc_gearbox_elem0_status_0$_write_1__SEL_1 =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail &&
	     !rc_gearbox_write_block ;
  assign MUX_rc_gearbox_elem1_status_1$_write_1__SEL_1 =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail &&
	     rc_gearbox_write_block ;
  assign MUX_rc_gearbox_elem_0$_write_1__SEL_1 =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox &&
	     (rc_rg_in_packet || rc_in_buf$D_OUT[11]) ;
  assign MUX_rc_gearbox_write_block$write_1__SEL_1 =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail &&
	     (rc_gearbox_write_block &&
	      !rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 ||
	      !rc_gearbox_write_block &&
	      !rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695) ;
  assign MUX_rq_gearbox_block0$_write_1__SEL_1 =
	     WILL_FIRE_RL_rq_rl_header && !rq_gearbox_write_block ;
  assign MUX_rq_gearbox_block0$_write_1__SEL_2 =
	     WILL_FIRE_RL_rq_rl_data_a && !rq_gearbox_write_block ;
  assign MUX_rq_gearbox_block0$_write_1__SEL_3 =
	     WILL_FIRE_RL_rq_rl_data_b && !rq_gearbox_write_block ;
  assign MUX_rq_gearbox_block0$_write_1__SEL_4 =
	     WILL_FIRE_RL_rq_rl_data_c && !rq_gearbox_write_block ;
  assign MUX_rq_gearbox_block1$_write_1__SEL_1 =
	     WILL_FIRE_RL_rq_rl_header && rq_gearbox_write_block ;
  assign MUX_rq_gearbox_block1$_write_1__SEL_2 =
	     WILL_FIRE_RL_rq_rl_data_a && rq_gearbox_write_block ;
  assign MUX_rq_gearbox_block1$_write_1__SEL_3 =
	     WILL_FIRE_RL_rq_rl_data_b && rq_gearbox_write_block ;
  assign MUX_rq_gearbox_block1$_write_1__SEL_4 =
	     WILL_FIRE_RL_rq_rl_data_c && rq_gearbox_write_block ;
  assign MUX_bridge$cq_tlps_put_1__VAL_1 =
	     { 1'd1,
	       cq_f_cq_rv[102:99] == 4'd0 || cq_f_cq_rv[102:99] == 4'd2 ||
	       cq_f_cq_rv[98:88] == 11'd1,
	       tlp16_hit__h12901,
	       tlp16_be__h12902,
	       tlp16_data__h12903 } ;
  assign MUX_bridge$cq_tlps_put_1__VAL_2 =
	     { 1'd1,
	       cq_f_cq_rv[102:99] == 4'd0 || cq_f_cq_rv[102:99] == 4'd2 ||
	       cq_f_cq_rv[98:88] == 11'd1,
	       tlp16_hit__h12901,
	       tlp16_be__h12902,
	       tlp16_data__h14295 } ;
  assign MUX_bridge$cq_tlps_put_1__VAL_3 =
	     { 9'd128, tlp16_be__h15546, tlp16_data__h15547 } ;
  assign MUX_bridge$cq_tlps_put_1__VAL_4 =
	     { 1'd0, cq_rg_dwcount == 11'd4, 23'd65535, tlp16_data__h18195 } ;
  assign MUX_bridge$rc_tlps_put_1__VAL_1 =
	     { 1'd1,
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[42:32] ==
	       11'd0 ||
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[42:32] ==
	       11'd1,
	       7'd1,
	       tlp16_be__h56540,
	       tlp16_data__h56541 } ;
  assign MUX_bridge$rc_tlps_put_1__VAL_2 =
	     { 1'd0,
	       rc_rg_dwcount <= 11'd4,
	       7'd0,
	       tlp16_be__h58016,
	       tlp16_data__h58017 } ;
  assign MUX_cc_gearbox_block0$_write_1__VAL_1 =
	     { n_data__h25159,
	       2'b11,
	       cc_f_tlps_rv[151],
	       n_data__h26211,
	       3'd6 } ;
  assign MUX_cc_gearbox_block0$_write_1__VAL_2 =
	     { n_data__h26795,
	       n_keep__h26796,
	       cc_rg_dwcount <= 11'd4,
	       n_data__h28189,
	       n_keep__h28190,
	       cc_rg_dwcount_70_ULE_2___d380 } ;
  assign MUX_cc_rg_dwcount$write_1__VAL_1 = x__h23896 - 11'd1 ;
  assign MUX_cc_rg_dwcount$write_1__VAL_2 =
	     (cc_rg_dwcount < 11'd4) ? 11'd0 : cc_rg_dwcount - 11'd4 ;
  assign MUX_cq_gearbox_elem_0$_write_1__VAL_1 =
	     cq_gearbox_write_block ?
	       cq_gearbox_elem_0 :
	       (cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40 ?
		  cq_in_buf$D_OUT :
		  cq_gearbox_elem_0) ;
  assign MUX_cq_gearbox_elem_0$_write_1__VAL_2 =
	     cq_gearbox_write_block ?
	       cq_gearbox_elem_0 :
	       { data__h9812,
		 !cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40 &&
		 cq_gearbox_elem_0[11],
		 !cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40 &&
		 cq_gearbox_elem_0[10],
		 cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40 ?
		   10'd0 :
		   cq_gearbox_elem_0[9:0] } ;
  assign MUX_cq_gearbox_elem_1$_write_1__VAL_1 =
	     cq_gearbox_write_block ?
	       cq_gearbox_elem_1 :
	       IF_cq_gearbox_elem0_status_1__read__5_EQ_cq_ge_ETC___d72 ;
  assign MUX_cq_gearbox_elem_1$_write_1__VAL_2 =
	     cq_gearbox_write_block ?
	       cq_gearbox_elem_1 :
	       { data__h9910,
		 (!cq_gearbox_elem0_status_1__read__5_EQ_cq_gearb_ETC___d37 ||
		  cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40) &&
		 cq_gearbox_elem_1[11],
		 NOT_cq_gearbox_elem0_status_1__read__5_EQ_cq_g_ETC___d111 } ;
  assign MUX_cq_gearbox_elem_2$_write_1__VAL_1 =
	     cq_gearbox_write_block ?
	       (cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51 ?
		  cq_in_buf$D_OUT :
		  cq_gearbox_elem_2) :
	       cq_gearbox_elem_2 ;
  assign MUX_cq_gearbox_elem_2$_write_1__VAL_2 =
	     cq_gearbox_write_block ?
	       { data__h10677,
		 !cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51 &&
		 cq_gearbox_elem_2[11],
		 !cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51 &&
		 cq_gearbox_elem_2[10],
		 cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51 ?
		   10'd0 :
		   cq_gearbox_elem_2[9:0] } :
	       cq_gearbox_elem_2 ;
  assign MUX_cq_gearbox_elem_3$_write_1__VAL_1 =
	     cq_gearbox_write_block ?
	       IF_cq_gearbox_elem1_status_1__read__6_EQ_cq_ge_ETC___d79 :
	       cq_gearbox_elem_3 ;
  assign MUX_cq_gearbox_elem_3$_write_1__VAL_2 =
	     cq_gearbox_write_block ?
	       { data__h10753,
		 (!cq_gearbox_elem1_status_1__read__6_EQ_cq_gearb_ETC___d48 ||
		  cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51) &&
		 cq_gearbox_elem_3[11],
		 NOT_cq_gearbox_elem1_status_1__read__6_EQ_cq_g_ETC___d134 } :
	       cq_gearbox_elem_3 ;
  assign MUX_cq_rg_dwcount$write_1__VAL_1 = cq_f_cq_rv[98:88] - 11'd1 ;
  assign MUX_cq_rg_dwcount$write_1__VAL_2 = cq_rg_dwcount - 11'd4 ;
  assign MUX_cq_rg_pad_odd_tail$write_1__VAL_1 =
	     cq_in_buf$D_OUT[10] && cq_rg_even_enq ;
  assign MUX_rc_gearbox_elem_0$_write_1__VAL_1 =
	     rc_gearbox_write_block ?
	       rc_gearbox_elem_0 :
	       (rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695 ?
		  rc_in_buf$D_OUT :
		  rc_gearbox_elem_0) ;
  assign MUX_rc_gearbox_elem_0$_write_1__VAL_2 =
	     rc_gearbox_write_block ?
	       rc_gearbox_elem_0 :
	       { data__h54290,
		 !rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695 &&
		 rc_gearbox_elem_0[11],
		 !rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695 &&
		 rc_gearbox_elem_0[10],
		 rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695 ?
		   10'd0 :
		   rc_gearbox_elem_0[9:0] } ;
  assign MUX_rc_gearbox_elem_1$_write_1__VAL_1 =
	     rc_gearbox_write_block ?
	       rc_gearbox_elem_1 :
	       IF_rc_gearbox_elem0_status_1__read__90_EQ_rc_g_ETC___d727 ;
  assign MUX_rc_gearbox_elem_1$_write_1__VAL_2 =
	     rc_gearbox_write_block ?
	       rc_gearbox_elem_1 :
	       { data__h54382,
		 (!rc_gearbox_elem0_status_1__read__90_EQ_rc_gear_ETC___d692 ||
		  rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695) &&
		 rc_gearbox_elem_1[11],
		 NOT_rc_gearbox_elem0_status_1__read__90_EQ_rc__ETC___d770 } ;
  assign MUX_rc_gearbox_elem_2$_write_1__VAL_1 =
	     rc_gearbox_write_block ?
	       (rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 ?
		  rc_in_buf$D_OUT :
		  rc_gearbox_elem_2) :
	       rc_gearbox_elem_2 ;
  assign MUX_rc_gearbox_elem_2$_write_1__VAL_2 =
	     rc_gearbox_write_block ?
	       { data__h55133,
		 !rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 &&
		 rc_gearbox_elem_2[11],
		 !rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 &&
		 rc_gearbox_elem_2[10],
		 rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 ?
		   10'd0 :
		   rc_gearbox_elem_2[9:0] } :
	       rc_gearbox_elem_2 ;
  assign MUX_rc_gearbox_elem_3$_write_1__VAL_1 =
	     rc_gearbox_write_block ?
	       IF_rc_gearbox_elem1_status_1__read__01_EQ_rc_g_ETC___d734 :
	       rc_gearbox_elem_3 ;
  assign MUX_rc_gearbox_elem_3$_write_1__VAL_2 =
	     rc_gearbox_write_block ?
	       { data__h55205,
		 (!rc_gearbox_elem1_status_1__read__01_EQ_rc_gear_ETC___d703 ||
		  rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706) &&
		 rc_gearbox_elem_3[11],
		 NOT_rc_gearbox_elem1_status_1__read__01_EQ_rc__ETC___d793 } :
	       rc_gearbox_elem_3 ;
  assign MUX_rc_rg_dwcount$write_1__VAL_1 =
	     (IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[42:32] ==
	      11'd0) ?
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[42:32] :
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[42:32] -
	       11'd1 ;
  assign MUX_rc_rg_dwcount$write_1__VAL_2 =
	     (rc_rg_dwcount < 11'd4) ? 11'd0 : rc_rg_dwcount - 11'd4 ;
  assign MUX_rc_rg_pad_odd_tail$write_1__VAL_1 =
	     rc_in_buf$D_OUT[10] && rc_rg_even_enq ;
  assign MUX_rq_gearbox_block0$_write_1__VAL_1 =
	     { n_data__h37007,
	       rq_f_tlps_rv[151] && rq_f_tlps_rv[126:125] != 2'd2,
	       2'b11,
	       rq_f_tlps_rv[67:64],
	       rq_f_tlps_rv[71:68],
	       n_data__h37299,
	       3'd3,
	       rq_f_tlps_rv[67:64],
	       rq_f_tlps_rv[71:68] } ;
  assign MUX_rq_gearbox_block0$_write_1__VAL_2 =
	     { 67'd4,
	       rq_rg_first_be,
	       rq_rg_last_be,
	       n_data__h37935,
	       3'd5,
	       rq_rg_first_be,
	       rq_rg_last_be } ;
  assign MUX_rq_gearbox_block0$_write_1__VAL_3 =
	     { n_data__h38470,
	       rq_rg_dwcount_56_ULE_4___d583,
	       n_keep__h38472,
	       rq_rg_first_be,
	       rq_rg_last_be,
	       n_data__h39881,
	       rq_rg_dwcount == 11'd2,
	       2'b11,
	       rq_rg_first_be,
	       rq_rg_last_be } ;
  assign MUX_rq_gearbox_block0$_write_1__VAL_4 =
	     { n_data__h41940,
	       rq_rg_dwcount_56_ULE_4___d583,
	       n_keep__h41942,
	       rq_rg_first_be,
	       rq_rg_last_be,
	       n_data__h43340,
	       rq_rg_dwcount_56_ULE_2___d610,
	       n_keep__h43342,
	       rq_rg_first_be,
	       rq_rg_last_be } ;
  assign MUX_rq_rg_dwcount$write_1__VAL_1 =
	     (rq_f_tlps_rv[126:125] == 2'd2 ||
	      rq_f_tlps_rv[126:125] == 2'd3) ?
	       _theResult___snd_dwcount__h34980 :
	       11'd0 ;
  assign MUX_rq_rg_dwcount$write_1__VAL_2 =
	     (rq_rg_dwcount < 11'd4) ?
	       11'd0 :
	       rq_rg_dwcount_56_MINUS_4___d598 ;
  assign MUX_rq_rg_dwcount$write_1__VAL_3 =
	     rq_rg_dwcount_56_ULE_4___d583 ?
	       11'd0 :
	       rq_rg_dwcount_56_MINUS_4___d598 ;
  assign MUX_rq_rg_mdw$write_1__VAL_1 =
	     { rq_f_tlps_rv[126:125] == 2'd2,
	       rq_f_tlps_rv[7:0],
	       rq_f_tlps_rv[15:8],
	       rq_f_tlps_rv[23:16],
	       rq_f_tlps_rv[31:24] } ;
  assign MUX_rq_rg_mdw$write_1__VAL_3 =
	     { !rq_rg_dwcount_56_ULE_4___d583,
	       rq_f_tlps_rv[7:0],
	       rq_f_tlps_rv[15:8],
	       rq_f_tlps_rv[23:16],
	       rq_f_tlps_rv[31:24] } ;

  // inlined wires
  assign rc_gearbox_pwEnqueue$whas =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox &&
	     (rc_rg_in_packet || rc_in_buf$D_OUT[11]) ||
	     WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail ;
  assign rc_gearbox_pwDequeue$whas =
	     WILL_FIRE_RL_rc_rl_data_a || WILL_FIRE_RL_rc_rl_header ;
  assign cq_f_cq_rv$EN_port0__write =
	     WILL_FIRE_RL_cq_rl_data_4 || WILL_FIRE_RL_cq_rl_data_1_to_3 ||
	     WILL_FIRE_RL_cq_rl_data_0 ||
	     WILL_FIRE_RL_cq_rl_rd_header ||
	     WILL_FIRE_RL_cq_rl_wr_header ;
  assign cq_f_cq_rv$port1__read =
	     cq_f_cq_rv$EN_port0__write ?
	       153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cq_f_cq_rv ;
  assign cq_f_cq_rv$port1__write_1 =
	     { 1'd1,
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d176 } ;
  assign cq_f_cq_rv$port2__read =
	     CAN_FIRE_RL_cq_rl_slowclock ?
	       cq_f_cq_rv$port1__write_1 :
	       cq_f_cq_rv$port1__read ;
  assign cc_f_tlps_rv$EN_port0__write =
	     WILL_FIRE_RL_cc_rl_data || WILL_FIRE_RL_cc_rl_header ;
  assign cc_f_tlps_rv$port1__read =
	     cc_f_tlps_rv$EN_port0__write ?
	       154'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cc_f_tlps_rv ;
  assign cc_f_tlps_rv$port1__write_1 = { 1'd1, bridge$cc_tlps_get } ;
  assign cc_f_tlps_rv$port2__read =
	     CAN_FIRE_RL_cc_rl_get_tlps ?
	       cc_f_tlps_rv$port1__write_1 :
	       cc_f_tlps_rv$port1__read ;
  assign rq_f_tlps_rv$EN_port0__write =
	     WILL_FIRE_RL_rq_rl_data_c || WILL_FIRE_RL_rq_rl_data_b ||
	     WILL_FIRE_RL_rq_rl_header ;
  assign rq_f_tlps_rv$port1__read =
	     rq_f_tlps_rv$EN_port0__write ?
	       154'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       rq_f_tlps_rv ;
  assign rq_f_tlps_rv$port1__write_1 = { 1'd1, bridge$rq_tlps_get } ;
  assign rq_f_tlps_rv$port2__read =
	     CAN_FIRE_RL_rq_rl_get_tlps ?
	       rq_f_tlps_rv$port1__write_1 :
	       rq_f_tlps_rv$port1__read ;

  // register cc_f_tlps_rv
  assign cc_f_tlps_rv$D_IN = cc_f_tlps_rv$port2__read ;
  assign cc_f_tlps_rv$EN = 1'b1 ;

  // register cc_gearbox_block0
  assign cc_gearbox_block0$D_IN =
	     MUX_cc_gearbox_block0$_write_1__SEL_1 ?
	       MUX_cc_gearbox_block0$_write_1__VAL_1 :
	       MUX_cc_gearbox_block0$_write_1__VAL_2 ;
  assign cc_gearbox_block0$EN =
	     WILL_FIRE_RL_cc_rl_header && !cc_gearbox_write_block ||
	     WILL_FIRE_RL_cc_rl_data && !cc_gearbox_write_block ;

  // register cc_gearbox_block0_status
  assign cc_gearbox_block0_status$D_IN = !cc_gearbox_block0_status ;
  assign cc_gearbox_block0_status$EN =
	     _dor1cc_gearbox_block0_status$EN__write &&
	     !cc_gearbox_write_block ;

  // register cc_gearbox_block1
  assign cc_gearbox_block1$D_IN =
	     MUX_cc_gearbox_block1$_write_1__SEL_1 ?
	       MUX_cc_gearbox_block0$_write_1__VAL_1 :
	       MUX_cc_gearbox_block0$_write_1__VAL_2 ;
  assign cc_gearbox_block1$EN =
	     WILL_FIRE_RL_cc_rl_header && cc_gearbox_write_block ||
	     WILL_FIRE_RL_cc_rl_data && cc_gearbox_write_block ;

  // register cc_gearbox_block1_status
  assign cc_gearbox_block1_status$D_IN = !cc_gearbox_block1_status ;
  assign cc_gearbox_block1_status$EN =
	     _dor1cc_gearbox_block1_status$EN__write &&
	     cc_gearbox_write_block ;

  // register cc_gearbox_dInReset_pre_isInReset
  assign cc_gearbox_dInReset_pre_isInReset$D_IN = 1'd0 ;
  assign cc_gearbox_dInReset_pre_isInReset$EN =
	     cc_gearbox_dInReset_pre_isInReset ;

  // register cc_gearbox_elem0_status_0
  assign cc_gearbox_elem0_status_0$D_IN = cc_gearbox_block0_status ;
  assign cc_gearbox_elem0_status_0$EN =
	     WILL_FIRE_RL_cc_rl_fastclock && !cc_gearbox_read_block ;

  // register cc_gearbox_elem0_status_1
  assign cc_gearbox_elem0_status_1$D_IN = cc_gearbox_elem0_status_0 ;
  assign cc_gearbox_elem0_status_1$EN =
	     WILL_FIRE_RL_cc_rl_fastclock && !cc_gearbox_read_block ;

  // register cc_gearbox_elem1_status_0
  assign cc_gearbox_elem1_status_0$D_IN = cc_gearbox_block1_status ;
  assign cc_gearbox_elem1_status_0$EN =
	     WILL_FIRE_RL_cc_rl_fastclock && cc_gearbox_read_block ;

  // register cc_gearbox_elem1_status_1
  assign cc_gearbox_elem1_status_1$D_IN = cc_gearbox_elem1_status_0 ;
  assign cc_gearbox_elem1_status_1$EN =
	     WILL_FIRE_RL_cc_rl_fastclock && cc_gearbox_read_block ;

  // register cc_gearbox_read_block
  assign cc_gearbox_read_block$D_IN = !cc_gearbox_read_block ;
  assign cc_gearbox_read_block$EN =
	     WILL_FIRE_RL_cc_rl_fastclock &&
	     (cc_gearbox_read_block &&
	      cc_gearbox_elem1_status_0__read__18_EQ_cc_gear_ETC___d419 ||
	      !cc_gearbox_read_block &&
	      cc_gearbox_elem0_status_0__read__09_EQ_cc_gear_ETC___d410) ;

  // register cc_gearbox_sInReset_pre_isInReset
  assign cc_gearbox_sInReset_pre_isInReset$D_IN = 1'd0 ;
  assign cc_gearbox_sInReset_pre_isInReset$EN =
	     cc_gearbox_sInReset_pre_isInReset ;

  // register cc_gearbox_write_block
  assign cc_gearbox_write_block$D_IN = ~cc_gearbox_write_block ;
  assign cc_gearbox_write_block$EN =
	     WILL_FIRE_RL_cc_rl_data || WILL_FIRE_RL_cc_rl_header ;

  // register cc_rg_dwcount
  assign cc_rg_dwcount$D_IN =
	     WILL_FIRE_RL_cc_rl_header ?
	       MUX_cc_rg_dwcount$write_1__VAL_1 :
	       MUX_cc_rg_dwcount$write_1__VAL_2 ;
  assign cc_rg_dwcount$EN =
	     WILL_FIRE_RL_cc_rl_header || WILL_FIRE_RL_cc_rl_data ;

  // register cnt
  assign cnt$D_IN = cnt_32_EQ_vecSize_33___d934 ? 8'd0 : cnt + 8'd1 ;
  assign cnt$EN = CAN_FIRE_RL_xferBeat ;

  // register cq_f_cq_rv
  assign cq_f_cq_rv$D_IN = cq_f_cq_rv$port2__read ;
  assign cq_f_cq_rv$EN = 1'b1 ;

  // register cq_gearbox_block0_status
  assign cq_gearbox_block0_status$D_IN = !cq_gearbox_block0_status ;
  assign cq_gearbox_block0_status$EN =
	     WILL_FIRE_RL_cq_rl_slowclock && !cq_gearbox_read_block ;

  // register cq_gearbox_block1_status
  assign cq_gearbox_block1_status$D_IN = !cq_gearbox_block1_status ;
  assign cq_gearbox_block1_status$EN =
	     WILL_FIRE_RL_cq_rl_slowclock && cq_gearbox_read_block ;

  // register cq_gearbox_dInReset_pre_isInReset
  assign cq_gearbox_dInReset_pre_isInReset$D_IN = 1'd0 ;
  assign cq_gearbox_dInReset_pre_isInReset$EN =
	     cq_gearbox_dInReset_pre_isInReset ;

  // register cq_gearbox_elem0_status_0
  assign cq_gearbox_elem0_status_0$D_IN = !cq_gearbox_block0_status ;
  assign cq_gearbox_elem0_status_0$EN =
	     _dor1cq_gearbox_elem0_status_0$EN__write &&
	     !cq_gearbox_write_block ;

  // register cq_gearbox_elem0_status_1
  assign cq_gearbox_elem0_status_1$D_IN = cq_gearbox_elem0_status_0 ;
  assign cq_gearbox_elem0_status_1$EN =
	     _dor1cq_gearbox_elem0_status_1$EN__write &&
	     !cq_gearbox_write_block ;

  // register cq_gearbox_elem1_status_0
  assign cq_gearbox_elem1_status_0$D_IN = !cq_gearbox_block1_status ;
  assign cq_gearbox_elem1_status_0$EN =
	     _dor1cq_gearbox_elem1_status_0$EN__write &&
	     cq_gearbox_write_block ;

  // register cq_gearbox_elem1_status_1
  assign cq_gearbox_elem1_status_1$D_IN = cq_gearbox_elem1_status_0 ;
  assign cq_gearbox_elem1_status_1$EN =
	     _dor1cq_gearbox_elem1_status_1$EN__write &&
	     cq_gearbox_write_block ;

  // register cq_gearbox_elem_0
  assign cq_gearbox_elem_0$D_IN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ?
	       MUX_cq_gearbox_elem_0$_write_1__VAL_1 :
	       MUX_cq_gearbox_elem_0$_write_1__VAL_2 ;
  assign cq_gearbox_elem_0$EN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ;

  // register cq_gearbox_elem_1
  assign cq_gearbox_elem_1$D_IN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ?
	       MUX_cq_gearbox_elem_1$_write_1__VAL_1 :
	       MUX_cq_gearbox_elem_1$_write_1__VAL_2 ;
  assign cq_gearbox_elem_1$EN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ;

  // register cq_gearbox_elem_2
  assign cq_gearbox_elem_2$D_IN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ?
	       MUX_cq_gearbox_elem_2$_write_1__VAL_1 :
	       MUX_cq_gearbox_elem_2$_write_1__VAL_2 ;
  assign cq_gearbox_elem_2$EN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ;

  // register cq_gearbox_elem_3
  assign cq_gearbox_elem_3$D_IN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ?
	       MUX_cq_gearbox_elem_3$_write_1__VAL_1 :
	       MUX_cq_gearbox_elem_3$_write_1__VAL_2 ;
  assign cq_gearbox_elem_3$EN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ;

  // register cq_gearbox_read_block
  assign cq_gearbox_read_block$D_IN = ~cq_gearbox_read_block ;
  assign cq_gearbox_read_block$EN = CAN_FIRE_RL_cq_rl_slowclock ;

  // register cq_gearbox_sInReset_pre_isInReset
  assign cq_gearbox_sInReset_pre_isInReset$D_IN = 1'd0 ;
  assign cq_gearbox_sInReset_pre_isInReset$EN =
	     cq_gearbox_sInReset_pre_isInReset ;

  // register cq_gearbox_write_block
  assign cq_gearbox_write_block$D_IN = !cq_gearbox_write_block ;
  assign cq_gearbox_write_block$EN =
	     _dor1cq_gearbox_write_block$EN_write &&
	     (cq_gearbox_write_block &&
	      !cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51 ||
	      !cq_gearbox_write_block &&
	      !cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40) ;

  // register cq_rg_dwcount
  always@(WILL_FIRE_RL_cq_rl_wr_header or
	  MUX_cq_rg_dwcount$write_1__VAL_1 or
	  WILL_FIRE_RL_cq_rl_data_4 or
	  MUX_cq_rg_dwcount$write_1__VAL_2 or WILL_FIRE_RL_cq_rl_data_1_to_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cq_rl_wr_header:
	  cq_rg_dwcount$D_IN = MUX_cq_rg_dwcount$write_1__VAL_1;
      WILL_FIRE_RL_cq_rl_data_4:
	  cq_rg_dwcount$D_IN = MUX_cq_rg_dwcount$write_1__VAL_2;
      WILL_FIRE_RL_cq_rl_data_1_to_3: cq_rg_dwcount$D_IN = 11'd0;
      default: cq_rg_dwcount$D_IN = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign cq_rg_dwcount$EN =
	     WILL_FIRE_RL_cq_rl_wr_header || WILL_FIRE_RL_cq_rl_data_4 ||
	     WILL_FIRE_RL_cq_rl_data_1_to_3 ;

  // register cq_rg_even_enq
  assign cq_rg_even_enq$D_IN =
	     !WILL_FIRE_RL_cq_rl_g_to_gearbox || !cq_rg_even_enq ;
  assign cq_rg_even_enq$EN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ;

  // register cq_rg_pad_odd_tail
  assign cq_rg_pad_odd_tail$D_IN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox &&
	     MUX_cq_rg_pad_odd_tail$write_1__VAL_1 ;
  assign cq_rg_pad_odd_tail$EN =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ;

  // register intr_on
  assign intr_on$D_IN =
	     msix_enable_cr && _unnamed_$status_function_status[2] ;
  assign intr_on$EN = 1'd1 ;

  // register lnk_up_cr
  assign lnk_up_cr$D_IN = _unnamed_$status_lnk_up ;
  assign lnk_up_cr$EN = 1'd1 ;

  // register max_payload_bytes
  assign max_payload_bytes$D_IN = max_payload_cr ;
  assign max_payload_bytes$EN = 1'd1 ;

  // register max_payload_cr
  assign max_payload_cr$D_IN = 13'd128 << _unnamed_$status_max_payload ;
  assign max_payload_cr$EN = 1'd1 ;

  // register max_rd_req_cr
  assign max_rd_req_cr$D_IN = 13'd128 << _unnamed_$status_max_read_req ;
  assign max_rd_req_cr$EN = 1'd1 ;

  // register max_read_req_bytes
  assign max_read_req_bytes$D_IN = max_rd_req_cr ;
  assign max_read_req_bytes$EN = 1'd1 ;

  // register msix_enable
  assign msix_enable$D_IN = msix_enable_cr ;
  assign msix_enable$EN = 1'd1 ;

  // register msix_enable_cr
  assign msix_enable_cr$D_IN = _unnamed_$cfg_interrupt_msix_enabled[0] ;
  assign msix_enable_cr$EN = 1'd1 ;

  // register msix_masked
  assign msix_masked$D_IN = msix_masked_cr ;
  assign msix_masked$EN = 1'd1 ;

  // register msix_masked_cr
  assign msix_masked_cr$D_IN = _unnamed_$cfg_interrupt_msix_mask[0] ;
  assign msix_masked_cr$EN = 1'd1 ;

  // register rc_gearbox_block0_status
  assign rc_gearbox_block0_status$D_IN = !rc_gearbox_block0_status ;
  assign rc_gearbox_block0_status$EN =
	     _dor1rc_gearbox_block0_status$EN__write &&
	     !rc_gearbox_read_block ;

  // register rc_gearbox_block1_status
  assign rc_gearbox_block1_status$D_IN = !rc_gearbox_block1_status ;
  assign rc_gearbox_block1_status$EN =
	     _dor1rc_gearbox_block1_status$EN__write &&
	     rc_gearbox_read_block ;

  // register rc_gearbox_dInReset_pre_isInReset
  assign rc_gearbox_dInReset_pre_isInReset$D_IN = 1'd0 ;
  assign rc_gearbox_dInReset_pre_isInReset$EN =
	     rc_gearbox_dInReset_pre_isInReset ;

  // register rc_gearbox_elem0_status_0
  assign rc_gearbox_elem0_status_0$D_IN =
	     MUX_rc_gearbox_elem0_status_0$_write_1__SEL_1 ?
	       !rc_gearbox_block0_status :
	       !rc_gearbox_block0_status ;
  assign rc_gearbox_elem0_status_0$EN =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail &&
	     !rc_gearbox_write_block ||
	     WILL_FIRE_RL_rc_rl_g_to_gearbox &&
	     (rc_rg_in_packet || rc_in_buf$D_OUT[11]) &&
	     !rc_gearbox_write_block ;

  // register rc_gearbox_elem0_status_1
  assign rc_gearbox_elem0_status_1$D_IN = rc_gearbox_elem0_status_0 ;
  assign rc_gearbox_elem0_status_1$EN =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail &&
	     !rc_gearbox_write_block ||
	     WILL_FIRE_RL_rc_rl_g_to_gearbox &&
	     (rc_rg_in_packet || rc_in_buf$D_OUT[11]) &&
	     !rc_gearbox_write_block ;

  // register rc_gearbox_elem1_status_0
  assign rc_gearbox_elem1_status_0$D_IN =
	     MUX_rc_gearbox_elem1_status_1$_write_1__SEL_1 ?
	       !rc_gearbox_block1_status :
	       !rc_gearbox_block1_status ;
  assign rc_gearbox_elem1_status_0$EN =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail &&
	     rc_gearbox_write_block ||
	     WILL_FIRE_RL_rc_rl_g_to_gearbox &&
	     (rc_rg_in_packet || rc_in_buf$D_OUT[11]) &&
	     rc_gearbox_write_block ;

  // register rc_gearbox_elem1_status_1
  assign rc_gearbox_elem1_status_1$D_IN = rc_gearbox_elem1_status_0 ;
  assign rc_gearbox_elem1_status_1$EN =
	     WILL_FIRE_RL_rc_rl_g_to_gearbox_pad_odd_tail &&
	     rc_gearbox_write_block ||
	     WILL_FIRE_RL_rc_rl_g_to_gearbox &&
	     (rc_rg_in_packet || rc_in_buf$D_OUT[11]) &&
	     rc_gearbox_write_block ;

  // register rc_gearbox_elem_0
  assign rc_gearbox_elem_0$D_IN =
	     MUX_rc_gearbox_elem_0$_write_1__SEL_1 ?
	       MUX_rc_gearbox_elem_0$_write_1__VAL_1 :
	       MUX_rc_gearbox_elem_0$_write_1__VAL_2 ;
  assign rc_gearbox_elem_0$EN = rc_gearbox_pwEnqueue$whas ;

  // register rc_gearbox_elem_1
  assign rc_gearbox_elem_1$D_IN =
	     MUX_rc_gearbox_elem_0$_write_1__SEL_1 ?
	       MUX_rc_gearbox_elem_1$_write_1__VAL_1 :
	       MUX_rc_gearbox_elem_1$_write_1__VAL_2 ;
  assign rc_gearbox_elem_1$EN = rc_gearbox_pwEnqueue$whas ;

  // register rc_gearbox_elem_2
  assign rc_gearbox_elem_2$D_IN =
	     MUX_rc_gearbox_elem_0$_write_1__SEL_1 ?
	       MUX_rc_gearbox_elem_2$_write_1__VAL_1 :
	       MUX_rc_gearbox_elem_2$_write_1__VAL_2 ;
  assign rc_gearbox_elem_2$EN = rc_gearbox_pwEnqueue$whas ;

  // register rc_gearbox_elem_3
  assign rc_gearbox_elem_3$D_IN =
	     MUX_rc_gearbox_elem_0$_write_1__SEL_1 ?
	       MUX_rc_gearbox_elem_3$_write_1__VAL_1 :
	       MUX_rc_gearbox_elem_3$_write_1__VAL_2 ;
  assign rc_gearbox_elem_3$EN = rc_gearbox_pwEnqueue$whas ;

  // register rc_gearbox_read_block
  assign rc_gearbox_read_block$D_IN = ~rc_gearbox_read_block ;
  assign rc_gearbox_read_block$EN = rc_gearbox_pwDequeue$whas ;

  // register rc_gearbox_sInReset_pre_isInReset
  assign rc_gearbox_sInReset_pre_isInReset$D_IN = 1'd0 ;
  assign rc_gearbox_sInReset_pre_isInReset$EN =
	     rc_gearbox_sInReset_pre_isInReset ;

  // register rc_gearbox_write_block
  assign rc_gearbox_write_block$D_IN =
	     MUX_rc_gearbox_write_block$write_1__SEL_1 ?
	       !rc_gearbox_write_block :
	       !rc_gearbox_write_block ;
  assign rc_gearbox_write_block$EN =
	     MUX_rc_gearbox_write_block$write_1__SEL_1 ||
	     WILL_FIRE_RL_rc_rl_g_to_gearbox &&
	     rc_rg_in_packet_82_OR_rc_in_buf_first__84_BIT__ETC___d739 ;

  // register rc_rg_dwcount
  assign rc_rg_dwcount$D_IN =
	     WILL_FIRE_RL_rc_rl_header ?
	       MUX_rc_rg_dwcount$write_1__VAL_1 :
	       MUX_rc_rg_dwcount$write_1__VAL_2 ;
  assign rc_rg_dwcount$EN =
	     WILL_FIRE_RL_rc_rl_header || WILL_FIRE_RL_rc_rl_data_a ;

  // register rc_rg_even_enq
  assign rc_rg_even_enq$D_IN =
	     !MUX_rc_gearbox_elem_0$_write_1__SEL_1 || !rc_rg_even_enq ;
  assign rc_rg_even_enq$EN = rc_gearbox_pwEnqueue$whas ;

  // register rc_rg_in_packet
  assign rc_rg_in_packet$D_IN = !rc_in_buf$D_OUT[10] ;
  assign rc_rg_in_packet$EN = MUX_rc_gearbox_elem_0$_write_1__SEL_1 ;

  // register rc_rg_pad_odd_tail
  assign rc_rg_pad_odd_tail$D_IN =
	     MUX_rc_gearbox_elem_0$_write_1__SEL_1 &&
	     MUX_rc_rg_pad_odd_tail$write_1__VAL_1 ;
  assign rc_rg_pad_odd_tail$EN = rc_gearbox_pwEnqueue$whas ;

  // register rcb_cr
  assign rcb_cr$D_IN = 8'd64 << _unnamed_$status_rcb_status[0] ;
  assign rcb_cr$EN = 1'd1 ;

  // register rcb_mask
  assign rcb_mask$D_IN = (rcb_cr == 8'd64) ? 7'h3F : 7'h7F ;
  assign rcb_mask$EN = 1'd1 ;

  // register rq_f_tlps_rv
  assign rq_f_tlps_rv$D_IN = rq_f_tlps_rv$port2__read ;
  assign rq_f_tlps_rv$EN = 1'b1 ;

  // register rq_gearbox_block0
  always@(MUX_rq_gearbox_block0$_write_1__SEL_1 or
	  MUX_rq_gearbox_block0$_write_1__VAL_1 or
	  MUX_rq_gearbox_block0$_write_1__SEL_2 or
	  MUX_rq_gearbox_block0$_write_1__VAL_2 or
	  MUX_rq_gearbox_block0$_write_1__SEL_3 or
	  MUX_rq_gearbox_block0$_write_1__VAL_3 or
	  MUX_rq_gearbox_block0$_write_1__SEL_4 or
	  MUX_rq_gearbox_block0$_write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rq_gearbox_block0$_write_1__SEL_1:
	  rq_gearbox_block0$D_IN = MUX_rq_gearbox_block0$_write_1__VAL_1;
      MUX_rq_gearbox_block0$_write_1__SEL_2:
	  rq_gearbox_block0$D_IN = MUX_rq_gearbox_block0$_write_1__VAL_2;
      MUX_rq_gearbox_block0$_write_1__SEL_3:
	  rq_gearbox_block0$D_IN = MUX_rq_gearbox_block0$_write_1__VAL_3;
      MUX_rq_gearbox_block0$_write_1__SEL_4:
	  rq_gearbox_block0$D_IN = MUX_rq_gearbox_block0$_write_1__VAL_4;
      default: rq_gearbox_block0$D_IN =
		   150'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rq_gearbox_block0$EN =
	     WILL_FIRE_RL_rq_rl_header && !rq_gearbox_write_block ||
	     WILL_FIRE_RL_rq_rl_data_a && !rq_gearbox_write_block ||
	     WILL_FIRE_RL_rq_rl_data_b && !rq_gearbox_write_block ||
	     WILL_FIRE_RL_rq_rl_data_c && !rq_gearbox_write_block ;

  // register rq_gearbox_block0_status
  assign rq_gearbox_block0_status$D_IN = !rq_gearbox_block0_status ;
  assign rq_gearbox_block0_status$EN =
	     _dor1rq_gearbox_block0_status$EN__write &&
	     !rq_gearbox_write_block ;

  // register rq_gearbox_block1
  always@(MUX_rq_gearbox_block1$_write_1__SEL_1 or
	  MUX_rq_gearbox_block0$_write_1__VAL_1 or
	  MUX_rq_gearbox_block1$_write_1__SEL_2 or
	  MUX_rq_gearbox_block0$_write_1__VAL_2 or
	  MUX_rq_gearbox_block1$_write_1__SEL_3 or
	  MUX_rq_gearbox_block0$_write_1__VAL_3 or
	  MUX_rq_gearbox_block1$_write_1__SEL_4 or
	  MUX_rq_gearbox_block0$_write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rq_gearbox_block1$_write_1__SEL_1:
	  rq_gearbox_block1$D_IN = MUX_rq_gearbox_block0$_write_1__VAL_1;
      MUX_rq_gearbox_block1$_write_1__SEL_2:
	  rq_gearbox_block1$D_IN = MUX_rq_gearbox_block0$_write_1__VAL_2;
      MUX_rq_gearbox_block1$_write_1__SEL_3:
	  rq_gearbox_block1$D_IN = MUX_rq_gearbox_block0$_write_1__VAL_3;
      MUX_rq_gearbox_block1$_write_1__SEL_4:
	  rq_gearbox_block1$D_IN = MUX_rq_gearbox_block0$_write_1__VAL_4;
      default: rq_gearbox_block1$D_IN =
		   150'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rq_gearbox_block1$EN =
	     WILL_FIRE_RL_rq_rl_header && rq_gearbox_write_block ||
	     WILL_FIRE_RL_rq_rl_data_a && rq_gearbox_write_block ||
	     WILL_FIRE_RL_rq_rl_data_b && rq_gearbox_write_block ||
	     WILL_FIRE_RL_rq_rl_data_c && rq_gearbox_write_block ;

  // register rq_gearbox_block1_status
  assign rq_gearbox_block1_status$D_IN = !rq_gearbox_block1_status ;
  assign rq_gearbox_block1_status$EN =
	     _dor1rq_gearbox_block1_status$EN__write &&
	     rq_gearbox_write_block ;

  // register rq_gearbox_dInReset_pre_isInReset
  assign rq_gearbox_dInReset_pre_isInReset$D_IN = 1'd0 ;
  assign rq_gearbox_dInReset_pre_isInReset$EN =
	     rq_gearbox_dInReset_pre_isInReset ;

  // register rq_gearbox_elem0_status_0
  assign rq_gearbox_elem0_status_0$D_IN = rq_gearbox_block0_status ;
  assign rq_gearbox_elem0_status_0$EN =
	     WILL_FIRE_RL_rq_rl_fastclock && !rq_gearbox_read_block ;

  // register rq_gearbox_elem0_status_1
  assign rq_gearbox_elem0_status_1$D_IN = rq_gearbox_elem0_status_0 ;
  assign rq_gearbox_elem0_status_1$EN =
	     WILL_FIRE_RL_rq_rl_fastclock && !rq_gearbox_read_block ;

  // register rq_gearbox_elem1_status_0
  assign rq_gearbox_elem1_status_0$D_IN = rq_gearbox_block1_status ;
  assign rq_gearbox_elem1_status_0$EN =
	     WILL_FIRE_RL_rq_rl_fastclock && rq_gearbox_read_block ;

  // register rq_gearbox_elem1_status_1
  assign rq_gearbox_elem1_status_1$D_IN = rq_gearbox_elem1_status_0 ;
  assign rq_gearbox_elem1_status_1$EN =
	     WILL_FIRE_RL_rq_rl_fastclock && rq_gearbox_read_block ;

  // register rq_gearbox_read_block
  assign rq_gearbox_read_block$D_IN = !rq_gearbox_read_block ;
  assign rq_gearbox_read_block$EN =
	     WILL_FIRE_RL_rq_rl_fastclock &&
	     (rq_gearbox_read_block &&
	      rq_gearbox_elem1_status_0__read__33_EQ_rq_gear_ETC___d634 ||
	      !rq_gearbox_read_block &&
	      rq_gearbox_elem0_status_0__read__24_EQ_rq_gear_ETC___d625) ;

  // register rq_gearbox_sInReset_pre_isInReset
  assign rq_gearbox_sInReset_pre_isInReset$D_IN = 1'd0 ;
  assign rq_gearbox_sInReset_pre_isInReset$EN =
	     rq_gearbox_sInReset_pre_isInReset ;

  // register rq_gearbox_write_block
  assign rq_gearbox_write_block$D_IN = ~rq_gearbox_write_block ;
  assign rq_gearbox_write_block$EN =
	     WILL_FIRE_RL_rq_rl_data_c || WILL_FIRE_RL_rq_rl_data_b ||
	     WILL_FIRE_RL_rq_rl_data_a ||
	     WILL_FIRE_RL_rq_rl_header ;

  // register rq_rg_dwcount
  always@(WILL_FIRE_RL_rq_rl_header or
	  MUX_rq_rg_dwcount$write_1__VAL_1 or
	  WILL_FIRE_RL_rq_rl_data_c or
	  MUX_rq_rg_dwcount$write_1__VAL_2 or
	  WILL_FIRE_RL_rq_rl_data_b or
	  MUX_rq_rg_dwcount$write_1__VAL_3 or WILL_FIRE_RL_rq_rl_data_a)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rq_rl_header:
	  rq_rg_dwcount$D_IN = MUX_rq_rg_dwcount$write_1__VAL_1;
      WILL_FIRE_RL_rq_rl_data_c:
	  rq_rg_dwcount$D_IN = MUX_rq_rg_dwcount$write_1__VAL_2;
      WILL_FIRE_RL_rq_rl_data_b:
	  rq_rg_dwcount$D_IN = MUX_rq_rg_dwcount$write_1__VAL_3;
      WILL_FIRE_RL_rq_rl_data_a: rq_rg_dwcount$D_IN = 11'd0;
      default: rq_rg_dwcount$D_IN = 11'b01010101010 /* unspecified value */ ;
    endcase
  end
  assign rq_rg_dwcount$EN =
	     WILL_FIRE_RL_rq_rl_header || WILL_FIRE_RL_rq_rl_data_c ||
	     WILL_FIRE_RL_rq_rl_data_b ||
	     WILL_FIRE_RL_rq_rl_data_a ;

  // register rq_rg_first_be
  assign rq_rg_first_be$D_IN = rq_f_tlps_rv[67:64] ;
  assign rq_rg_first_be$EN = CAN_FIRE_RL_rq_rl_header ;

  // register rq_rg_last_be
  assign rq_rg_last_be$D_IN = rq_f_tlps_rv[71:68] ;
  assign rq_rg_last_be$EN = CAN_FIRE_RL_rq_rl_header ;

  // register rq_rg_mdw
  always@(WILL_FIRE_RL_rq_rl_header or
	  MUX_rq_rg_mdw$write_1__VAL_1 or
	  WILL_FIRE_RL_rq_rl_data_a or
	  WILL_FIRE_RL_rq_rl_data_b or MUX_rq_rg_mdw$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rq_rl_header:
	  rq_rg_mdw$D_IN = MUX_rq_rg_mdw$write_1__VAL_1;
      WILL_FIRE_RL_rq_rl_data_a: rq_rg_mdw$D_IN = 33'h0AAAAAAAA;
      WILL_FIRE_RL_rq_rl_data_b:
	  rq_rg_mdw$D_IN = MUX_rq_rg_mdw$write_1__VAL_3;
      default: rq_rg_mdw$D_IN = 33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rq_rg_mdw$EN =
	     WILL_FIRE_RL_rq_rl_header || WILL_FIRE_RL_rq_rl_data_a ||
	     WILL_FIRE_RL_rq_rl_data_b ;

  // register trace
  assign trace$D_IN = axis_xactor_f_data$D_OUT[728:153] ;
  assign trace$EN = WILL_FIRE_RL_xferBeat && cnt_32_EQ_vecSize_33___d934 ;

  // register tracesOn
  assign tracesOn$D_IN = vrgs_0 == 2'd1 ;
  assign tracesOn$EN = vrgs_0 == 2'd1 || vrgs_0 == 2'd2 ;

  // register vecSize
  assign vecSize$D_IN =
	     axis_xactor_f_dataD_OUT_BITS_760_TO_729_PLUS__ETC__q2[7:0] ;
  assign vecSize$EN = WILL_FIRE_RL_xferBeat && cnt_32_EQ_vecSize_33___d934 ;

  // register vrgs_0
  assign vrgs_0$D_IN = vrgs_1 ;
  assign vrgs_0$EN = 1'd1 ;

  // register vrgs_1
  assign vrgs_1$D_IN = vrgs_2 ;
  assign vrgs_1$EN = 1'd1 ;

  // register vrgs_2
  assign vrgs_2$D_IN = vrgs_3 ;
  assign vrgs_2$EN = 1'd1 ;

  // register vrgs_3
  assign vrgs_3$D_IN = vrgs_4 ;
  assign vrgs_3$EN = 1'd1 ;

  // register vrgs_4
  assign vrgs_4$D_IN = vrgs_5 ;
  assign vrgs_4$EN = 1'd1 ;

  // register vrgs_5
  assign vrgs_5$D_IN = vrgs_6 ;
  assign vrgs_5$EN = 1'd1 ;

  // register vrgs_6
  assign vrgs_6$D_IN = vrgs_7 ;
  assign vrgs_6$EN = 1'd1 ;

  // register vrgs_7
  assign vrgs_7$D_IN = tvswitch ;
  assign vrgs_7$EN = 1'd1 ;

  // submodule _unnamed_
  assign _unnamed_$cc_xmit_put =
	     cc_gearbox_read_block ?
	       ((!cc_gearbox_elem1_status_1__read__15_EQ_cc_gear_ETC___d417 &&
		 cc_gearbox_elem1_status_0__read__18_EQ_cc_gear_ETC___d419) ?
		  cc_gearbox_block1[133:67] :
		  cc_gearbox_block1[66:0]) :
	       ((!cc_gearbox_elem0_status_1__read__06_EQ_cc_gear_ETC___d408 &&
		 cc_gearbox_elem0_status_0__read__09_EQ_cc_gear_ETC___d410) ?
		  cc_gearbox_block0[133:67] :
		  cc_gearbox_block0[66:0]) ;
  assign _unnamed_$pcie_in_m_axis_cc_tready = m_axis_cc_tready ;
  assign _unnamed_$pcie_in_m_axis_rq_tready = m_axis_rq_tready ;
  assign _unnamed_$pcie_in_pcie4_cfg_control_bus_number =
	     pcie4_cfg_control_bus_number ;
  assign _unnamed_$pcie_in_pcie4_cfg_control_flr_in_process =
	     pcie4_cfg_control_flr_in_process ;
  assign _unnamed_$pcie_in_pcie4_cfg_control_hot_reset_out =
	     pcie4_cfg_control_hot_reset_out ;
  assign _unnamed_$pcie_in_pcie4_cfg_control_power_state_change_interrupt =
	     pcie4_cfg_control_power_state_change_interrupt ;
  assign _unnamed_$pcie_in_pcie4_cfg_control_vf_flr_in_process =
	     pcie4_cfg_control_vf_flr_in_process ;
  assign _unnamed_$pcie_in_pcie4_cfg_external_msix_msi_fail =
	     pcie4_cfg_external_msix_msi_fail ;
  assign _unnamed_$pcie_in_pcie4_cfg_external_msix_msi_sent =
	     pcie4_cfg_external_msix_msi_sent ;
  assign _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_msix_enable =
	     pcie4_cfg_external_msix_msix_msix_enable ;
  assign _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_msix_mask =
	     pcie4_cfg_external_msix_msix_msix_mask ;
  assign _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vec_pending_status =
	     pcie4_cfg_external_msix_msix_vec_pending_status ;
  assign _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vf_enable =
	     pcie4_cfg_external_msix_msix_vf_enable ;
  assign _unnamed_$pcie_in_pcie4_cfg_external_msix_msix_vf_mask =
	     pcie4_cfg_external_msix_msix_vf_mask ;
  assign _unnamed_$pcie_in_pcie4_cfg_fc_cpld = pcie4_cfg_fc_cpld ;
  assign _unnamed_$pcie_in_pcie4_cfg_fc_cplh = pcie4_cfg_fc_cplh ;
  assign _unnamed_$pcie_in_pcie4_cfg_fc_npd = pcie4_cfg_fc_npd ;
  assign _unnamed_$pcie_in_pcie4_cfg_fc_nph = pcie4_cfg_fc_nph ;
  assign _unnamed_$pcie_in_pcie4_cfg_fc_pd = pcie4_cfg_fc_pd ;
  assign _unnamed_$pcie_in_pcie4_cfg_fc_ph = pcie4_cfg_fc_ph ;
  assign _unnamed_$pcie_in_pcie4_cfg_interrupt_sent =
	     pcie4_cfg_interrupt_sent ;
  assign _unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received =
	     pcie4_cfg_mesg_rcvd_received ;
  assign _unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received_data =
	     pcie4_cfg_mesg_rcvd_received_data ;
  assign _unnamed_$pcie_in_pcie4_cfg_mesg_rcvd_received_type =
	     pcie4_cfg_mesg_rcvd_received_type ;
  assign _unnamed_$pcie_in_pcie4_cfg_mesg_tx_transmit_done =
	     pcie4_cfg_mesg_tx_transmit_done ;
  assign _unnamed_$pcie_in_pcie4_cfg_mgmt_read_data =
	     pcie4_cfg_mgmt_read_data ;
  assign _unnamed_$pcie_in_pcie4_cfg_mgmt_read_write_done =
	     pcie4_cfg_mgmt_read_write_done ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_current_speed =
	     pcie4_cfg_status_current_speed ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_err_cor_out =
	     pcie4_cfg_status_err_cor_out ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_err_fatal_out =
	     pcie4_cfg_status_err_fatal_out ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_err_nonfatal_out =
	     pcie4_cfg_status_err_nonfatal_out ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_function_status =
	     pcie4_cfg_status_function_status ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_funstion_power_state =
	     pcie4_cfg_status_funstion_power_state ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_link_power_state =
	     pcie4_cfg_status_link_power_state ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_local_error_out =
	     pcie4_cfg_status_local_error_out ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_local_error_valid =
	     pcie4_cfg_status_local_error_valid ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_ltssm_state =
	     pcie4_cfg_status_ltssm_state ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_max_payload =
	     pcie4_cfg_status_max_payload ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_max_read_req =
	     pcie4_cfg_status_max_read_req ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_negotiated_width =
	     pcie4_cfg_status_negotiated_width ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_obff_enable =
	     pcie4_cfg_status_obff_enable ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_pcie_cq_np_req_count =
	     pcie4_cfg_status_pcie_cq_np_req_count ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_phy_link_down =
	     pcie4_cfg_status_phy_link_down ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_phy_link_status =
	     pcie4_cfg_status_phy_link_status ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_pl_status_change =
	     pcie4_cfg_status_pl_status_change ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rcb_status =
	     pcie4_cfg_status_rcb_status ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num0 =
	     pcie4_cfg_status_rq_seq_num0 ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num1 =
	     pcie4_cfg_status_rq_seq_num1 ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num_vld0 =
	     pcie4_cfg_status_rq_seq_num_vld0 ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_seq_num_vld1 =
	     pcie4_cfg_status_rq_seq_num_vld1 ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_tag0 =
	     pcie4_cfg_status_rq_tag0 ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_tag1 =
	     pcie4_cfg_status_rq_tag1 ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_tag_av =
	     pcie4_cfg_status_rq_tag_av ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_tag_vld0 =
	     pcie4_cfg_status_rq_tag_vld0 ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rq_tag_vld1 =
	     pcie4_cfg_status_rq_tag_vld1 ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_rx_pm_state =
	     pcie4_cfg_status_rx_pm_state ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_tfc_npd_av =
	     pcie4_cfg_status_tfc_npd_av ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_tfc_nph_av =
	     pcie4_cfg_status_tfc_nph_av ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_tph_requester_enable =
	     pcie4_cfg_status_tph_requester_enable ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_tph_st_mode =
	     pcie4_cfg_status_tph_st_mode ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_tx_pm_state =
	     pcie4_cfg_status_tx_pm_state ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_vf_power_state =
	     pcie4_cfg_status_vf_power_state ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_vf_status =
	     pcie4_cfg_status_vf_status ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_vf_tph_requester_enable =
	     pcie4_cfg_status_vf_tph_requester_enable ;
  assign _unnamed_$pcie_in_pcie4_cfg_status_vf_tph_st_mode =
	     pcie4_cfg_status_vf_tph_st_mode ;
  assign _unnamed_$pcie_in_pcie4_phy_rdy_out = pcie4_phy_rdy_out ;
  assign _unnamed_$pcie_in_pcie4_user_link_up = pcie4_user_link_up ;
  assign _unnamed_$pcie_in_s_axis_cq_tdata = s_axis_cq_tdata ;
  assign _unnamed_$pcie_in_s_axis_cq_tkeep = s_axis_cq_tkeep ;
  assign _unnamed_$pcie_in_s_axis_cq_tlast = s_axis_cq_tlast ;
  assign _unnamed_$pcie_in_s_axis_cq_tuser = s_axis_cq_tuser ;
  assign _unnamed_$pcie_in_s_axis_cq_tvalid = s_axis_cq_tvalid ;
  assign _unnamed_$pcie_in_s_axis_rc_tdata = s_axis_rc_tdata ;
  assign _unnamed_$pcie_in_s_axis_rc_tkeep = s_axis_rc_tkeep ;
  assign _unnamed_$pcie_in_s_axis_rc_tlast = s_axis_rc_tlast ;
  assign _unnamed_$pcie_in_s_axis_rc_tuser = s_axis_rc_tuser ;
  assign _unnamed_$pcie_in_s_axis_rc_tvalid = s_axis_rc_tvalid ;
  assign _unnamed_$rq_xmit_put =
	     rq_gearbox_read_block ?
	       ((!rq_gearbox_elem1_status_1__read__30_EQ_rq_gear_ETC___d632 &&
		 rq_gearbox_elem1_status_0__read__33_EQ_rq_gear_ETC___d634) ?
		  rq_gearbox_block1[149:75] :
		  rq_gearbox_block1[74:0]) :
	       ((!rq_gearbox_elem0_status_1__read__21_EQ_rq_gear_ETC___d623 &&
		 rq_gearbox_elem0_status_0__read__24_EQ_rq_gear_ETC___d625) ?
		  rq_gearbox_block0[149:75] :
		  rq_gearbox_block0[74:0]) ;
  assign _unnamed_$EN_cq_recv_get = CAN_FIRE_RL_cq_mkConnectionGetPut ;
  assign _unnamed_$EN_cc_xmit_put =
	     WILL_FIRE_RL_cc_rl_fastclock &&
	     (cc_gearbox_read_block ? keep__h32070 : keep__h31975) != 2'd0 ;
  assign _unnamed_$EN_rq_xmit_put =
	     WILL_FIRE_RL_rq_rl_fastclock &&
	     (rq_gearbox_read_block ? keep__h47266 : keep__h47157) != 2'd0 ;
  assign _unnamed_$EN_rc_recv_get = CAN_FIRE_RL_rc_mkConnectionGetPut ;

  // submodule axis_xactor_f_data
  assign axis_xactor_f_data$D_IN =
	     { axi_in_tdata, axi_in_tstrb, axi_in_tkeep, axi_in_tlast } ;
  assign axis_xactor_f_data$ENQ =
	     axi_in_tvalid && tracesOn && axis_xactor_f_data$FULL_N ;
  assign axis_xactor_f_data$DEQ =
	     WILL_FIRE_RL_xferBeat && cnt_32_EQ_vecSize_33___d934 ;
  assign axis_xactor_f_data$CLR = 1'b0 ;

  // submodule beatFF
  assign beatFF$sD_IN =
	     cnt_32_EQ_vecSize_33___d934 ? x1__h71759 : x1__h72615 ;
  assign beatFF$sENQ = CAN_FIRE_RL_xferBeat ;
  assign beatFF$dDEQ = CAN_FIRE_RL_egress ;

  // submodule bridge
  assign bridge$clocks_response_put = 32'd3 ;
  always@(WILL_FIRE_RL_cq_rl_wr_header or
	  MUX_bridge$cq_tlps_put_1__VAL_1 or
	  WILL_FIRE_RL_cq_rl_rd_header or
	  MUX_bridge$cq_tlps_put_1__VAL_2 or
	  WILL_FIRE_RL_cq_rl_data_1_to_3 or
	  MUX_bridge$cq_tlps_put_1__VAL_3 or
	  WILL_FIRE_RL_cq_rl_data_4 or MUX_bridge$cq_tlps_put_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cq_rl_wr_header:
	  bridge$cq_tlps_put = MUX_bridge$cq_tlps_put_1__VAL_1;
      WILL_FIRE_RL_cq_rl_rd_header:
	  bridge$cq_tlps_put = MUX_bridge$cq_tlps_put_1__VAL_2;
      WILL_FIRE_RL_cq_rl_data_1_to_3:
	  bridge$cq_tlps_put = MUX_bridge$cq_tlps_put_1__VAL_3;
      WILL_FIRE_RL_cq_rl_data_4:
	  bridge$cq_tlps_put = MUX_bridge$cq_tlps_put_1__VAL_4;
      default: bridge$cq_tlps_put =
		   153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign bridge$noc_in_beat_v = fOut_f$D_OUT ;
  assign bridge$noc_in_src_rdy_b = fOut_f$EMPTY_N ;
  assign bridge$noc_out_dst_rdy_b = 1'd1 ;
  assign bridge$rc_tlps_put =
	     WILL_FIRE_RL_rc_rl_header ?
	       MUX_bridge$rc_tlps_put_1__VAL_1 :
	       MUX_bridge$rc_tlps_put_1__VAL_2 ;
  assign bridge$status_bluenoc_link_is_up_i = bridge$is_activated ;
  assign bridge$status_interrupts_enabled_i = intr_on ;
  assign bridge$status_memory_enabled_i = 1'd1 ;
  assign bridge$status_out_of_reset_i = 1'd1 ;
  assign bridge$status_pcie_link_is_up_i = lnk_up_cr ;
  assign bridge$EN_rq_tlps_get = CAN_FIRE_RL_rq_rl_get_tlps ;
  assign bridge$EN_rc_tlps_put =
	     WILL_FIRE_RL_rc_rl_header || WILL_FIRE_RL_rc_rl_data_a ;
  assign bridge$EN_cq_tlps_put =
	     WILL_FIRE_RL_cq_rl_wr_header || WILL_FIRE_RL_cq_rl_rd_header ||
	     WILL_FIRE_RL_cq_rl_data_1_to_3 ||
	     WILL_FIRE_RL_cq_rl_data_4 ;
  assign bridge$EN_cc_tlps_get = CAN_FIRE_RL_cc_rl_get_tlps ;
  assign bridge$EN_msi_interrupt_clear = 1'b0 ;
  assign bridge$EN_clocks_request_get = CAN_FIRE_RL_field_clock_request ;
  assign bridge$EN_clocks_response_put = CAN_FIRE_RL_field_clock_request ;

  // submodule cq_in_buf
  assign cq_in_buf$D_IN = _unnamed_$cq_recv_get ;
  assign cq_in_buf$ENQ = CAN_FIRE_RL_cq_mkConnectionGetPut ;
  assign cq_in_buf$DEQ = CAN_FIRE_RL_cq_rl_g_to_gearbox ;
  assign cq_in_buf$CLR = 1'b0 ;

  // submodule fOut_f
  assign fOut_f$D_IN = beatFF$dD_OUT ;
  assign fOut_f$ENQ = CAN_FIRE_RL_egress ;
  assign fOut_f$DEQ = CAN_FIRE_RL_fOut_update ;
  assign fOut_f$CLR = 1'b0 ;

  // submodule network_status
  assign network_status$ASSERT_IN =
	     CAN_FIRE_RL_reset_block_if_network_is_inactive ;

  // submodule rc_in_buf
  assign rc_in_buf$D_IN = _unnamed_$rc_recv_get ;
  assign rc_in_buf$ENQ = CAN_FIRE_RL_rc_mkConnectionGetPut ;
  assign rc_in_buf$DEQ = CAN_FIRE_RL_rc_rl_g_to_gearbox ;
  assign rc_in_buf$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_cc_gearbox_read_block_04_THEN_IF_NOT_cc_gea_ETC___d445 =
	     (cc_gearbox_read_block ? keep__h32070 : keep__h31975) == 2'd0 ||
	     _unnamed_$RDY_cc_xmit_put ;
  assign IF_cq_f_cq_rv_port0__read__78_BITS_98_TO_88_93_ETC___d211 =
	     (cq_f_cq_rv[98:88] == 11'd1024) ? 10'd0 : cq_f_cq_rv[97:88] ;
  assign IF_cq_gearbox_elem0_status_1__read__5_EQ_cq_ge_ETC___d72 =
	     (cq_gearbox_elem0_status_1__read__5_EQ_cq_gearb_ETC___d37 &&
	      !cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40) ?
	       cq_in_buf$D_OUT :
	       cq_gearbox_elem_1 ;
  assign IF_cq_gearbox_elem1_status_1__read__6_EQ_cq_ge_ETC___d79 =
	     (cq_gearbox_elem1_status_1__read__6_EQ_cq_gearb_ETC___d48 &&
	      !cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51) ?
	       cq_in_buf$D_OUT :
	       cq_gearbox_elem_3 ;
  assign IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d176 =
	     cq_gearbox_read_block ?
	       { cq_gearbox_elem_3, cq_gearbox_elem_2 } :
	       { cq_gearbox_elem_1, cq_gearbox_elem_0 } ;
  assign IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221 =
	     cq_gearbox_read_block ?
	       cq_gearbox_elem_2[75:12] :
	       cq_gearbox_elem_0[75:12] ;
  assign IF_rc_gearbox_elem0_status_1__read__90_EQ_rc_g_ETC___d727 =
	     (rc_gearbox_elem0_status_1__read__90_EQ_rc_gear_ETC___d692 &&
	      !rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695) ?
	       rc_in_buf$D_OUT :
	       rc_gearbox_elem_1 ;
  assign IF_rc_gearbox_elem1_status_1__read__01_EQ_rc_g_ETC___d734 =
	     (rc_gearbox_elem1_status_1__read__01_EQ_rc_gear_ETC___d703 &&
	      !rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706) ?
	       rc_in_buf$D_OUT :
	       rc_gearbox_elem_3 ;
  assign IF_rc_gearbox_read_block_96_THEN_NOT_rc_gearbo_ETC___d885 =
	     (rc_gearbox_read_block ?
		!rc_gearbox_elem_2[11] :
		!rc_gearbox_elem_0[11]) &&
	     rc_rg_dwcount != 11'd0 ;
  assign IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832 =
	     rc_gearbox_read_block ?
	       rc_gearbox_elem_2[75:12] :
	       rc_gearbox_elem_0[75:12] ;
  assign IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842 =
	     rc_gearbox_read_block ?
	       rc_gearbox_elem_3[75:12] :
	       rc_gearbox_elem_1[75:12] ;
  assign IF_rq_gearbox_read_block_19_THEN_IF_NOT_rq_gea_ETC___d660 =
	     (rq_gearbox_read_block ? keep__h47266 : keep__h47157) == 2'd0 ||
	     _unnamed_$RDY_rq_xmit_put ;
  assign NOT_cc_gearbox_read_block_04_05_AND_NOT_cc_gea_ETC___d427 =
	     (!cc_gearbox_read_block && x__h29836 != 2'd3 ||
	      cc_gearbox_read_block && x__h30184 != 2'd3) &&
	     !cc_gearbox_dInReset_pre_isInReset ;
  assign NOT_cc_gearbox_write_block_05_06_AND_cc_gearbo_ETC___d326 =
	     (!cc_gearbox_write_block && x__h24098 == 2'd3 ||
	      cc_gearbox_write_block && x__h24519 == 2'd3) &&
	     !cc_gearbox_sInReset_pre_isInReset ;
  assign NOT_cq_gearbox_elem0_status_1__read__5_EQ_cq_g_ETC___d111 =
	     { (!cq_gearbox_elem0_status_1__read__5_EQ_cq_gearb_ETC___d37 ||
		cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40) &&
	       cq_gearbox_elem_1[10],
	       (cq_gearbox_elem0_status_1__read__5_EQ_cq_gearb_ETC___d37 &&
		!cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40) ?
		 10'd0 :
		 cq_gearbox_elem_1[9:0] } ;
  assign NOT_cq_gearbox_elem1_status_1__read__6_EQ_cq_g_ETC___d134 =
	     { (!cq_gearbox_elem1_status_1__read__6_EQ_cq_gearb_ETC___d48 ||
		cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51) &&
	       cq_gearbox_elem_3[10],
	       (cq_gearbox_elem1_status_1__read__6_EQ_cq_gearb_ETC___d48 &&
		!cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51) ?
		 10'd0 :
		 cq_gearbox_elem_3[9:0] } ;
  assign NOT_cq_gearbox_read_block_37_38_AND_NOT_cq_gea_ETC___d162 =
	     (!cq_gearbox_read_block && x__h10877 == 2'd3 ||
	      cq_gearbox_read_block && x__h11230 == 2'd3) &&
	     !cq_gearbox_dInReset_pre_isInReset ;
  assign NOT_cq_gearbox_write_block_3_4_AND_NOT_NOT_cq__ETC___d60 =
	     (!cq_gearbox_write_block && x__h5071 != 2'd3 ||
	      cq_gearbox_write_block && x__h5503 != 2'd3) &&
	     !cq_gearbox_sInReset_pre_isInReset ;
  assign NOT_rc_gearbox_elem0_status_1__read__90_EQ_rc__ETC___d770 =
	     { (!rc_gearbox_elem0_status_1__read__90_EQ_rc_gear_ETC___d692 ||
		rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695) &&
	       rc_gearbox_elem_1[10],
	       (rc_gearbox_elem0_status_1__read__90_EQ_rc_gear_ETC___d692 &&
		!rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695) ?
		 10'd0 :
		 rc_gearbox_elem_1[9:0] } ;
  assign NOT_rc_gearbox_elem1_status_1__read__01_EQ_rc__ETC___d793 =
	     { (!rc_gearbox_elem1_status_1__read__01_EQ_rc_gear_ETC___d703 ||
		rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706) &&
	       rc_gearbox_elem_3[10],
	       (rc_gearbox_elem1_status_1__read__01_EQ_rc_gear_ETC___d703 &&
		!rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706) ?
		 10'd0 :
		 rc_gearbox_elem_3[9:0] } ;
  assign NOT_rc_gearbox_read_block_96_97_AND_NOT_rc_gea_ETC___d821 =
	     (!rc_gearbox_read_block && x__h55382 == 2'd3 ||
	      rc_gearbox_read_block && x__h55735 == 2'd3) &&
	     !rc_gearbox_dInReset_pre_isInReset ;
  assign NOT_rc_gearbox_write_block_88_89_AND_NOT_NOT_r_ETC___d715 =
	     (!rc_gearbox_write_block && x__h49572 != 2'd3 ||
	      rc_gearbox_write_block && x__h50000 != 2'd3) &&
	     !rc_gearbox_sInReset_pre_isInReset ;
  assign NOT_rq_gearbox_read_block_19_20_AND_NOT_rq_gea_ETC___d642 =
	     (!rq_gearbox_read_block && x__h45005 != 2'd3 ||
	      rq_gearbox_read_block && x__h45353 != 2'd3) &&
	     !rq_gearbox_dInReset_pre_isInReset ;
  assign NOT_rq_gearbox_write_block_71_72_AND_rq_gearbo_ETC___d492 =
	     (!rq_gearbox_write_block && x__h35946 == 2'd3 ||
	      rq_gearbox_write_block && x__h36367 == 2'd3) &&
	     !rq_gearbox_sInReset_pre_isInReset ;
  assign _dor1cc_gearbox_block0_status$EN__write =
	     WILL_FIRE_RL_cc_rl_data || WILL_FIRE_RL_cc_rl_header ;
  assign _dor1cc_gearbox_block1_status$EN__write =
	     WILL_FIRE_RL_cc_rl_data || WILL_FIRE_RL_cc_rl_header ;
  assign _dor1cq_gearbox_elem0_status_0$EN__write =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ;
  assign _dor1cq_gearbox_elem0_status_1$EN__write =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ;
  assign _dor1cq_gearbox_elem1_status_0$EN__write =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ;
  assign _dor1cq_gearbox_elem1_status_1$EN__write =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ;
  assign _dor1cq_gearbox_write_block$EN_write =
	     WILL_FIRE_RL_cq_rl_g_to_gearbox_pad_odd_tail ||
	     WILL_FIRE_RL_cq_rl_g_to_gearbox ;
  assign _dor1rc_gearbox_block0_status$EN__write =
	     WILL_FIRE_RL_rc_rl_data_a || WILL_FIRE_RL_rc_rl_header ;
  assign _dor1rc_gearbox_block1_status$EN__write =
	     WILL_FIRE_RL_rc_rl_data_a || WILL_FIRE_RL_rc_rl_header ;
  assign _dor1rq_gearbox_block0_status$EN__write =
	     WILL_FIRE_RL_rq_rl_data_c || WILL_FIRE_RL_rq_rl_data_b ||
	     WILL_FIRE_RL_rq_rl_data_a ||
	     WILL_FIRE_RL_rq_rl_header ;
  assign _dor1rq_gearbox_block1_status$EN__write =
	     WILL_FIRE_RL_rq_rl_data_c || WILL_FIRE_RL_rq_rl_data_b ||
	     WILL_FIRE_RL_rq_rl_data_a ||
	     WILL_FIRE_RL_rq_rl_header ;
  assign _theResult___snd_address__h34967 = { 32'd0, rq_f_tlps_rv[63:34] } ;
  assign _theResult___snd_dwcount__h34980 =
	     (rq_f_tlps_rv[105:96] == 10'd0) ?
	       11'd1024 :
	       { 1'd0, rq_f_tlps_rv[105:96] } ;
  assign a_bytecount__h23930 =
	     (cc_f_tlps_rv[75:64] == 12'd0) ?
	       13'd4096 :
	       { 1'd0, cc_f_tlps_rv[75:64] } ;
  assign axis_xactor_f_dataD_OUT_BITS_760_TO_729_PLUS__ETC__q2 =
	     (axis_xactor_f_data$D_OUT[760:729] + 32'd4 - 32'd1) >> 2 ;
  assign b__h23914 =
	     { cc_f_tlps_rv[7:0],
	       cc_f_tlps_rv[15:8],
	       cc_f_tlps_rv[23:16],
	       cc_f_tlps_rv[31:24] } ;
  assign cc_gearbox_elem0_status_0__read__09_EQ_cc_gear_ETC___d410 =
	     cc_gearbox_elem0_status_0 == cc_gearbox_block0_status ;
  assign cc_gearbox_elem0_status_1__read__06_EQ_cc_gear_ETC___d408 =
	     cc_gearbox_elem0_status_1 == cc_gearbox_block0_status ;
  assign cc_gearbox_elem1_status_0__read__18_EQ_cc_gear_ETC___d419 =
	     cc_gearbox_elem1_status_0 == cc_gearbox_block1_status ;
  assign cc_gearbox_elem1_status_1__read__15_EQ_cc_gear_ETC___d417 =
	     cc_gearbox_elem1_status_1 == cc_gearbox_block1_status ;
  assign cc_rg_dwcount_70_ULE_2___d380 = cc_rg_dwcount <= 11'd2 ;
  assign cnt_32_EQ_vecSize_33___d934 = cnt == vecSize ;
  assign cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40 =
	     cq_gearbox_elem0_status_0 == cq_gearbox_block0_status ;
  assign cq_gearbox_elem0_status_1__read__5_EQ_cq_gearb_ETC___d37 =
	     cq_gearbox_elem0_status_1 == cq_gearbox_block0_status ;
  assign cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51 =
	     cq_gearbox_elem1_status_0 == cq_gearbox_block1_status ;
  assign cq_gearbox_elem1_status_1__read__6_EQ_cq_gearb_ETC___d48 =
	     cq_gearbox_elem1_status_1 == cq_gearbox_block1_status ;
  assign data__h10677 =
	     cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51 ?
	       64'd0 :
	       cq_gearbox_elem_2[75:12] ;
  assign data__h10753 =
	     (cq_gearbox_elem1_status_1__read__6_EQ_cq_gearb_ETC___d48 &&
	      !cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51) ?
	       64'd0 :
	       cq_gearbox_elem_3[75:12] ;
  assign data__h54290 =
	     rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695 ?
	       64'd0 :
	       rc_gearbox_elem_0[75:12] ;
  assign data__h54382 =
	     (rc_gearbox_elem0_status_1__read__90_EQ_rc_gear_ETC___d692 &&
	      !rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695) ?
	       64'd0 :
	       rc_gearbox_elem_1[75:12] ;
  assign data__h55133 =
	     rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 ?
	       64'd0 :
	       rc_gearbox_elem_2[75:12] ;
  assign data__h55205 =
	     (rc_gearbox_elem1_status_1__read__01_EQ_rc_gear_ETC___d703 &&
	      !rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706) ?
	       64'd0 :
	       rc_gearbox_elem_3[75:12] ;
  assign data__h9812 =
	     cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40 ?
	       64'd0 :
	       cq_gearbox_elem_0[75:12] ;
  assign data__h9910 =
	     (cq_gearbox_elem0_status_1__read__5_EQ_cq_gearb_ETC___d37 &&
	      !cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40) ?
	       64'd0 :
	       cq_gearbox_elem_1[75:12] ;
  assign keep__h31975 =
	     (!cc_gearbox_elem0_status_1__read__06_EQ_cc_gear_ETC___d408 &&
	      cc_gearbox_elem0_status_0__read__09_EQ_cc_gear_ETC___d410) ?
	       cc_gearbox_block0[69:68] :
	       cc_gearbox_block0[2:1] ;
  assign keep__h32070 =
	     (!cc_gearbox_elem1_status_1__read__15_EQ_cc_gear_ETC___d417 &&
	      cc_gearbox_elem1_status_0__read__18_EQ_cc_gear_ETC___d419) ?
	       cc_gearbox_block1[69:68] :
	       cc_gearbox_block1[2:1] ;
  assign keep__h47157 =
	     (!rq_gearbox_elem0_status_1__read__21_EQ_rq_gear_ETC___d623 &&
	      rq_gearbox_elem0_status_0__read__24_EQ_rq_gear_ETC___d625) ?
	       rq_gearbox_block0[84:83] :
	       rq_gearbox_block0[9:8] ;
  assign keep__h47266 =
	     (!rq_gearbox_elem1_status_1__read__30_EQ_rq_gear_ETC___d632 &&
	      rq_gearbox_elem1_status_0__read__33_EQ_rq_gear_ETC___d634) ?
	       rq_gearbox_block1[84:83] :
	       rq_gearbox_block1[9:8] ;
  assign n_data__h25159 =
	     { b__h23914,
	       2'd0,
	       cc_f_tlps_rv[109:108],
	       cc_f_tlps_rv[118:116],
	       1'd0,
	       cc_f_tlps_rv[95:80],
	       cc_f_tlps_rv[47:40] } ;
  assign n_data__h26211 =
	     { cc_f_tlps_rv[63:48],
	       1'd0,
	       cc_f_tlps_rv[110],
	       cc_f_tlps_rv[79:77],
	       x__h23896,
	       3'd0,
	       a_bytecount__h23930,
	       9'd0,
	       cc_f_tlps_rv[38:32] } ;
  assign n_data__h26795 =
	     { b__h23914,
	       cc_f_tlps_rv[39:32],
	       cc_f_tlps_rv[47:40],
	       cc_f_tlps_rv[55:48],
	       cc_f_tlps_rv[63:56] } ;
  assign n_data__h28189 =
	     { cc_f_tlps_rv[71:64],
	       cc_f_tlps_rv[79:72],
	       cc_f_tlps_rv[87:80],
	       cc_f_tlps_rv[95:88],
	       cc_f_tlps_rv[103:96],
	       cc_f_tlps_rv[111:104],
	       cc_f_tlps_rv[119:112],
	       cc_f_tlps_rv[127:120] } ;
  assign n_data__h37007 =
	     { 2'd0,
	       rq_f_tlps_rv[109:108],
	       rq_f_tlps_rv[118:116],
	       17'd0,
	       rq_f_tlps_rv[79:72],
	       rq_f_tlps_rv[95:80],
	       rq_f_tlps_rv[110],
	       CASE_rq_f_tlps_rv_BITS_126_TO_125_0_0_1_0_2_1__ETC__q1,
	       _theResult___snd_dwcount__h34980 } ;
  assign n_data__h37299 = { _theResult___snd_address__h34981, 2'd0 } ;
  assign n_data__h37935 = { 32'b0, rq_rg_mdw[31:0] } ;
  assign n_data__h38470 =
	     { rq_f_tlps_rv[39:32],
	       rq_f_tlps_rv[47:40],
	       rq_f_tlps_rv[55:48],
	       rq_f_tlps_rv[63:56],
	       rq_f_tlps_rv[71:64],
	       rq_f_tlps_rv[79:72],
	       rq_f_tlps_rv[87:80],
	       rq_f_tlps_rv[95:88] } ;
  assign n_data__h39881 =
	     { rq_f_tlps_rv[103:96],
	       rq_f_tlps_rv[111:104],
	       rq_f_tlps_rv[119:112],
	       rq_f_tlps_rv[127:120],
	       rq_rg_mdw[31:0] } ;
  assign n_data__h41940 =
	     { rq_f_tlps_rv[7:0],
	       rq_f_tlps_rv[15:8],
	       rq_f_tlps_rv[23:16],
	       rq_f_tlps_rv[31:24],
	       rq_f_tlps_rv[39:32],
	       rq_f_tlps_rv[47:40],
	       rq_f_tlps_rv[55:48],
	       rq_f_tlps_rv[63:56] } ;
  assign n_data__h43340 =
	     { rq_f_tlps_rv[71:64],
	       rq_f_tlps_rv[79:72],
	       rq_f_tlps_rv[87:80],
	       rq_f_tlps_rv[95:88],
	       rq_f_tlps_rv[103:96],
	       rq_f_tlps_rv[111:104],
	       rq_f_tlps_rv[119:112],
	       rq_f_tlps_rv[127:120] } ;
  assign n_keep__h26796 =
	     cc_rg_dwcount_70_ULE_2___d380 ?
	       2'b0 :
	       ((cc_rg_dwcount == 11'd3) ? 2'b01 : 2'b11) ;
  assign n_keep__h28190 = (cc_rg_dwcount == 11'd1) ? 2'b01 : 2'b11 ;
  assign n_keep__h41942 =
	     rq_rg_dwcount_56_ULE_2___d610 ?
	       2'b0 :
	       ((rq_rg_dwcount == 11'd3) ? 2'b01 : 2'b11) ;
  assign n_keep__h43342 = (rq_rg_dwcount == 11'd1) ? 2'b01 : 2'b11 ;
  assign rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695 =
	     rc_gearbox_elem0_status_0 == rc_gearbox_block0_status ;
  assign rc_gearbox_elem0_status_1__read__90_EQ_rc_gear_ETC___d692 =
	     rc_gearbox_elem0_status_1 == rc_gearbox_block0_status ;
  assign rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 =
	     rc_gearbox_elem1_status_0 == rc_gearbox_block1_status ;
  assign rc_gearbox_elem1_status_1__read__01_EQ_rc_gear_ETC___d703 =
	     rc_gearbox_elem1_status_1 == rc_gearbox_block1_status ;
  assign rc_in_buf_i_notEmpty__81_AND_NOT_rc_rg_in_pack_ETC___d717 =
	     rc_in_buf$EMPTY_N &&
	     (!rc_rg_in_packet && !rc_in_buf$D_OUT[11] ||
	      NOT_rc_gearbox_write_block_88_89_AND_NOT_NOT_r_ETC___d715) ;
  assign rc_rg_in_packet_82_OR_rc_in_buf_first__84_BIT__ETC___d739 =
	     (rc_rg_in_packet || rc_in_buf$D_OUT[11]) &&
	     (rc_gearbox_write_block &&
	      !rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 ||
	      !rc_gearbox_write_block &&
	      !rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695) ;
  assign rq_gearbox_elem0_status_0__read__24_EQ_rq_gear_ETC___d625 =
	     rq_gearbox_elem0_status_0 == rq_gearbox_block0_status ;
  assign rq_gearbox_elem0_status_1__read__21_EQ_rq_gear_ETC___d623 =
	     rq_gearbox_elem0_status_1 == rq_gearbox_block0_status ;
  assign rq_gearbox_elem1_status_0__read__33_EQ_rq_gear_ETC___d634 =
	     rq_gearbox_elem1_status_0 == rq_gearbox_block1_status ;
  assign rq_gearbox_elem1_status_1__read__30_EQ_rq_gear_ETC___d632 =
	     rq_gearbox_elem1_status_1 == rq_gearbox_block1_status ;
  assign rq_rg_dwcount_56_MINUS_4___d598 = rq_rg_dwcount - 11'd4 ;
  assign rq_rg_dwcount_56_ULE_2___d610 = rq_rg_dwcount <= 11'd2 ;
  assign rq_rg_dwcount_56_ULE_4___d583 = rq_rg_dwcount <= 11'd4 ;
  assign tlp16_be__h56540 =
	     (IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[42:32] ==
	      11'd0) ?
	       16'hFFF0 :
	       16'hFFFF ;
  assign tlp16_data__h12903 =
	     { 1'd0,
	       IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d202,
	       IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d206,
	       1'd0,
	       cq_f_cq_rv[147:145],
	       6'd0,
	       cq_f_cq_rv[149:148],
	       2'd0,
	       IF_cq_f_cq_rv_port0__read__78_BITS_98_TO_88_93_ETC___d211,
	       cq_f_cq_rv[119:104],
	       cq_f_cq_rv[127:120],
	       cq_f_cq_rv[3:0],
	       cq_f_cq_rv[7:4],
	       cq_f_cq_rv[43:14],
	       2'd0,
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221[7:0],
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221[15:8],
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221[23:16],
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221[31:24] } ;
  assign tlp16_data__h14295 =
	     { 1'd0,
	       IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d202,
	       IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d206,
	       1'd0,
	       cq_f_cq_rv[147:145],
	       6'd0,
	       cq_f_cq_rv[149:148],
	       2'd0,
	       IF_cq_f_cq_rv_port0__read__78_BITS_98_TO_88_93_ETC___d211,
	       cq_f_cq_rv[119:104],
	       cq_f_cq_rv[127:120],
	       cq_f_cq_rv[3:0],
	       cq_f_cq_rv[7:4],
	       cq_f_cq_rv[43:14],
	       34'd0 } ;
  assign tlp16_data__h15547 =
	     { cq_f_cq_rv[51:44],
	       cq_f_cq_rv[59:52],
	       cq_f_cq_rv[67:60],
	       cq_f_cq_rv[75:68],
	       cq_f_cq_rv[95:88],
	       cq_f_cq_rv[103:96],
	       cq_f_cq_rv[111:104],
	       cq_f_cq_rv[119:112],
	       cq_f_cq_rv[127:120],
	       cq_f_cq_rv[135:128],
	       cq_f_cq_rv[143:136],
	       cq_f_cq_rv[151:144],
	       32'd0 } ;
  assign tlp16_data__h18195 =
	     { cq_f_cq_rv[51:44],
	       cq_f_cq_rv[59:52],
	       cq_f_cq_rv[67:60],
	       cq_f_cq_rv[75:68],
	       cq_f_cq_rv[95:88],
	       cq_f_cq_rv[103:96],
	       cq_f_cq_rv[111:104],
	       cq_f_cq_rv[119:112],
	       cq_f_cq_rv[127:120],
	       cq_f_cq_rv[135:128],
	       cq_f_cq_rv[143:136],
	       cq_f_cq_rv[151:144],
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221[7:0],
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221[15:8],
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221[23:16],
	       IF_cq_gearbox_read_block_37_THEN_cq_gearbox_el_ETC___d221[31:24] } ;
  assign tlp16_data__h56541 =
	     { 9'd148,
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[27:25],
	       5'd0,
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[46],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[29:28],
	       2'd0,
	       (IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[42:32] ==
		11'd1024) ?
		 10'd0 :
		 IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[41:32],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[23:8],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[45:43],
	       1'd0,
	       (IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[28:16] ==
		13'd4096) ?
		 12'd0 :
		 IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[27:16],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[63:48],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[7:0],
	       1'd0,
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[6:0],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[39:32],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[47:40],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[55:48],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[63:56] } ;
  assign tlp16_data__h58017 =
	     { IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[7:0],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[15:8],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[23:16],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[31:24],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[39:32],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[47:40],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[55:48],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d832[63:56],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[7:0],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[15:8],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[23:16],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[31:24],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[39:32],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[47:40],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[55:48],
	       IF_rc_gearbox_read_block_96_THEN_rc_gearbox_el_ETC___d842[63:56] } ;
  assign tlp16_hit__h12901 = 7'd1 << cq_f_cq_rv[138:136] ;
  assign x1__h71759 = { 8'd0, axis_xactor_f_data$D_OUT[736:729], 16'd1284 } ;
  assign x__h10877 =
	     { cq_gearbox_elem0_status_1 != cq_gearbox_block0_status,
	       cq_gearbox_elem0_status_0 != cq_gearbox_block0_status } ;
  assign x__h11230 =
	     { cq_gearbox_elem1_status_1 != cq_gearbox_block1_status,
	       cq_gearbox_elem1_status_0 != cq_gearbox_block1_status } ;
  assign x__h23896 =
	     (cc_f_tlps_rv[105:96] == 10'd0) ?
	       11'd1024 :
	       { 1'd0, cc_f_tlps_rv[105:96] } ;
  assign x__h24098 =
	     { cc_gearbox_elem0_status_1 == cc_gearbox_block0_status,
	       cc_gearbox_elem0_status_0 == cc_gearbox_block0_status } ;
  assign x__h24519 =
	     { cc_gearbox_elem1_status_1 == cc_gearbox_block1_status,
	       cc_gearbox_elem1_status_0 == cc_gearbox_block1_status } ;
  assign x__h29836 =
	     { cc_gearbox_elem0_status_1__read__06_EQ_cc_gear_ETC___d408,
	       cc_gearbox_elem0_status_0__read__09_EQ_cc_gear_ETC___d410 } ;
  assign x__h30184 =
	     { cc_gearbox_elem1_status_1__read__15_EQ_cc_gear_ETC___d417,
	       cc_gearbox_elem1_status_0__read__18_EQ_cc_gear_ETC___d419 } ;
  assign x__h35946 =
	     { rq_gearbox_elem0_status_1 == rq_gearbox_block0_status,
	       rq_gearbox_elem0_status_0 == rq_gearbox_block0_status } ;
  assign x__h36367 =
	     { rq_gearbox_elem1_status_1 == rq_gearbox_block1_status,
	       rq_gearbox_elem1_status_0 == rq_gearbox_block1_status } ;
  assign x__h45005 =
	     { rq_gearbox_elem0_status_1__read__21_EQ_rq_gear_ETC___d623,
	       rq_gearbox_elem0_status_0__read__24_EQ_rq_gear_ETC___d625 } ;
  assign x__h45353 =
	     { rq_gearbox_elem1_status_1__read__30_EQ_rq_gear_ETC___d632,
	       rq_gearbox_elem1_status_0__read__33_EQ_rq_gear_ETC___d634 } ;
  assign x__h49572 =
	     { !rc_gearbox_elem0_status_1__read__90_EQ_rc_gear_ETC___d692,
	       !rc_gearbox_elem0_status_0__read__94_EQ_rc_gear_ETC___d695 } ;
  assign x__h50000 =
	     { !rc_gearbox_elem1_status_1__read__01_EQ_rc_gear_ETC___d703,
	       !rc_gearbox_elem1_status_0__read__05_EQ_rc_gear_ETC___d706 } ;
  assign x__h5071 =
	     { !cq_gearbox_elem0_status_1__read__5_EQ_cq_gearb_ETC___d37,
	       !cq_gearbox_elem0_status_0__read__9_EQ_cq_gearb_ETC___d40 } ;
  assign x__h5503 =
	     { !cq_gearbox_elem1_status_1__read__6_EQ_cq_gearb_ETC___d48,
	       !cq_gearbox_elem1_status_0__read__0_EQ_cq_gearb_ETC___d51 } ;
  assign x__h55382 =
	     { rc_gearbox_elem0_status_1 != rc_gearbox_block0_status,
	       rc_gearbox_elem0_status_0 != rc_gearbox_block0_status } ;
  assign x__h55735 =
	     { rc_gearbox_elem1_status_1 != rc_gearbox_block1_status,
	       rc_gearbox_elem1_status_0 != rc_gearbox_block1_status } ;
  always@(cq_rg_dwcount)
  begin
    case (cq_rg_dwcount)
      11'd1: tlp16_be__h15546 = 16'hF000;
      11'd2: tlp16_be__h15546 = 16'hFF00;
      11'd3: tlp16_be__h15546 = 16'hFFF0;
      default: tlp16_be__h15546 = 16'd0;
    endcase
  end
  always@(rq_rg_dwcount)
  begin
    case (rq_rg_dwcount)
      11'd2: n_keep__h38472 = 2'b0;
      11'd3: n_keep__h38472 = 2'b01;
      default: n_keep__h38472 = 2'b11;
    endcase
  end
  always@(cnt or trace)
  begin
    case (cnt)
      8'd0: x1__h72615 = trace[31:0];
      8'd1: x1__h72615 = trace[63:32];
      8'd2: x1__h72615 = trace[95:64];
      8'd3: x1__h72615 = trace[127:96];
      8'd4: x1__h72615 = trace[159:128];
      8'd5: x1__h72615 = trace[191:160];
      8'd6: x1__h72615 = trace[223:192];
      8'd7: x1__h72615 = trace[255:224];
      8'd8: x1__h72615 = trace[287:256];
      8'd9: x1__h72615 = trace[319:288];
      8'd10: x1__h72615 = trace[351:320];
      8'd11: x1__h72615 = trace[383:352];
      8'd12: x1__h72615 = trace[415:384];
      8'd13: x1__h72615 = trace[447:416];
      8'd14: x1__h72615 = trace[479:448];
      8'd15: x1__h72615 = trace[511:480];
      8'd16: x1__h72615 = trace[543:512];
      8'd17: x1__h72615 = trace[575:544];
      default: x1__h72615 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(rc_rg_dwcount)
  begin
    case (rc_rg_dwcount)
      11'd1: tlp16_be__h58016 = 16'hF000;
      11'd2: tlp16_be__h58016 = 16'hFF00;
      11'd3: tlp16_be__h58016 = 16'hFFF0;
      default: tlp16_be__h58016 = 16'hFFFF;
    endcase
  end
  always@(rq_f_tlps_rv or _theResult___snd_address__h34967)
  begin
    case (rq_f_tlps_rv[126:125])
      2'd1, 2'd3: _theResult___snd_address__h34981 = rq_f_tlps_rv[63:2];
      default: _theResult___snd_address__h34981 =
		   _theResult___snd_address__h34967;
    endcase
  end
  always@(rq_f_tlps_rv)
  begin
    case (rq_f_tlps_rv[126:125])
      2'd0, 2'd1:
	  CASE_rq_f_tlps_rv_BITS_126_TO_125_0_0_1_0_2_1__ETC__q1 = 4'd0;
      2'd2, 2'd3:
	  CASE_rq_f_tlps_rv_BITS_126_TO_125_0_0_1_0_2_1__ETC__q1 = 4'd1;
    endcase
  end
  always@(cq_f_cq_rv)
  begin
    case (cq_f_cq_rv[102:99])
      4'd0, 4'd2: tlp16_be__h12902 = 16'hFFF0;
      default: tlp16_be__h12902 = 16'hFFFF;
    endcase
  end
  always@(cq_f_cq_rv)
  begin
    case (cq_f_cq_rv[102:99])
      4'd0, 4'd1:
	  IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d206 = 5'd0;
      default: IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d206 =
		   5'd2;
    endcase
  end
  always@(cq_f_cq_rv)
  begin
    case (cq_f_cq_rv[102:99])
      4'd0, 4'd2:
	  IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d202 = 2'd0;
      4'd1: IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d202 = 2'd2;
      default: IF_cq_f_cq_rv_port0__read__78_BITS_102_TO_99_8_ETC___d202 =
		   2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK_user_clk)
  begin
    if (user_reset_n$RESET_OUT == `BSV_RESET_VALUE)
      begin
        cc_gearbox_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_gearbox_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_gearbox_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_gearbox_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_gearbox_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cq_gearbox_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cq_gearbox_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cq_gearbox_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cq_gearbox_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cq_gearbox_elem_0 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	cq_gearbox_elem_1 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	cq_gearbox_elem_2 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	cq_gearbox_elem_3 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	cq_gearbox_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cq_rg_even_enq <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cq_rg_pad_odd_tail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	intr_on <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lnk_up_cr <= `BSV_ASSIGNMENT_DELAY 1'd1;
	max_payload_cr <= `BSV_ASSIGNMENT_DELAY 13'd128;
	max_rd_req_cr <= `BSV_ASSIGNMENT_DELAY 13'd128;
	msix_enable_cr <= `BSV_ASSIGNMENT_DELAY 1'd0;
	msix_masked_cr <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rc_gearbox_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_gearbox_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_gearbox_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_gearbox_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_gearbox_elem_0 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	rc_gearbox_elem_1 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	rc_gearbox_elem_2 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	rc_gearbox_elem_3 <= `BSV_ASSIGNMENT_DELAY 76'd0;
	rc_gearbox_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_rg_even_enq <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rc_rg_in_packet <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_rg_pad_odd_tail <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rcb_cr <= `BSV_ASSIGNMENT_DELAY 8'd128;
	rq_gearbox_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rq_gearbox_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rq_gearbox_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rq_gearbox_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rq_gearbox_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cc_gearbox_elem0_status_0$EN)
	  cc_gearbox_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      cc_gearbox_elem0_status_0$D_IN;
	if (cc_gearbox_elem0_status_1$EN)
	  cc_gearbox_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      cc_gearbox_elem0_status_1$D_IN;
	if (cc_gearbox_elem1_status_0$EN)
	  cc_gearbox_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      cc_gearbox_elem1_status_0$D_IN;
	if (cc_gearbox_elem1_status_1$EN)
	  cc_gearbox_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      cc_gearbox_elem1_status_1$D_IN;
	if (cc_gearbox_read_block$EN)
	  cc_gearbox_read_block <= `BSV_ASSIGNMENT_DELAY
	      cc_gearbox_read_block$D_IN;
	if (cq_gearbox_elem0_status_0$EN)
	  cq_gearbox_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      cq_gearbox_elem0_status_0$D_IN;
	if (cq_gearbox_elem0_status_1$EN)
	  cq_gearbox_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      cq_gearbox_elem0_status_1$D_IN;
	if (cq_gearbox_elem1_status_0$EN)
	  cq_gearbox_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      cq_gearbox_elem1_status_0$D_IN;
	if (cq_gearbox_elem1_status_1$EN)
	  cq_gearbox_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      cq_gearbox_elem1_status_1$D_IN;
	if (cq_gearbox_elem_0$EN)
	  cq_gearbox_elem_0 <= `BSV_ASSIGNMENT_DELAY cq_gearbox_elem_0$D_IN;
	if (cq_gearbox_elem_1$EN)
	  cq_gearbox_elem_1 <= `BSV_ASSIGNMENT_DELAY cq_gearbox_elem_1$D_IN;
	if (cq_gearbox_elem_2$EN)
	  cq_gearbox_elem_2 <= `BSV_ASSIGNMENT_DELAY cq_gearbox_elem_2$D_IN;
	if (cq_gearbox_elem_3$EN)
	  cq_gearbox_elem_3 <= `BSV_ASSIGNMENT_DELAY cq_gearbox_elem_3$D_IN;
	if (cq_gearbox_write_block$EN)
	  cq_gearbox_write_block <= `BSV_ASSIGNMENT_DELAY
	      cq_gearbox_write_block$D_IN;
	if (cq_rg_even_enq$EN)
	  cq_rg_even_enq <= `BSV_ASSIGNMENT_DELAY cq_rg_even_enq$D_IN;
	if (cq_rg_pad_odd_tail$EN)
	  cq_rg_pad_odd_tail <= `BSV_ASSIGNMENT_DELAY cq_rg_pad_odd_tail$D_IN;
	if (intr_on$EN) intr_on <= `BSV_ASSIGNMENT_DELAY intr_on$D_IN;
	if (lnk_up_cr$EN) lnk_up_cr <= `BSV_ASSIGNMENT_DELAY lnk_up_cr$D_IN;
	if (max_payload_cr$EN)
	  max_payload_cr <= `BSV_ASSIGNMENT_DELAY max_payload_cr$D_IN;
	if (max_rd_req_cr$EN)
	  max_rd_req_cr <= `BSV_ASSIGNMENT_DELAY max_rd_req_cr$D_IN;
	if (msix_enable_cr$EN)
	  msix_enable_cr <= `BSV_ASSIGNMENT_DELAY msix_enable_cr$D_IN;
	if (msix_masked_cr$EN)
	  msix_masked_cr <= `BSV_ASSIGNMENT_DELAY msix_masked_cr$D_IN;
	if (rc_gearbox_elem0_status_0$EN)
	  rc_gearbox_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      rc_gearbox_elem0_status_0$D_IN;
	if (rc_gearbox_elem0_status_1$EN)
	  rc_gearbox_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      rc_gearbox_elem0_status_1$D_IN;
	if (rc_gearbox_elem1_status_0$EN)
	  rc_gearbox_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      rc_gearbox_elem1_status_0$D_IN;
	if (rc_gearbox_elem1_status_1$EN)
	  rc_gearbox_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      rc_gearbox_elem1_status_1$D_IN;
	if (rc_gearbox_elem_0$EN)
	  rc_gearbox_elem_0 <= `BSV_ASSIGNMENT_DELAY rc_gearbox_elem_0$D_IN;
	if (rc_gearbox_elem_1$EN)
	  rc_gearbox_elem_1 <= `BSV_ASSIGNMENT_DELAY rc_gearbox_elem_1$D_IN;
	if (rc_gearbox_elem_2$EN)
	  rc_gearbox_elem_2 <= `BSV_ASSIGNMENT_DELAY rc_gearbox_elem_2$D_IN;
	if (rc_gearbox_elem_3$EN)
	  rc_gearbox_elem_3 <= `BSV_ASSIGNMENT_DELAY rc_gearbox_elem_3$D_IN;
	if (rc_gearbox_write_block$EN)
	  rc_gearbox_write_block <= `BSV_ASSIGNMENT_DELAY
	      rc_gearbox_write_block$D_IN;
	if (rc_rg_even_enq$EN)
	  rc_rg_even_enq <= `BSV_ASSIGNMENT_DELAY rc_rg_even_enq$D_IN;
	if (rc_rg_in_packet$EN)
	  rc_rg_in_packet <= `BSV_ASSIGNMENT_DELAY rc_rg_in_packet$D_IN;
	if (rc_rg_pad_odd_tail$EN)
	  rc_rg_pad_odd_tail <= `BSV_ASSIGNMENT_DELAY rc_rg_pad_odd_tail$D_IN;
	if (rcb_cr$EN) rcb_cr <= `BSV_ASSIGNMENT_DELAY rcb_cr$D_IN;
	if (rq_gearbox_elem0_status_0$EN)
	  rq_gearbox_elem0_status_0 <= `BSV_ASSIGNMENT_DELAY
	      rq_gearbox_elem0_status_0$D_IN;
	if (rq_gearbox_elem0_status_1$EN)
	  rq_gearbox_elem0_status_1 <= `BSV_ASSIGNMENT_DELAY
	      rq_gearbox_elem0_status_1$D_IN;
	if (rq_gearbox_elem1_status_0$EN)
	  rq_gearbox_elem1_status_0 <= `BSV_ASSIGNMENT_DELAY
	      rq_gearbox_elem1_status_0$D_IN;
	if (rq_gearbox_elem1_status_1$EN)
	  rq_gearbox_elem1_status_1 <= `BSV_ASSIGNMENT_DELAY
	      rq_gearbox_elem1_status_1$D_IN;
	if (rq_gearbox_read_block$EN)
	  rq_gearbox_read_block <= `BSV_ASSIGNMENT_DELAY
	      rq_gearbox_read_block$D_IN;
      end
  end

  always@(posedge CLK_user_clk_half)
  begin
    if (epReset125$OUT_RST == `BSV_RESET_VALUE)
      begin
        cc_f_tlps_rv <= `BSV_ASSIGNMENT_DELAY
	    154'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cc_gearbox_block0 <= `BSV_ASSIGNMENT_DELAY 134'd0;
	cc_gearbox_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_gearbox_block1 <= `BSV_ASSIGNMENT_DELAY 134'd0;
	cc_gearbox_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_gearbox_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_rg_dwcount <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cq_f_cq_rv <= `BSV_ASSIGNMENT_DELAY
	    153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cq_gearbox_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cq_gearbox_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cq_gearbox_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	max_payload_bytes <= `BSV_ASSIGNMENT_DELAY 13'd128;
	max_read_req_bytes <= `BSV_ASSIGNMENT_DELAY 13'd128;
	msix_enable <= `BSV_ASSIGNMENT_DELAY 1'd0;
	msix_masked <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rc_gearbox_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_gearbox_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rc_gearbox_read_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rcb_mask <= `BSV_ASSIGNMENT_DELAY 7'h3F;
	rq_f_tlps_rv <= `BSV_ASSIGNMENT_DELAY
	    154'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rq_gearbox_block0 <= `BSV_ASSIGNMENT_DELAY 150'd0;
	rq_gearbox_block0_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rq_gearbox_block1 <= `BSV_ASSIGNMENT_DELAY 150'd0;
	rq_gearbox_block1_status <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rq_gearbox_write_block <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rq_rg_dwcount <= `BSV_ASSIGNMENT_DELAY 11'd0;
      end
    else
      begin
        if (cc_f_tlps_rv$EN)
	  cc_f_tlps_rv <= `BSV_ASSIGNMENT_DELAY cc_f_tlps_rv$D_IN;
	if (cc_gearbox_block0$EN)
	  cc_gearbox_block0 <= `BSV_ASSIGNMENT_DELAY cc_gearbox_block0$D_IN;
	if (cc_gearbox_block0_status$EN)
	  cc_gearbox_block0_status <= `BSV_ASSIGNMENT_DELAY
	      cc_gearbox_block0_status$D_IN;
	if (cc_gearbox_block1$EN)
	  cc_gearbox_block1 <= `BSV_ASSIGNMENT_DELAY cc_gearbox_block1$D_IN;
	if (cc_gearbox_block1_status$EN)
	  cc_gearbox_block1_status <= `BSV_ASSIGNMENT_DELAY
	      cc_gearbox_block1_status$D_IN;
	if (cc_gearbox_write_block$EN)
	  cc_gearbox_write_block <= `BSV_ASSIGNMENT_DELAY
	      cc_gearbox_write_block$D_IN;
	if (cc_rg_dwcount$EN)
	  cc_rg_dwcount <= `BSV_ASSIGNMENT_DELAY cc_rg_dwcount$D_IN;
	if (cq_f_cq_rv$EN)
	  cq_f_cq_rv <= `BSV_ASSIGNMENT_DELAY cq_f_cq_rv$D_IN;
	if (cq_gearbox_block0_status$EN)
	  cq_gearbox_block0_status <= `BSV_ASSIGNMENT_DELAY
	      cq_gearbox_block0_status$D_IN;
	if (cq_gearbox_block1_status$EN)
	  cq_gearbox_block1_status <= `BSV_ASSIGNMENT_DELAY
	      cq_gearbox_block1_status$D_IN;
	if (cq_gearbox_read_block$EN)
	  cq_gearbox_read_block <= `BSV_ASSIGNMENT_DELAY
	      cq_gearbox_read_block$D_IN;
	if (max_payload_bytes$EN)
	  max_payload_bytes <= `BSV_ASSIGNMENT_DELAY max_payload_bytes$D_IN;
	if (max_read_req_bytes$EN)
	  max_read_req_bytes <= `BSV_ASSIGNMENT_DELAY max_read_req_bytes$D_IN;
	if (msix_enable$EN)
	  msix_enable <= `BSV_ASSIGNMENT_DELAY msix_enable$D_IN;
	if (msix_masked$EN)
	  msix_masked <= `BSV_ASSIGNMENT_DELAY msix_masked$D_IN;
	if (rc_gearbox_block0_status$EN)
	  rc_gearbox_block0_status <= `BSV_ASSIGNMENT_DELAY
	      rc_gearbox_block0_status$D_IN;
	if (rc_gearbox_block1_status$EN)
	  rc_gearbox_block1_status <= `BSV_ASSIGNMENT_DELAY
	      rc_gearbox_block1_status$D_IN;
	if (rc_gearbox_read_block$EN)
	  rc_gearbox_read_block <= `BSV_ASSIGNMENT_DELAY
	      rc_gearbox_read_block$D_IN;
	if (rcb_mask$EN) rcb_mask <= `BSV_ASSIGNMENT_DELAY rcb_mask$D_IN;
	if (rq_f_tlps_rv$EN)
	  rq_f_tlps_rv <= `BSV_ASSIGNMENT_DELAY rq_f_tlps_rv$D_IN;
	if (rq_gearbox_block0$EN)
	  rq_gearbox_block0 <= `BSV_ASSIGNMENT_DELAY rq_gearbox_block0$D_IN;
	if (rq_gearbox_block0_status$EN)
	  rq_gearbox_block0_status <= `BSV_ASSIGNMENT_DELAY
	      rq_gearbox_block0_status$D_IN;
	if (rq_gearbox_block1$EN)
	  rq_gearbox_block1 <= `BSV_ASSIGNMENT_DELAY rq_gearbox_block1$D_IN;
	if (rq_gearbox_block1_status$EN)
	  rq_gearbox_block1_status <= `BSV_ASSIGNMENT_DELAY
	      rq_gearbox_block1_status$D_IN;
	if (rq_gearbox_write_block$EN)
	  rq_gearbox_write_block <= `BSV_ASSIGNMENT_DELAY
	      rq_gearbox_write_block$D_IN;
	if (rq_rg_dwcount$EN)
	  rq_rg_dwcount <= `BSV_ASSIGNMENT_DELAY rq_rg_dwcount$D_IN;
      end
    if (cq_rg_dwcount$EN)
      cq_rg_dwcount <= `BSV_ASSIGNMENT_DELAY cq_rg_dwcount$D_IN;
    if (rc_rg_dwcount$EN)
      rc_rg_dwcount <= `BSV_ASSIGNMENT_DELAY rc_rg_dwcount$D_IN;
    if (rq_rg_first_be$EN)
      rq_rg_first_be <= `BSV_ASSIGNMENT_DELAY rq_rg_first_be$D_IN;
    if (rq_rg_last_be$EN)
      rq_rg_last_be <= `BSV_ASSIGNMENT_DELAY rq_rg_last_be$D_IN;
    if (rq_rg_mdw$EN) rq_rg_mdw <= `BSV_ASSIGNMENT_DELAY rq_rg_mdw$D_IN;
  end

  always@(posedge CLK_aclk)
  begin
    if (network_status$OUT_RST == `BSV_RESET_VALUE)
      begin
        cnt <= `BSV_ASSIGNMENT_DELAY 8'd0;
	tracesOn <= `BSV_ASSIGNMENT_DELAY 1'd0;
	vecSize <= `BSV_ASSIGNMENT_DELAY 8'd0;
	vrgs_0 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	vrgs_1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	vrgs_2 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	vrgs_3 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	vrgs_4 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	vrgs_5 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	vrgs_6 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	vrgs_7 <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (tracesOn$EN) tracesOn <= `BSV_ASSIGNMENT_DELAY tracesOn$D_IN;
	if (vecSize$EN) vecSize <= `BSV_ASSIGNMENT_DELAY vecSize$D_IN;
	if (vrgs_0$EN) vrgs_0 <= `BSV_ASSIGNMENT_DELAY vrgs_0$D_IN;
	if (vrgs_1$EN) vrgs_1 <= `BSV_ASSIGNMENT_DELAY vrgs_1$D_IN;
	if (vrgs_2$EN) vrgs_2 <= `BSV_ASSIGNMENT_DELAY vrgs_2$D_IN;
	if (vrgs_3$EN) vrgs_3 <= `BSV_ASSIGNMENT_DELAY vrgs_3$D_IN;
	if (vrgs_4$EN) vrgs_4 <= `BSV_ASSIGNMENT_DELAY vrgs_4$D_IN;
	if (vrgs_5$EN) vrgs_5 <= `BSV_ASSIGNMENT_DELAY vrgs_5$D_IN;
	if (vrgs_6$EN) vrgs_6 <= `BSV_ASSIGNMENT_DELAY vrgs_6$D_IN;
	if (vrgs_7$EN) vrgs_7 <= `BSV_ASSIGNMENT_DELAY vrgs_7$D_IN;
      end
    if (trace$EN) trace <= `BSV_ASSIGNMENT_DELAY trace$D_IN;
  end

  always@(posedge CLK_user_clk or
	  `BSV_RESET_EDGE rc_gearbox_sCombinedReset$RST_OUT)
  if (rc_gearbox_sCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      rc_gearbox_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (rc_gearbox_sInReset_pre_isInReset$EN)
	rc_gearbox_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    rc_gearbox_sInReset_pre_isInReset$D_IN;
    end

  always@(posedge CLK_user_clk or
	  `BSV_RESET_EDGE rq_gearbox_dCombinedReset$RST_OUT)
  if (rq_gearbox_dCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      rq_gearbox_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (rq_gearbox_dInReset_pre_isInReset$EN)
	rq_gearbox_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    rq_gearbox_dInReset_pre_isInReset$D_IN;
    end

  always@(posedge CLK_user_clk or
	  `BSV_RESET_EDGE cc_gearbox_dCombinedReset$RST_OUT)
  if (cc_gearbox_dCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      cc_gearbox_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (cc_gearbox_dInReset_pre_isInReset$EN)
	cc_gearbox_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    cc_gearbox_dInReset_pre_isInReset$D_IN;
    end

  always@(posedge CLK_user_clk or
	  `BSV_RESET_EDGE cq_gearbox_sCombinedReset$RST_OUT)
  if (cq_gearbox_sCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      cq_gearbox_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (cq_gearbox_sInReset_pre_isInReset$EN)
	cq_gearbox_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    cq_gearbox_sInReset_pre_isInReset$D_IN;
    end

  always@(posedge CLK_user_clk_half or
	  `BSV_RESET_EDGE rc_gearbox_dCombinedReset$RST_OUT)
  if (rc_gearbox_dCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      rc_gearbox_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (rc_gearbox_dInReset_pre_isInReset$EN)
	rc_gearbox_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    rc_gearbox_dInReset_pre_isInReset$D_IN;
    end

  always@(posedge CLK_user_clk_half or
	  `BSV_RESET_EDGE rq_gearbox_sCombinedReset$RST_OUT)
  if (rq_gearbox_sCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      rq_gearbox_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (rq_gearbox_sInReset_pre_isInReset$EN)
	rq_gearbox_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    rq_gearbox_sInReset_pre_isInReset$D_IN;
    end

  always@(posedge CLK_user_clk_half or
	  `BSV_RESET_EDGE cc_gearbox_sCombinedReset$RST_OUT)
  if (cc_gearbox_sCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      cc_gearbox_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (cc_gearbox_sInReset_pre_isInReset$EN)
	cc_gearbox_sInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    cc_gearbox_sInReset_pre_isInReset$D_IN;
    end

  always@(posedge CLK_user_clk_half or
	  `BSV_RESET_EDGE cq_gearbox_dCombinedReset$RST_OUT)
  if (cq_gearbox_dCombinedReset$RST_OUT == `BSV_RESET_VALUE)
    begin
      cq_gearbox_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY 1'd1;
    end
  else
    begin
      if (cq_gearbox_dInReset_pre_isInReset$EN)
	cq_gearbox_dInReset_pre_isInReset <= `BSV_ASSIGNMENT_DELAY
	    cq_gearbox_dInReset_pre_isInReset$D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cc_f_tlps_rv = 154'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cc_gearbox_block0 = 134'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cc_gearbox_block0_status = 1'h0;
    cc_gearbox_block1 = 134'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cc_gearbox_block1_status = 1'h0;
    cc_gearbox_dInReset_pre_isInReset = 1'h0;
    cc_gearbox_elem0_status_0 = 1'h0;
    cc_gearbox_elem0_status_1 = 1'h0;
    cc_gearbox_elem1_status_0 = 1'h0;
    cc_gearbox_elem1_status_1 = 1'h0;
    cc_gearbox_read_block = 1'h0;
    cc_gearbox_sInReset_pre_isInReset = 1'h0;
    cc_gearbox_write_block = 1'h0;
    cc_rg_dwcount = 11'h2AA;
    cnt = 8'hAA;
    cq_f_cq_rv = 153'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cq_gearbox_block0_status = 1'h0;
    cq_gearbox_block1_status = 1'h0;
    cq_gearbox_dInReset_pre_isInReset = 1'h0;
    cq_gearbox_elem0_status_0 = 1'h0;
    cq_gearbox_elem0_status_1 = 1'h0;
    cq_gearbox_elem1_status_0 = 1'h0;
    cq_gearbox_elem1_status_1 = 1'h0;
    cq_gearbox_elem_0 = 76'hAAAAAAAAAAAAAAAAAAA;
    cq_gearbox_elem_1 = 76'hAAAAAAAAAAAAAAAAAAA;
    cq_gearbox_elem_2 = 76'hAAAAAAAAAAAAAAAAAAA;
    cq_gearbox_elem_3 = 76'hAAAAAAAAAAAAAAAAAAA;
    cq_gearbox_read_block = 1'h0;
    cq_gearbox_sInReset_pre_isInReset = 1'h0;
    cq_gearbox_write_block = 1'h0;
    cq_rg_dwcount = 11'h2AA;
    cq_rg_even_enq = 1'h0;
    cq_rg_pad_odd_tail = 1'h0;
    intr_on = 1'h0;
    lnk_up_cr = 1'h0;
    max_payload_bytes = 13'h0AAA;
    max_payload_cr = 13'h0AAA;
    max_rd_req_cr = 13'h0AAA;
    max_read_req_bytes = 13'h0AAA;
    msix_enable = 1'h0;
    msix_enable_cr = 1'h0;
    msix_masked = 1'h0;
    msix_masked_cr = 1'h0;
    rc_gearbox_block0_status = 1'h0;
    rc_gearbox_block1_status = 1'h0;
    rc_gearbox_dInReset_pre_isInReset = 1'h0;
    rc_gearbox_elem0_status_0 = 1'h0;
    rc_gearbox_elem0_status_1 = 1'h0;
    rc_gearbox_elem1_status_0 = 1'h0;
    rc_gearbox_elem1_status_1 = 1'h0;
    rc_gearbox_elem_0 = 76'hAAAAAAAAAAAAAAAAAAA;
    rc_gearbox_elem_1 = 76'hAAAAAAAAAAAAAAAAAAA;
    rc_gearbox_elem_2 = 76'hAAAAAAAAAAAAAAAAAAA;
    rc_gearbox_elem_3 = 76'hAAAAAAAAAAAAAAAAAAA;
    rc_gearbox_read_block = 1'h0;
    rc_gearbox_sInReset_pre_isInReset = 1'h0;
    rc_gearbox_write_block = 1'h0;
    rc_rg_dwcount = 11'h2AA;
    rc_rg_even_enq = 1'h0;
    rc_rg_in_packet = 1'h0;
    rc_rg_pad_odd_tail = 1'h0;
    rcb_cr = 8'hAA;
    rcb_mask = 7'h2A;
    rq_f_tlps_rv = 154'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rq_gearbox_block0 = 150'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rq_gearbox_block0_status = 1'h0;
    rq_gearbox_block1 = 150'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rq_gearbox_block1_status = 1'h0;
    rq_gearbox_dInReset_pre_isInReset = 1'h0;
    rq_gearbox_elem0_status_0 = 1'h0;
    rq_gearbox_elem0_status_1 = 1'h0;
    rq_gearbox_elem1_status_0 = 1'h0;
    rq_gearbox_elem1_status_1 = 1'h0;
    rq_gearbox_read_block = 1'h0;
    rq_gearbox_sInReset_pre_isInReset = 1'h0;
    rq_gearbox_write_block = 1'h0;
    rq_rg_dwcount = 11'h2AA;
    rq_rg_first_be = 4'hA;
    rq_rg_last_be = 4'hA;
    rq_rg_mdw = 33'h0AAAAAAAA;
    trace =
	576'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    tracesOn = 1'h0;
    vecSize = 8'hAA;
    vrgs_0 = 2'h2;
    vrgs_1 = 2'h2;
    vrgs_2 = 2'h2;
    vrgs_3 = 2'h2;
    vrgs_4 = 2'h2;
    vrgs_5 = 2'h2;
    vrgs_6 = 2'h2;
    vrgs_7 = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSVF_Bridge

